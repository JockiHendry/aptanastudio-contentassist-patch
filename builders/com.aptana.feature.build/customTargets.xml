<project name="customnTargets overrides" default="noDefault">
	<import file="${eclipse.pdebuild.templates}/headless-build/customTargets.xml"/>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${builder}/ant-contrib/ant-contrib.jar" />
		</classpath>
	</taskdef>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
		<!-- Need to grab version qualifier for scripting plugin, we do that by cloning and checking 
		last commit of each bundle vs last commit of plugin. This MUST be done before the generateScript target
		or else the qualifier we insert into build.properties is ignored.  -->
		<property name="scripting.plugin.dir" location="${buildDirectory}/plugins/com.aptana.scripting"/>
		<property name="bundle.timestamps.file" location="${scripting.plugin.dir}/bundle_timestamps.txt"/>

		<!-- Find latest commit date between this plugin and every bundle and use that as the build qualifier! -->
		<exec executable="/bin/bash" dir="${scripting.plugin.dir}" append="true" output="${bundle.timestamps.file}">
			<arg value="-c" />
			<arg value="git log --max-count=1 --pretty=format:'%ct' ." />
		</exec>
		<echo append="true" file="${bundle.timestamps.file}" message="," />

		<!-- Pull down the cache pre-generation scripts -->
		<delete dir="${scripting.plugin.dir}/bundles/studio3-sdk" failonerror="true" />
		<echo message="git clone git://github.com/aptana/studio3-sdk.git" />
		<exec executable="/bin/bash" dir="${scripting.plugin.dir}/bundles" failonerror="true">
			<arg value="-c" />
			<arg value="git clone git://github.com/aptana/studio3-sdk.git" />
		</exec>
		<property name="cache.generator.script" location="${scripting.plugin.dir}/bundles/studio3-sdk/tools/bundle_cache_generator/main.rb"/>
		<!-- TODO Checkout the correct branch of the generator scripts... -->

		<!-- Grab the pre-defined set of bundles -->
		<antcall target="clone-bundle">
			<param name="bundle.name" value="text.ruble" />
			<param name="bundle.dir.name" value="text.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="source.ruble" />
			<param name="bundle.dir.name" value="source.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="math.ruble" />
			<param name="bundle.dir.name" value="math.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="ruby.ruble" />
			<param name="bundle.dir.name" value="ruby.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="rails.ruble" />
			<param name="bundle.dir.name" value="rails.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="html.ruble" />
			<param name="bundle.dir.name" value="html.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="css.ruble" />
			<param name="bundle.dir.name" value="css.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="js.ruble" />
			<param name="bundle.dir.name" value="js.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="xml.ruble" />
			<param name="bundle.dir.name" value="xml.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="bundle-dev.ruble" />
			<param name="bundle.dir.name" value="bundle-development.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="haml.ruble" />
			<param name="bundle.dir.name" value="haml.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="sass.ruble" />
			<param name="bundle.dir.name" value="sass.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="json.ruble" />
			<param name="bundle.dir.name" value="json.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="rspec.ruble" />
			<param name="bundle.dir.name" value="rspec.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="cucumber.ruble" />
			<param name="bundle.dir.name" value="cucumber.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="yaml.ruble" />
			<param name="bundle.dir.name" value="yaml.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="capistrano.ruble" />
			<param name="bundle.dir.name" value="capistrano.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="heroku.ruble" />
			<param name="bundle.dir.name" value="heroku.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="shell-script.ruble" />
			<param name="bundle.dir.name" value="shell-script.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="php.ruble" />
			<param name="bundle.dir.name" value="php.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="engineyard.ruble" />
			<param name="bundle.dir.name" value="engineyard.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="coffeescript.ruble" />
			<param name="bundle.dir.name" value="coffeescript.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		
		<!-- Delete the pre-generation of cache scripts repo clone -->
		<delete dir="${scripting.plugin.dir}/bundles/studio3-sdk" failonerror="true" />
		
		<!-- Now grab the max value of lastmods in bundle_timestamps.txt file and use that as qualifier! -->
		<script language="javascript">
			<![CDATA[
					importPackage(java.lang, java.util, java.io);

					// The main method (called from the bottom of the file).
					function main() {
						var basedir = project.getProperty("scripting.plugin.dir");
						
						var timestamps = new File(basedir, "bundle_timestamps.txt");
						var reader = new BufferedReader(new FileReader(timestamps));
					    var line = reader.readLine();
						System.out.println(line);
						reader.close();
						var max = 0;
						var numbers = line.split(",");
						for (var i = 0; i < numbers.length; i++) {
							new_number = parseInt(numbers[i]);
							if (new_number > max)
							{
								max = new_number;
							}
						}
						System.out.println("Max timestamp of scripting plugin and bundles: " + max);
					    // Write the max number into the qualifier!
					    var writer = new FileWriter(new File(basedir, "build.properties"), true);
						writer.write("qualifier = " + max + "\n");
						writer.close();
					}

					main();
				]]>
				</script>
	</target>

	<target name="clone-bundle">
		<delete dir="${scripting.plugin.dir}/bundles/${bundle.dir.name}" failonerror="true" />
		<echo message="git clone git://github.com/aptana/${bundle.name}.git ${bundle.dir.name}" />
		<exec executable="/bin/bash" dir="${scripting.plugin.dir}/bundles" failonerror="true">
			<arg value="-c" />
			<arg value="git clone git://github.com/aptana/${bundle.name}.git ${bundle.dir.name}" />
		</exec>
		<!-- Checkout the specified branch -->
		<echo message="git checkout ${bundle.branch}">
		</echo>
		<exec executable="/bin/bash" dir="${scripting.plugin.dir}/bundles/${bundle.dir.name}" failonerror="true">
			<arg value="-c" />
			<arg value="git checkout ${bundle.branch}" />
		</exec>
		<!-- Grab lastmod and append it to file containing all of the lastmods for each packaged ruble -->
		<exec executable="/bin/bash" dir="${scripting.plugin.dir}/bundles/${bundle.dir.name}" append="true" output="${bundle.timestamps.file}" failonerror="true">
			<arg value="-c" />
			<arg value="git log --max-count=1 --pretty=format:'%ct' ." />
		</exec>

		<echo append="true" file="${bundle.timestamps.file}" message="," />
		<!-- Now remove the .git subdirectory -->
		<delete dir="${scripting.plugin.dir}/bundles/${bundle.dir.name}/.git" quiet="true" />
		
		<!-- Now pre-generate the cache files! -->
		<exec executable="/bin/bash" dir="${scripting.plugin.dir}/bundles/studio3-sdk/tools/bundle_cache_generator" failonerror="true">
			<arg value="-c" />
			<arg value="${ruby.executable} -KU ${cache.generator.script} ${scripting.plugin.dir}/bundles/${bundle.dir.name}" />
		</exec>
	</target>
	
	<!-- ===================================================================== -->
	<!-- Steps to do before the repositories are being processed -->
	<!-- ===================================================================== -->
	<target name="preProcessRepos">
		<p2.mirror destination="file:${repoBaseLocation}/mirrored">
			<source location="${libraries-com.p2.repo}" />
			<source location="${webkit.p2.repo}" />
			<!-- <source location="${patch.p2.repo}" /> -->
			<iu id="com.aptana.ide.feature.libraries.subscription.feature.group" />
			<iu id="com.aptana.webkitbrowser.feature.group" />
			<!-- <iu id="org.eclipse.ui.workbench.patch.feature.feature.group" /> -->
		</p2.mirror>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<antcall target="gatherLogs" />
		<antcall target="publish" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish" depends="wipe.deploy.dir, publish.javadocs" unless="dont.deploy">
		<!-- grab final version -->
		<property file="${buildDirectory}/finalFeaturesVersions.properties" />
		<propertycopy name="finalVersion" from="${topLevelElementId}" />
		<!-- copy over result zipfile -->
		<move file="${buildDirectory}/${buildType}.${build.revision}/${topLevelElementId}-${build.revision}-group.group.group.zip" tofile="${deploy.dir}/${topLevelElementId}-${finalVersion}.zip" />
		<!-- Extract zipped p2 repo too -->
		<unzip src="${deploy.dir}/${topLevelElementId}-${finalVersion}.zip" dest="${deploy.dir}" />

		<!-- Check for JDT plugins -->
		<pathconvert property="jdt.found" setonempty="false">
			<path>
				<fileset dir="${deploy.dir}/plugins" includes="org.eclipse.jdt.*" />
			</path>
		</pathconvert>
		<fail message="Generated p2 repo contains JDT plugins!" if="jdt.found" />
	</target>

	<!-- Wipe and rebuild the deploy directory. -->
	<target name="wipe.deploy.dir" unless="dont.deploy">
		<delete dir="${deploy.dir}" failonerror="false" />
		<mkdir dir="${deploy.dir}" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to generate Javadocs -->
	<!-- ===================================================================== -->
	<target name="publish.javadocs" if="generate.javadocs" unless="dont.deploy">
		<!-- Hack together the classpath for our plugins -->
		<path id="javadoc.classpath">
			<!-- Eclipse plugins -->
			<fileset dir="${baseLocation}/plugins">
				<include name="*.jar" />
			</fileset>

			<!-- Mirrored dependencies -->
			<fileset dir="${repoBaseLocation}/mirrored/plugins">
				<include name="*.jar" />
			</fileset>

			<!-- need to include the binaries of the non-included source packages like org.jruby or org.w3c -->
			<dirset dir="${buildDirectory}/plugins">
				<include name="beaver*/bin" />
				<include name="com.amazon.*/bin" />
				<include name="org.*/bin" />
				<include name="json.*/bin" />
			</dirset>
			<fileset dir="${buildDirectory}/plugins">
				<include name="**/*.jar" />
			</fileset>
		</path>
		<!-- Now generate the javadocs for com.aptana.* packages -->
		<javadoc destdir="${deploy.dir}/docs" packagenames="com.aptana.*" classpathref="javadoc.classpath" author="true" version="true" use="true" windowtitle="Aptana Studio API" encoding="UTF-8" maxmemory="256m">

			<sourcepath>
				<dirset dir="${buildDirectory}/plugins">
					<include name="com.*/src" />
				</dirset>
			</sourcepath>
		</javadoc>

		<!-- Lastly, copy over the new stylesheet and files -->
		<copy todir="${deploy.dir}/docs" overwrite="true">
			<fileset dir="${builder}/docs" defaultexcludes="true">
			    <include name="resources/*"/>
				<include name="stylesheet.css"/>
			</fileset>
		</copy>
	</target>
</project>
