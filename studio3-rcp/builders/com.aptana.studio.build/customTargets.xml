<project name="customTargets overrides" default="noDefault">
	<import file="${eclipse.pdebuild.templates}/headless-build/customTargets.xml" />
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${builder}/ant-contrib/ant-contrib.jar" />
		</classpath>
	</taskdef>

	<!-- ===================================================================== -->
	<!-- Steps to do before the repositories are being processed -->
	<!-- ===================================================================== -->
	<target name="preProcessRepos">
		<p2.mirror destination="file:${repoBaseLocation}/mirrored">
			<source location="${studio3.p2.repo}" />
			<source location="${php.p2.repo}" />
			<source location="${pydev.p2.repo}" />
			<source location="${radrails.p2.repo}" />
			<iu id="com.aptana.feature.feature.group" />
			<iu id="com.aptana.php.feature.feature.group" />
			<iu id="com.aptana.pydev.feature.feature.group" />
			<iu id="org.radrails.rails.feature.group" />
		</p2.mirror>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<antcall target="gatherLogs" />
		<antcall target="publish" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish" depends="wipe.deploy.dir, publish.javadocs">
		<!-- grab final version -->
		<property file="${buildDirectory}/finalFeaturesVersions.properties" />
		<propertycopy name="finalVersion" from="${topLevelElementId}" />
		<!-- copy over result zipfile -->
		<move file="${buildDirectory}/${buildType}.${build.revision}/${topLevelElementId}-${build.revision}-group.group.group.zip" tofile="${deploy.dir}/${topLevelElementId}-${finalVersion}.zip" />
		<!-- Create a version.txt file containing the final version string -->
		<echo message="${finalVersion}" file="${deploy.dir}/version.txt" />
		<!-- Extract zipped p2 repo too -->
		<unzip src="${deploy.dir}/${topLevelElementId}-${finalVersion}.zip" dest="${deploy.dir}" />
		<!-- copy over index.html file -->
		<replace token="ZIP_FILE" value="${topLevelElementId}-${finalVersion}.zip" file="${builder}/update_site/index.html" />
		<move file="${builder}/update_site/index.html" tofile="${deploy.dir}/index.html" />
		<copy file="${builder}/update_site/site.xml" tofile="${deploy.dir}/site.xml" />
		<replace token="{version.full}" value="${finalVersion}" file="${deploy.dir}/site.xml" />
	</target>

	<!-- Wipe and rebuild the deploy directory. -->
	<target name="wipe.deploy.dir">
		<delete dir="${deploy.dir}" failonerror="false" />
		<mkdir dir="${deploy.dir}" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to generate Javadocs -->
	<!-- ===================================================================== -->
	<target name="publish.javadocs" if="generate.javadocs">
		<!-- Hack together the classpath for our plugins -->
		<path id="javadoc.classpath">
			<!-- Eclipse plugins -->
			<fileset dir="${baseLocation}/plugins">
				<include name="*.jar" />
			</fileset>

			<!-- Mirrored dependencies -->
			<fileset dir="${repoBaseLocation}/mirrored/plugins">
				<include name="*.jar" />
			</fileset>

			<!-- need to include the binaries of the non-included source packages like org.jruby or org.w3c -->
			<dirset dir="${buildDirectory}/plugins">
				<include name="beaver*/bin" />
				<include name="com.amazon.*/bin" />
				<include name="org.*/bin" />
				<include name="json.*/bin" />
			</dirset>
			<fileset dir="${buildDirectory}/plugins">
				<include name="**/*.jar" />
			</fileset>
		</path>
		<!-- Now generate the javadocs for com.aptana.* packages -->
		<javadoc destdir="${deploy.dir}/docs" packagenames="com.aptana.*" classpathref="javadoc.classpath" author="true" version="true" use="true" windowtitle="Aptana Studio API" encoding="UTF-8" maxmemory="256m">

			<sourcepath>
				<dirset dir="${buildDirectory}/plugins">
					<include name="com.*/src" />
				</dirset>
			</sourcepath>
		</javadoc>

		<!-- Lastly, copy over the new stylesheet and files -->
		<copy todir="${deploy.dir}/docs" overwrite="true">
			<fileset dir="${builder}/docs" defaultexcludes="true">
			    <include name="resources/*"/>
				<include name="stylesheet.css"/>
			</fileset>
		</copy>
	</target>
</project>
