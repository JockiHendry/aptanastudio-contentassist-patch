<?xml version="1.0"?>
<!-- Aptana Studio support for the jQuery 1.8.3 JavaScript Libary -->
<!-- by The Solid Snake - thesolidsnake.wordpress.com --> 
<javascript>
	<aliases>
		<alias name="$" type="jQuery" />
	</aliases>
	<class type="jQuery">
		<constructors>
		
			<constructor scope="instance">
				<description>Accepts a string containing a CSS selector which is then used to match a set of elements.</description>
				<parameters>
					<parameter name="selector" usage="required" type="String">
						<description>A string containing a selector expression</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<examples>
					<example>Find all div elements
	$("div", xml.responseXML);</example>
				</examples>
			</constructor>

		
			<constructor scope="instance">
				<description>Accepts a string containing a CSS selector which is then used to match a set of elements.</description>
				<parameters>
					<parameter name="selector" usage="required" type="String">
						<description>A string containing a selector expression</description>
					</parameter>
					<parameter name="context" usage="optional" type="Object">
						<description>A DOM Element, Document, or jQuery to use as context</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<examples>
					<example>Find all div elements within an XML document from an Ajax reponse.
	$("div", xml.responseXML);</example>
				</examples>
			</constructor>	
			
			<constructor scope="instance">
				<description>At present, the only operations supported on plain JavaScript objects wrapped in jQuery are:
.data(), .prop(), .bind(), .unbind(), .trigger() and .triggerHandler().</description>
				<parameters>
					<parameter name="object" usage="required" type="Object">
						<description>A plain object to wrap in a jQuery object.</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<examples>
					<example>Define a plain object, wrap it with jQuery, and test accesing property values.
	var foo = {foo:'bar', hello:'world'};
	var $foo = $(foo);
	var test1 = $foo.prop('foo');</example>
				</examples>
			</constructor>
			
			<constructor scope="instance">
				<description>Accepts an array containing a set of DOM elements to wrap in a jQuery object.</description>
				<parameters>
					<parameter name="elementArray" usage="required" type="Element[]">
						<description>An array containing a set of DOM elements to wrap in a jQuery object.</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
			</constructor>		
			
			<constructor scope="instance">
				<description>Calling the jQuery() method with no arguments returns an empty jQuery set (with a .length property of 0).</description>				
				<return-types>
					<return-type type="jQuery" />
				</return-types>
			</constructor>
			
			<constructor scope="instance">
				<description>Creates DOM elements on the fly from the provided string of raw HTML.</description>
				<parameters>
					<parameter name="html" usage="required" type="String">
						<description>A string of HTML to create on the fly.  Note that this parse HTML, not XML.</description>
					</parameter>
					<parameter name="ownerDocument" usage="optional" type="Document">
						<description>A document in which the new elements will be created</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<examples>
					<example>Create a div element (and all of its contents) dynamically and append it to the body element.
	$("&lt;div&gt;&lt;p&gt;Hello&lt;/p&gt;&lt;/div&gt;").appendTo("body");</example>
				</examples>
			</constructor>
			
			<constructor scope="instance">
				<description>Creates DOM elements on the fly from the provided string of raw HTML.</description>
				<parameters>
					<parameter name="html" usage="required" type="String">
						<description>A string defining a single, standalone, HTML element (e.g. &lt;div/&gt; or &lt;div&gt;&lt;/div&gt;).</description>
					</parameter>
					<parameter name="props" usage="required" type="Map">
						<description>An map of attributes, events, and methods to call on the newly-created element.</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<examples>
					<example>Create some DOM elements.
	$("&lt;div/&gt;", {
		"class": "test",
		text: "Click me!",
		click: function() {
			$(this).toggleClass("test");
		}
	}).appendTo("body");</example>
				</examples>
			</constructor>
					
		</constructors>
		
		<properties>
			
			<property name="context" type="Element" scope="instance">
				<description>The DOM node context originally passed to jQuery().</description>
				<examples>
					<example>Determine the exact context used.
	$("ul").append("&lt;li&gt;" + $("ul").context + "&lt;/li&gt;")
	       .append("&lt;li&gt;" + $("ul", document.body).context.nodeName + "&lt;/li&gt;");</example>
				</examples>
			</property>
			
			<property name="cssHooks" type="Object" scope="instance">
				<description>Hook directly into jQuery to override how particular CSS properties are retrieved or set.</description>
				<examples>
					<example>
	(function($) {
		// first, check to see if cssHooks are supported
		if (!$.cssHooks) {
			throw("jQUery 1.4.3 or above is required");
			return;
		}
		$.cssHooks["someCSSProp"] = {
			get: function(elem, computed, extra) {
				// handle getting the CSS propety
			},
			set: function(elem, value) {
				// handle setting the CSS value
			}
		};
	})(jQuery);</example>
				</examples>
			</property>
			
			<property name="fx" type="jQuery.fx" scope="instance">
				<description>fx is a global jQuery object.</description>
			</property>
			
			<property name="jquery" type="String" scope="instance">
				<description>A string containing the jQuery version number.</description>
			</property>
			
			<property name="length" type="Number" scope="instance">
				<description>The number of elements in the jQuery object.</description>
			</property>

			<property name="support" type="Object" scope="instance">
				<description>A collection of properties that represent the presence of different browser features or bugs.
Primarily intended for jQuery's internal use; specific properties may be removed when they are no longer needed internally 
to improve page startup performance.</description>
			</property>
			
		</properties>
		
		<methods>
		
			<method name="add" scope="instance">
				<description>Add elements to the set of matched elements.</description>
				<parameters>
					<parameter name="selector" usage="required" type="String">
						<description>A string representing a selector expression to find additional elements or HTML fragment to add to the set of matched elements.</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="jQuery"/>
				</return-types>
				<examples>
					<example>Add &lt;div&gt; into &lt;p&gt; and save it to a variable:
	var pdiv = $("p").add("div");</example>
				</examples>
			</method>
			
			<method name="add" scope="instance">
				<description>Add elements to the set of matched elements.</description>
				<parameters>
					<parameter name="elements" usage="required" type="Element">
						<description>One or more elements to add to the set of matched elements.</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="jQuery"/>
				</return-types>
			</method>

			<method name="add" scope="instance">
				<description>Add elements to the set of matched elements.</description>
				<parameters>
					<parameter name="object" usage="required" type="jQuery">
						<description>An existing jQuery object to add to the set of matched elements.</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="jQuery"/>
				</return-types>
			</method>
			
			<method name="add" scope="instance">
				<description>Add elements to the set of matched elements.</description>
				<parameters>
					<parameter name="selector" usage="required" type="String">
						<description>A string representing a selector expression to find additional elements to add to the set of matched elements.</description>
					</parameter>
					<parameter name="context" usage="required" type="Object">
						<description>The point in the document at which the selector should begin matching; similiar to the context argument of the $(selector, context) method.</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="jQuery"/>
				</return-types>
			</method>
		
			<method name="addClass" scope="instance">
				<description>Adds the specified class(es) to each of the set of matched elements.</description>
				<parameters>
					<parameter name="className" usage="required" type="String">
						<description>One or more class names to be added to the class attribute of each matched element.</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="jQuery"/>
				</return-types>
				<examples>
					<example>More than one class may be added at a time, separated by a space, to the set of matched elements, like so:
	$("p").addClass("myClass yourClass");</example>
				</examples>
			</method>
			
			<method name="addClass" scope="instance">
				<description>Adds the specified class(es) to each of the set of matched elements based on a function return value. 
The function receives the index position of the element in the set and the existing class name(s) as 
arguments.  Within the function, this refers to the current element in the set.</description>
				<parameters>
					<parameter name="function" usage="required" type="Function">
						<description>function(index, currentClass) is a function returning one or more space-separated class names&lt;br&gt;
to be added to the existing class name(s).  Receives the index position of the element &lt;br&gt;
in the set and the existing class name(s) as arguments.  Within the function, &lt;br&gt;
this refers to the current element in the set.</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="jQuery"/>
				</return-types>
				<examples>
					<example>Given an unorderer list with five &lt;li&gt; elements, this example add the class "item-4" to the last &lt;li&gt;:
	$("ul li:last").addClass(function(index) {
		return "item-" + index;
	});</example>
				</examples>
			</method>
			
			<method name="after" scope="instance">
				<description>Insert content, specified by the parameter, after each element in the set of matched elements.</description>
				<parameters>
					<parameter name="content" usage="required" type="Object">
						<description>HTML string, DOM element, or jQuery object to insert after each element in the set of matched elements.</description>
					</parameter>
					<parameter name="content" usage="optional" type="Object">
						<description>One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert after each element in the set of matched elements.</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="jQuery"/>
				</return-types>
				<examples>
					<example>Insert some HTML after all paragraphs.
	$("p").after("&lt;b&gt;Hello&lt;/b&gt;");</example>
				</examples>
			</method>
			
			<method name="after" scope="instance">
				<description>Insert content, specified by a function, after each element in the set of matched elements. The parameter function
receives the index position of the element in the set as an argument.  Within the function, this refers to the current element in the set.</description>
				<parameters>
					<parameter name="function" usage="required" type="Function">
						<description>function(index) is a function that returns an HTML string, DOM element(s), or jQuery object &lt;br&gt;
to insert after each matched element.  Receives the index position of the element in the set as an argument.&lt;br&gt;
Within the function, this refers to the current element in the set.</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="jQuery"/>
				</return-types>
				<examples>
					<example>Given an unorderer list with five &lt;li&gt; elements, this example add the class "item-4" to the last &lt;li&gt;:
	$("ul li:last").addClass(function(index) {
		return "item-" + index;
	});</example>
				</examples>
			</method>
			
			<method name="ajax" scope="instance">
				<description>Perform an asynchronous HTTP (Ajax) request.</description>
				<parameters>
					<parameter name="url" usage="required" type="String">
						<description>A string containing the URL to which the request is sent.</description>
					</parameter>
					<parameter name="settings" usage="optional" type="Map">
						<description>A set of key/value pairs that configure the Ajax request.</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="jqXHR"/>
				</return-types>
				<examples>
					<example>Save some data to the server and notify the user once it's complete.
	$.ajax({
		type: "POST",
		url: "some.php",
		data: {name: "John", location: "Boston"}
	}).done(function(msg) {
		alert("Data Saved: " + msg);
	});</example>
				</examples>
			</method>
			
			<method name="ajax" scope="instance">
				<description>Perform an asynchronous HTTP (Ajax) request.</description>
				<parameters>
					<parameter name="settings" usage="required" type="Map">
						<description>A set of key/value pairs that configure the Ajax request.  All settings are optional.</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="jqXHR" />
				</return-types>
				<examples>
					<example>Specifying a DOM element as the context will make that the context for the complete callback of a request, like so:
	$.ajax({
		url: "test.html",
		context: document.body
	}).done(function(){
		$(this).addClass("done");
	});</example>
				</examples>
			</method>
			
			<method name="ajaxComplete" scope="instance">
				<description>Register a handler to be called when Ajax requests complete.  This is an Ajax Event.</description>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(event, XMLHttpRequest, ajaxOptions) is the function to be invoked.</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<examples>
					<example>Show a message when an Ajax request completes.
	$("#msg").ajaxComplete(function(event, request, settings) {
		$(this).append("&lt;li&gt;Request Complete.&lt;/li&gt;");
	});</example>
				</examples>
			</method>
			
			<method name="ajaxError" scope="instance">
				<description>Register a handler to be called when Ajax requests complete with an error.  This is an Ajax Event.</description>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(event, jqXHR, ajaxSettings, thrownError) The function to be invoked.</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<examples>
					<example>Show a message when an Ajax request fails.
	$("#msg").ajaxError(function(event, request, settings) {
		$(this).append("&lt;li&gt;Error requesting page " + settings.url + "&lt;/li&gt;");
	});</example>
				</examples>
			</method>
			
			<method name="ajaxPrefilter" scope="instance">
				<description>Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax().</description>
				<parameters>
					<parameter name="dataTypes" usage="optional" type="String">
						<description>An optional String containing one or more space-separated dataTypes.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(options, originalOptions, jqXHR) A handler to set default values for future Ajax requests.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Proxies cross-domain request through http://mydomain.net/proxy/:
	$.ajaxPrefilter(function(options) {
		if (options.crossDomain) {
			options.url = "http://mydomain.net/proxy/" + encodeURIComponent(options.url);
			options.crossDomain = false;
		}
	});</example>
				</examples>
			</method>
			
			<method name="ajaxSend" scope="instance">
				<description>Attach a function to be executed before an Ajax request is sent.  This is an Ajax Event.</description>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(event, jqXHR, ajaxOptions) The function to be invoked.</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<examples>
					<example>Show a message before an Ajax request is sent.
	$("#msg").ajaxSend(function(evt, request, settings) {
		$(this).append("&lt;li&gt;Starting request at " + settings.url + "&lt;/li&gt;");
	});</example>
				</examples>
			</method>			
			
			<method name="ajaxSetup" scope="instance">
				<description>Set default values for future Ajax requests.</description>
				<parameters>
					<parameter name="options" usage="required" type="Map">
						<description>A set of key/value pairs that configure the default Ajax request.  All options are optional.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Set the defaults for Ajax requests to the url "/xmlhttp/", 
disables global handlers and uses POST instead of GET.  
The following Ajax requests then sends some data without having to set anything else.
	$.ajaxSetup({
		url: "/xmlhttp",
		global: false,
		type: "POST"
	});				
	$.ajax({data: myData});</example>
				</examples>
			</method>
			
			<method name="ajaxStart" scope="instance">
				<description>Register a handler to be called when the first Ajax request begins.  This is an Ajax event.</description>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler() is the function to be invoked.</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<examples>
					<example>Show a loading message whenever an Ajax request starts (and none is already active).
	$("#loading").ajaxStart(function() {
		$(this).show();
	});</example>
				</examples>
			</method>
			
			<method name="ajaxStop" scope="instance">
				<description>Register a handler to be called when all Ajax requests have completed.  This is an Ajax event.</description>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler() is the function to be invoked.</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<examples>
					<example>Hide a loading message after all the Ajax requests have stopped.
	$("#loading").ajaxStop(function() {
		$(this).hide();
	});</example>
				</examples>
			</method>
			
			<method name="ajaxSuccess" scope="instance">
				<description>Attach a function to be executed whenever an Ajax request completes successfully.  This is an Ajax Event.</description>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(event, XMLHttpRequest, ajaxOptions) The function to be invoked.</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<examples>
					<example>Show a message when an Ajax request completes successfully.
	$("#msg").ajaxSuccess(function(evt, request, settings) {
		$(this).append("&lt;li&gt;Successful Request!&lt;/li&gt;");
	});</example>
				</examples>
			</method>
			
			<method name="andSelf" scope="instance">
				<description>Add the previous set of elements on the stack to the current set.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<examples>
					<example>Find all divs, and all the paragraphs inside of them, and give them bot class names.
	$("div").find("p").andSelf().addClass("border");
Notice the div doesn't have the yellow backgroud color since it didn't use .andSelf():
	$("div").find("p").addClass("background");</example>
				</examples>
			</method>
			
			<method name="animate" scope="instance">
				<description>Perform a custom animation of a set of CSS properties</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="properties" usage="required" type="Map">
						<description>A map of CSS properties that the animation will move toward.</description>
					</parameter>
					<parameter name="duration" usage="optional" type="Number">
						<description>A string or number determininmg how long the animation will run.</description>
					</parameter>
					<parameter name="easing" usage="optional" type="String">
						<description>A string indicating which easing function to use for the transition.</description>
					</parameter>
					<parameter name="complete" usage="optional" type="Function">
						<description>A function to call once the animation is complete. The callback is not sent any &lt;br&gt;
arguments, but this is set to the DOM element being animated.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$("#go").click(function() {
		$("#block").animate({
			width: "70%",			
			marginLeft: "0.6in",
		}, 1500);
	});
	
	$("#right").click(function() {
		$(".block").animate({"left": "+=50px"}, "slow");
	});</example>
				</examples>
			</method>
			
			<method name="animate" scope="instance">
				<description>Perform a custom animation of a set of CSS properties.</description>
				<return-types>
					<return-type type="jQuery"/>
				</return-types>
				<parameters>
					<parameter name="properties" usage="required" type="Map">
						<description>A map of CSS properties that the animation will move toward.</description>
					</parameter>
					<parameter name="options" usage="required" type="Map">
						<description>A map of additional options to pass to the method.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$("#clickme").click(function() {
		$("#book").animate({
			width: 'toggle',
			height: 'toggle'
		}, {
			duration: 6000,
			specialEasing: {
				width: 'linear',
				height: 'easeOutBounce'
			},
			complete: function() {
				$(this).after('&lt;div&gt;Animation complete.&lt;/div&gt;');
			}
		});
	});
</example>
				</examples>
			</method>
			
			<method name="append" scope="instance">
				<description>Insert content, specified by the parameter, to the end of each element in the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="content" usage="required" type="Element">
						<description>DOM element, HTML string, or jQuery object to insert at the end of matched elements.</description>
					</parameter>
					<parameter name="content" usage="optional" type="Element">
						<description>One or more additional DOM element, array of elements, HTML strings, or jQuery objects to insert at the end of matched elements.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Appends some HTML to all paragraphs.
	$("p").append("&lt;strong&gt;Hello&lt;/strong&gt;");</example>
				</examples>
			</method>
			
			<method name="append" scope="instance">
				<description>Insert content, specified by the parameter, to the end of each element in the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="function" usage="required" type="Function">
						<description>function(index, html) is a function that returns an HTML string, DOM element(s), or jQuery object&lt;br&gt;
to insert at the end of each matched elements.</description>
					</parameter>
				</parameters>				
			</method>
			
			<method name="appendTo" scope="instance">
				<description>Insert every element in the set of matched elements to the end of the target.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="target" usage="required" type="String">
						<description>A selector, element, HTML string, or jQuery object; matched set of elements will be inserted at the end of this parameter.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Appends all spans to the element with the ID "foo"
	$("span").appendTo("#foo");</example>
				</examples>
			</method>
			
			<method name="attr" scope="instance">
				<description>Get the value of an attribute for the first element in the set of matched elements.</description>
				<return-types>
					<return-type type="String" />
				</return-types>
				<parameters>
					<parameter name="attributeName" usage="required" type="String">
						<description>The name of the attribute to get.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Find the title attribute of the first &lt;em&gt; in the page.
	var title = $("em").attr("title");</example>
				</examples>
			</method>
			
			<method name="attr" scope="instance">
				<description>Set one or more attributes for the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="attributeName" usage="required" type="String">
						<description>The name of the attribute to set.</description>
					</parameter>
					<parameter name="value" usage="required" type="String">
						<description>A value to set for the attribute.</description>
					</parameter>
				</parameters>
				<examples>
					<example>To change the alt attribute.
	$('#greatphoto').attr('alt', 'Beijing Brush Seller');</example>
				</examples>
			</method>
			
			<method name="attr" scope="instance">
				<description>Set one or more attributes for the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="map" usage="required" type="Map">
						<description>A map of attribute-value pairs to set.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$('#greatphoto').attr({
		alt: 'Beijing Brush Seller',
		title: 'photo by Kelly Clark'
	});</example>
				</examples>
			</method>
			
			<method name="attr" scope="instance">
				<description>Set one or more attributes for the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="attributeName" usage="required" type="String">
						<description>The name of the attribute to set.</description>
					</parameter>
					<parameter name="function" usage="required" type="Function">
						<description>function(index, attr) is a function returning the value to set.&lt;br&gt;
this is the current element.  Receives the index position of the element&lt;br&gt;
in the set and the old attribute value as arguments.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$('#greatphoto').attr('title', function(i, val) {
		return val + ' - photo by Kelly Clark'
	});</example>
				</examples>
			</method>
			
			<method name="before" scope="instance">
				<description>Insert content, specified by the parameter, before each element in the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="content" usage="required" type="String">
						<description>HTML string, DOM element, or jQuery object to insert before each matched elements.</description>
					</parameter>
					<parameter name="content" usage="optional" type="String">
						<description>One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert before each matched elements.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Insert some HTML before all paragraphs.
	$("p").before("&lt;b&gt;Hello&lt;/b&gt;");</example>
				</examples>
			</method>
			
			<method name="before" scope="instance">
				<description>Insert content, specified by the parameter, before each element in the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="function" usage="required" type="Function">
						<description>A function that returns an HTML string, DOM element(s), or jQuery object to insert before &lt;br&gt;
each matched elements.  Receives the index position of the element in the set as an argument.&lt;br&gt;
Within the function, this refers to the current element in the set.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="bind" scope="instance">
				<description>Attach a handler to an event for the elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventType" usage="required" type="String">
						<description>A string containing one or more DOM event types, such as "click" or "submit".</description>
					</parameter>
					<parameter name="eventData" usage="optional" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="optional" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered. Within the handler,&lt;br&gt;
this refers to the DOM element to which the handler is bound.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Handle click and double-click for the paragraph.
	$("p").bind("click", function(event) {
		var str = "(" + event.pageX + ", " + event.pageY + " )";
		$("span").text("Click happened! " + str);
	});
	$("p").bind("dblclick", function() {
		$("span").text("Double-click happened in " + this.nodeName);
	});</example>
				</examples>				
			</method>
			
			<method name="bind" scope="instance">
				<description>Attach a handler to an event for the elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventType" usage="required" type="String">
						<description>A string containing one or more DOM event types, such as "click" or "submit".</description>
					</parameter>
					<parameter name="eventData" usage="optional" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="preventBubble" usage="optional" type="Boolean">
						<description>Setting the third arguments to false will attach a function that prevents the default action from occuring and stops the event from bubbling.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="bind" scope="instance">
				<description>Attach a handler to an event for the elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="event" usage="required" type="Map">
						<description>A map of one or more DOM event types and functions to execute for them.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Bind multipe event handlers simultaneously.
	$('#foo').bind({
		click: function() { // do something on click },
		mouseenter: function() { // do something on mouseenter }
	});</example>
				</examples>
			</method>
			
			<method name="blur" scope="instance">
				<description>Bind an event handler to the "blur" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$('#target').blur(function() {
		alert('Handler for .blur() called.');
	});</example>
				</examples>
			</method>
			
			<method name="blur" scope="instance">
				<description>Bind an event handler to the "blur" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventData" usage="optional" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="blur" scope="instance">
				<description>Trigger "blur" JavaScript event on an element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<examples>
					<example>To trigger the blur event on all paragraphs.
	$("p").blur();</example>
				</examples>
			</method>
			
			<method name="Callbacks" scope="instance">
				<description>A multi-purpose callback list object that provides a powerful way to manage callback lists.</description>
				<parameters>
					<parameter name="flags" usage="optional" type="String">
						<description>An optional list of space-separated flags that change how the callback list behaves.</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="Callbacks" />
				</return-types>
				<examples>
					<example>
	function fn1(value) {
		console.log(value);
		return false;
	}
	function fn2(value) {
		console.log(value);
		return false;
	}
	var callbacks = $.Callbacks("stopOnFalse");
	callbacks.add(fn1);
	callbacks.fire("foo"); // output: foo
	callbacks.add(fn2);
	callbacks.fire("bar"); // output: bar (fn1 will not fired again)</example>
				</examples>
			</method>		
			
			<method name="change" scope="instance">
				<description>Bind an event handler to the "change" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Attaches a change event to the select that gets the text for each
selected option and writes them in the div.
	$("select").change(function() {
		var str = "";
		$("select option:selected").each(function() {
			str += $(this).text() + " ";
		});
		$("div").text(str);
	});</example>
				</examples>
			</method>	
			
			<method name="change" scope="instance">
				<description>Bind an event handler to the "change" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventData" usage="optional" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="change" scope="instance">
				<description>Trigger "change" JavaScript event on an element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
			</method>			
			
			<method name="children" scope="instance">
				<description>Get the children of each element in the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="optional" type="String">
						<description>A string containing a selector expression to match elements against.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Find all children of the clicked element.
	$("#container").click(function(e) {
		var $kids = $(e.target).children();
	});</example>
				</examples>
			</method>	
			
			<method name="clearQueue" scope="instance">
				<description>Remove from the queue all items that have not yet been run.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="queueName" usage="optional" type="String">
						<description>A string containing the name of the queue.  Defaults to fx.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Empty the queue.
	var myDiv = $("div");
	myDiv.clearQueue();
	myDiv.stop();</example>
				</examples>
			</method>
			
			<method name="click" scope="instance">
				<description>Bind an event handler to the "click" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>A function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Hide paragraphs on a page when they are clicked.
	$("p").click(function() {
		$(this).slideUp();
	});</example>
				</examples>
			</method>
			
			<method name="click" scope="instance">
				<description>Bind an event handler to the "click" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventData" usage="optional" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>A function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="click" scope="instance">
				<description>Trigger "click" JavaScript event on an element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
			</method>
			
			<method name="clone" scope="instance">
				<description>Create a deep copy of the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="withDataAndEvents" usage="optional" type="Boolean">
						<description>A Boolean indicating whether event handlers should be copied along with the elements.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$("b").clone().prependTo("p");</example>
				</examples>
			</method>
			
			<method name="clone" scope="instance">
				<description>Create a deep copy of the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="withDataAndEvents" usage="optional" type="Boolean">
						<description>A Boolean indicating whether event handlers should be copied along with the elements.</description>
					</parameter>
					<parameter name="deepWithDataAndEvents" usage="optional" type="Boolean">
						<description>A Boolean indicating whether event handlers and data for all children of the cloned element should be copied.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$("b").clone().prependTo("p");</example>
				</examples>
			</method>
			
			<method name="closest" scope="instance">
				<description>For each element in the set, get the first element that matches the selector.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="required" type="String">
						<description>A string containing a selector expression to match elements against.</description>
					</parameter>
				</parameters>
				<examples>
					<example>The closest list element toggles a yellow background 
when it or its descendent is clicked.
	$(document).bind("click", function(e) {
		$(e.target).closest("li").toggleClass("hilight");
	});</example>
				</examples>
			</method>
			
			<method name="closest" scope="instance">
				<description>For each element in the set, get the first element that matches the selector.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="required" type="String">
						<description>A string containing a selector expression to match elements against.</description>
					</parameter>
					<parameter name="context" usage="optional" type="Element">
						<description>A DOM element within which a matching element may be found.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="closest" scope="instance">
				<description>For each element in the set, get the first element that matches the selector.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="object" usage="required" type="jQuery">
						<description>A jQuery object to match elements agains.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="closest" scope="instance">
				<description>For each element in the set, get the first element that matches the selector.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="element" usage="required" type="Element">
						<description>An element to match elements against.</description>
					</parameter>
				</parameters>
			</method>			

			<method name="contains" scope="instance">
				<description>Check to see if a DOM element is within another DOM element.</description>
				<return-types>
					<return-type type="Boolean" />
				</return-types>
				<parameters>
					<parameter name="container" usage="required" type="Element">
						<description>The DOM element that may contains the other element.</description>
					</parameter>
					<parameter name="contained" usage="required" type="Element">
						<description>The DOM element that may be contained by the other element.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Check if an element is inside another.
	jQuery.contains(document.documentElement, document.body); // true
	jQUery.contains(document.body, document.documentElement); //false</example>
				</examples>
			</method>
			
			<method name="contents" scope="instance">
				<description>Get the children of each element in the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<examples>
					<example>Find all the text nodes inside a paragraph
and wrap them with a bold tag.
	$("p").contents().filter(function() {
		return this.nodeType!=1;
	}).wrap("&lt;b/&gt;");</example>
				</examples>
			</method>
			
			<method name="css" scope="instance">
				<description>Get the value of a style property for the first element in matched elements.</description>
				<return-types>
					<return-type type="String" />
				</return-types>
				<parameters>
					<parameter name="propertyName" usage="required" type="String">
						<description>A CSS property.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Access the background color of a clicked div.
	var color = $(this).css("background-color");</example>
				</examples>
			</method>
			
			<method name="css" scope="instance">
				<description>Set one or more CSS properties for the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="propertyName" usage="required" type="String">
						<description>A CSS property name.</description>
					</parameter>
					<parameter name="value" usage="required" type="String">
						<description>A value to set for the property.</description>
					</parameter>
				</parameters>
				<examples>
					<example>To change the color of any paragraph to red on mouseover event.
	$("p").mouseover(function() {
		$(this).css("color", "red");
	});</example>
				</examples>
			</method>
			
			<method name="css" scope="instance">
				<description>Set one or more CSS properties for the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="propertyName" usage="required" type="String">
						<description>A CSS property name.</description>
					</parameter>
					<parameter name="function" usage="required" type="Function">
						<description>function(index, value) is a function returning the value to set.  this is the current element.&lt;br&gt;
Receives the index position of the element in the set and the old value as arguments.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$('div.example').css('width', function(index) {
		return index * 50;
	});</example>
				</examples>
			</method>
			
			<method name="css" scope="instance">
				<description>Set one or more CSS properties for the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="map" usage="required" type="Map">
						<description>A map of property-value pairs to set.</description>
					</parameter>
				</parameters>
				<examples>
					<example>To set the color of all paragraphs to red and background to blue:
	var cssObj = {
		'background-color': '#ddd',
		'font-weight': '',
		'color': 'rgb(0,40,244)'
	};
	$(this).css(cssObj);</example>
				</examples>
			</method>
			
			<method name="data" scope="instance">
				<description>Store arbitrary data associated with the matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="key" usage="required" type="String">
						<description>A string naming the piece of data to set.</description>
					</parameter>
					<parameter name="value" usage="required" type="Object">
						<description>The new data value; it can be any Javascript type including Array or Object.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$("div").data("test", {first: 16, last: "pizza!"});</example>
				</examples>
			</method>
			
			<method name="data" scope="instance">
				<description>Store arbitrary data associated with the matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="obj" usage="required" type="Object">
						<description>An object of key-value pairs of data to update.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="data" scope="instance">
				<description>Returns value at named data store for the first element in the jQuery collection, as set by data(name,value).</description>
				<return-types>
					<return-type type="Object" />
				</return-types>
				<parameters>
					<parameter name="key" usage="required" type="String">
						<description>Name of the data stored.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	alert($('body').data('foo'));</example>
				</examples>
			</method>
			
			<method name="data" scope="instance">
				<description>Returns value at named data store for the first element in the jQuery collection, as set by data(name,value).</description>
				<return-types>
					<return-type type="Object" />
				</return-types>
				<examples>
					<example>
	alert($('body').data());</example>
				</examples>
			</method>
			
			<method name="data" scope="instance">
				<description>Store arbitrary data associated with the specified element.</description>
				<return-types>
					<return-type type="Object" />
				</return-types>
				<parameters>
					<parameter name="element" usage="required" type="Element">
						<description>The DOM element to associate with the data.</description>
					</parameter>
					<parameter name="key" usage="required" type="String">
						<description>A string naming the piece of data to set.</description>
					</parameter>
					<parameter name="value" usage="required" type="Object">
						<description>The new data value.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Store then retrieve a value from the div element.
	jQuery.data(div, "test", {first:16, last:"pizza!"});
	$("span:first").text(jQuery.data(div, "test").first);</example>
				</examples>
			</method>
			
			<method name="data" scope="instance">
				<description>Returns value at named data store for the element.</description>
				<return-types>
					<return-type type="Object" />
				</return-types>
				<parameters>
					<parameter name="element" usage="required" type="Element">
						<description>The DOM element to query for the data.</description>
					</parameter>
					<parameter name="key" usage="requierd" type="String">
						<description>Name of the data stored.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	alert(jQuery.data(document.body, 'foo'));</example>
				</examples>
			</method>
			
			<method name="data" scope="instance">
				<description>Returns value at named data store for the element.</description>
				<return-types>
					<return-type type="Object" />
				</return-types>
				<parameters>
					<parameter name="element" usage="required" type="Element">
						<description>The DOM element to query for the data.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	alert(jQuery.data(document.body));</example>
				</examples>
			</method>
			
			<method name="dblclick" scope="instance">
				<description>Bind an event handler to the "dblclick" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$("p").dblclick(function(){ alert("Hello World!");});</example>
				</examples>
			</method>
			
			<method name="dblclick" scope="instance">
				<description>Bind an event handler to the "dblclick" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventData" usage="optional" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="dblclick" scope="instance">
				<description>Trigger "dblclick" JavaScript event on an element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
			</method>
			
			<method name="Deferred" scope="instance">
				<description>Create Deferred object.</description>
				<return-types>
					<return-type type="Deferred" />
				</return-types>
			</method>
			
			<method name="delay" scope="instance">
				<description>Set a timer to delay execution of subsequent items in the queue.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="duration" usage="required" type="Number">
						<description>An integer indicating the number of milliseconds to delay execution of the next item in the queue.</description>
					</parameter>
					<parameter name="queueName" usage="optional" type="String">
						<description>A string containing the name of the queue.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Animate the hiding and showing of two divs, delaying the first before showing it.
	$("button").click(function() {
		$("div.first").slideUp(300).delay(800).fadeIn(400);
		$("div.second").slideUp(300).fadeIn(400);
	});</example>
				</examples>
			</method>
			
			<method name="delegate" scope="instance">
				<description>Attach a handler to one or more events for all elements that match the selector, now or in the future.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="required" type="String">
						<description>A selector to filter the elements that trigger the event.</description>
					</parameter>
					<parameter name="eventType" usage="required" type="String">
						<description>A string containing one or more space-separated JvaScript event types, such as "click" or "keydown".</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>hanlder(eventObject) is a function to execute at the time the event is triggered.</description>
					</parameter>
				</parameters>
				<examples>
					<example>.delegate(0 attaches a click event handler to all paragraphs - even new ones.
	$("body").delegate("p", "click", function() {
		$(this).after("&lt;p&gt;Another paragraph!&lt;/p&gt;");
	});</example>
				</examples>
			</method>
			
			<method name="delegate" scope="instance">
				<description>Attach a handler to one or more events for all elements that match the selector, now or in the future.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="required" type="String">
						<description>A selector to filter the elements that trigger the event.</description>
					</parameter>
					<parameter name="eventType" usage="required" type="String">
						<description>A string containing one or more space-separated JvaScript event types, such as "click" or "keydown".</description>
					</parameter>
					<parameter name="eventData" usage="required" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute at the time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="delegate" scope="instance">
				<description>Attach a handler to one or more events for all elements that match the selector, now or in the future.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="required" type="String">
						<description>A selector to filter the elements that trigger the event.</description>
					</parameter>
					<parameter name="events" usage="required" type="Map">
						<description>A map of one or more event types and functions to execute for them.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="dequeue" scope="instance">
				<description>Execute the next function on the queue for the matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="queueName" usage="optional" type="String">
						<description>A string containing the name of the queue.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Use dequeue to end a custome queue function.
	$("div").queue(function() {
		$(this).toggleClass("red");
		$(this).dequeue();
	});</example>
				</examples>
			</method>
			
			<method name="dequeue" scope="instance">
				<description>Execute the next function on the queue for the matched element.</description>
				<parameters>
					<parameter name="element" usage="required" type="Element">
						<description>A DOM element from which to remove and execute a queued function.</description>
					</parameter>
					<parameter name="queueName" usage="optional" type="String">
						<description>A string containing the name of the queue.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Use jQuery.dequeue() to end a custom queue function 
which allows the queue to keep going.
	$("div").queue(function() {
		$(this).toggleClass("red");
		$.dequeue(this);
	});</example>
				</examples>
			</method>

			<method name="detach" scope="instance">
				<description>Remove the set of matched elements from the DOM.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="optional" type="String">
						<description>A selector expression that filters matched elements to be removed.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Detach all paragraphs from the DOM.
	var p = $("p").detach();</example>
				</examples>
			</method>
			
			<method name="each" scope="instance">
				<description>A generic interator function, which can be used to seamlessly iterate over both objects and arrays.
Arrays and array-like objects with a length property (such as a function's arguments object) are iterated by numeric index,
from 0 to length-1.  Other object are iterated via their named properties.</description>
				<return-types>
					<return-type type="Object" />
				</return-types>
				<parameters>
					<parameter name="collection" usage="required" type="Object">
						<description>The object or array to iterate over.</description>
					</parameter>
					<parameter name="callback" usage="required" type="Function">
						<description>callback(indexInArray, valueOfElement) is the function that will be executed on every object.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Iterates through the array displaying each number as both a word and numeral.
	var arr = ["one", "two", "three", "four", "five" ];
	var obj = {one:1, two:2, three:3, four:4, five:5 };
	jQuery.each(arr, function() {
		$("#" + this).text("Mine is " + this + ".");
		return (this!="three"); //will stop running after "Three"
	});
	jQuery.each(obj, function(i, val) {
		$("#" + i).append(document.createTextNode(" - " + val));
	});</example>
				</examples>
			</method>
			
			<method name="each" scope="instance">
				<description>Iterate over a jQuery object, executing a function for each matched element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="function" usage="required" type="Function">
						<description>function(index, element) is a function to execute for each matched element.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Iterates over three divs and sets their color property.
	$("div").each(function(i) {
		if (this.style.color!="blue") {
			this.style.color="blue";
		} else {
			this.style.color="";
		}
	});</example>
				</examples>
			</method>
			
			<method name="empty" scope="instance">
				<description>Remove all the child nodes of the set of matched elements from the DOM.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<examples>
					<example>Remove all child nodes (including text nodes) from all paragraphs.
	$("p").empty();</example>
				</examples>
			</method>
			
			<method name="end" scope="instance">
				<description>End the most recent filtering operation in the current chain and return the set of matched elements to its previous state.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<examples>
					<example>Select all paragraphs, find span elements inside these, and reverts the selection back to the paragraph.
	$("p").showTags(0).find("span").showTags(1).css("background", "yellow")
	      .end().showTags(2).css("font-style", "italic");</example>
				</examples>
			</method>
			
			<method name="eq" scope="instance">
				<description>Reduce the set of matched elements to the one at the specified index.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="index" usage="required" type="Number">
						<description>An integer indicating 0-based position of the element.  If integer is minus, &lt;br&gt;
indicating the position of element, counting backwards from the last element in the set.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Turn the div with index 2 blue by adding an appropriate class.
	$("body").find("div").eq(2).addClass("blue");</example>
				</examples>
			</method>
			
			<method name="error" scope="instance">
				<description>Bind an event handler to the "error" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute when the event is triggered.</description>
					</parameter>
				</parameters>
				<examples>
					<example>To hide the "broken image" icons for IE users.
	$("img").error(function() {
		$(this).hide();
	}).attr("src", "missing.png");</example>
				</examples>
			</method>
			
			<method name="error" scope="instance">
				<description>Bind an event handler to the "error" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>				
				<parameters>
					<parameter name="eventData" usage="optional" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute when the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="error" scope="instance">
				<description>Takes a string and throws an exception containing it.</description>
				<parameters>
					<parameter name="message" usage="required" type="String">
						<description>The message to send out.</description>
					</parameter>					
				</parameters>
				<examples>
					<example>Override jQuery.error for display in Firebug.
	jQuery.error = console.error;</example>
				</examples>
			</method>
			
			<method name="Event" scope="instance">
				<description>Create a new jQuery.Event object.</description>
				<parameters>
					<parameter name="src" usage="required" type="String">
						<description>A string represents event name.</description>
					</parameter>
					<parameter name="props" usage="optional" type="Object">
						<description>Object that specifies event properties.</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="jQuery.Event" />
				</return-types>
				<examples>
					<example>Create a new jQuery.Event object with specified event properties.
	var e = jQuery.Event("keydown", {keyCode:64});</example>
				</examples>
			</method>
			
			<method name="extend" scope="instance">
				<description>Merge the contents of two or more objects together into the first object.</description>
				<return-types>
					<return-type type="Object" />
				</return-types>
				<parameters>
					<parameter name="target" usage="required" type="Object">
						<description>An object that will receive the new properties if additional objects are passed in &lt;br&gt;
or that will extends the jQuery namespace if it is the sole argument.</description>
					</parameter>
					<parameter name="object1" usage="optional" type="Object">
						<description>An object containing additional properties to merge in.</description>
					</parameter>
					<parameter name="objectN" usage="optional" type="Object">
						<description>Additional objects containing properties to merge in.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Merge two objects, modifying the first.
	var object1 = { apple: 0, banana: {weight: 52, price: 100}, cherry: 97 },
	var object2 = { banana: {price: 200}, durian: 100};
	$.extend(object1, object2);
	// result object1={"apple":0, "banana":{"price":200}, "cherry":97, "durian":100}</example>
				</examples>
			</method>

			<method name="extend" scope="instance">
				<description>Merge the contents of two or more objects together into the first object.</description>
				<return-types>
					<return-type type="Object" />
				</return-types>
				<parameters>
					<parameter name="deep" usage="optional" type="Boolean">
						<description>If true, the merge becomes recursive (aka. deep copy).</description>
					</parameter>
					<parameter name="target" usage="required" type="Object">
						<description>An object that will receive the new properties if additional objects are passed in &lt;br&gt;
or that will extends the jQuery namespace if it is the sole argument.</description>
					</parameter>
					<parameter name="object1" usage="optional" type="Object">
						<description>An object containing additional properties to merge in.</description>
					</parameter>
					<parameter name="objectN" usage="optional" type="Object">
						<description>Additional objects containing properties to merge in.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Merge two objects recursively, modifying the first.
	var object1 = { apple: 0, banana: {weight: 52, price: 100}, cherry: 97 },
	var object2 = { banana: {price: 200}, durian: 100};
	$.extend(true, object1, object2);
	// result object1={"apple":0, "banana":{"weight":52,"price":200},"cherry":97,"durian":100}</example>
				</examples>
			</method>
			
			<method name="fadeIn" scope="instance">
				<description>Display the matched elements by fading them to opaque.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="duration" usage="optional" type="Number">
						<description>A string or number determining how long the animation will run.&lt;br&gt;
The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 ms, respectively.</description>
					</parameter>
					<parameter name="callback" usage="optional" type="Function">
						<description>A function to call once the animation is complete.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Animates hidden divs to fade in one by one, completing each animation withing 600 ms.
	$(document.body).click(function() {
		$("div:hidden:first").fadeIn("slow");
	});</example>
				</examples>
			</method>
			
			<method name="fadeIn" scope="instance">
				<description>Display the matched elements by fading them to opaque.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="duration" usage="optional" type="Number">
						<description>A string or number determining how long the animation will run.&lt;br&gt;
The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 ms, respectively.</description>
					</parameter>
					<parameter name="easing" usage="optional" type="String">
						<description>A string indicating which easing function to use for the transition.&lt;br&gt;
The only easing implementations in the jQuery library are the default, calling 'swing', and one that &lt;br&gt;
progresses at a constant pace, called 'linear'.</description>
					</parameter>
					<parameter name="callback" usage="optional" type="Function">
						<description>A function to call once the animation is complete.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="fadeOut" scope="instance">
				<description>Hide the matched elements by fading them to transparent.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="duration" usage="optional" type="Number">
						<description>A string or number determining how long the animation will run.&lt;br&gt;
The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 ms, respectively.</description>
					</parameter>
					<parameter name="callback" usage="optional" type="Function">
						<description>A function to call once the animation is complete.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Animates all paragraphs by fade out, comleting the animation within 600 ms.
	$("p").fadeOut("slow");</example>
				</examples>
			</method>
			
			<method name="fadeOut" scope="instance">
				<description>Hide the matched elements by fading them to transparent.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="duration" usage="optional" type="Number">
						<description>A string or number determining how long the animation will run.&lt;br&gt;
The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 ms, respectively.</description>
					</parameter>
					<parameter name="easing" usage="optional" type="String">
						<description>A string indicating which easing function to use for the transition.&lt;br&gt;
The only easing implementations in the jQuery library are the default, calling 'swing', and one that &lt;br&gt;
progresses at a constant pace, called 'linear'.</description>
					</parameter>
					<parameter name="callback" usage="optional" type="Function">
						<description>A function to call once the animation is complete.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="fadeTo" scope="instance">
				<description>Adjust the opacity of the matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="duration" usage="required" type="Number">
						<description>A string or number determining how long the animation will run.&lt;br&gt;
The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 ms, respectively.</description>
					</parameter>
					<parameter name="opacity" usage="required" type="Number">
						<description>A number between 0 and 1 denoting the target opacity.</description>
					</parameter>
					<parameter name="callback" usage="optional" type="Function">
						<description>A function to call once the animation is complete.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Animates first paragraph to fade to an opacity 0.33 (33%, about
one third visible), completing the animation within 600 milliseconds.
	$("p:first").click(function() {
		$(this).fadeTo("slow", 0.33);
	});</example>
				</examples>
			</method>
			
			<method name="fadeTo" scope="instance">
				<description>Adjust the opacity of the matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="duration" usage="required" type="Number">
						<description>A string or number determining how long the animation will run.&lt;br&gt;
The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 ms, respectively.</description>
					</parameter>
					<parameter name="opacity" usage="required" type="Number">
						<description>A number between 0 and 1 denoting the target opacity.</description>
					</parameter>
					<parameter name="easing" usage="optional" type="String">
						<description>A string indicating which easing function to use for the transition.&lt;br&gt;
The only easing implementations in the jQuery library are the default, calling 'swing', and one that &lt;br&gt;
progresses at a constant pace, called 'linear'.</description>
					</parameter>
					<parameter name="callback" usage="optional" type="Function">
						<description>A function to call once the animation is complete.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Animates first paragraph to fade to an opacity 0.33 (33%, about
one third visible), completing the animation within 600 milliseconds.
	$("p:first").click(function() {
		$(this).fadeTo("slow", 0.33);
	});</example>
				</examples>
			</method>
			
			<method name="fadeToggle" scope="instance">
				<description>Display or hide the matched elements by animating their opacity.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="duration" usage="optional" type="Number">
						<description>A string or number determining how long the animation will run.&lt;br&gt;
The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 ms, respectively.</description>
					</parameter>
					<parameter name="easing" usage="optional" type="String">
						<description>A string indicating which easing function to use for the transition.&lt;br&gt;
The only easing implementations in the jQuery library are the default, calling 'swing', and one that &lt;br&gt;
progresses at a constant pace, called 'linear'.</description>
					</parameter>
					<parameter name="callback" usage="optional" type="Function">
						<description>A function to call once the animation is complete.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Fades first paragraph in or out, completing their animation within 600 ms and using
a linear easing.  Fades last paragraph in or out for 200 ms, inserting a "finished" message upon completion.
	$("p:first").fadeToggle("slow", "linear");
	$("p:last").fadeToggle("fast", function() {
		$("#log").append("&lt;div&gt;finished&lt;/div&gt;");
	});</example>
				</examples>
			</method>
			
			<method name="filter" scope="instance">
				<description>Reduce the set of matched elements to those that match the selector or pass the function's test.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="required" type="String">
						<description>A string containing a selector expression to match the current set of elements against.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$('li').filter(':even').css('background-color', 'red');</example>
				</examples>
			</method>
			
			<method name="filter" scope="instance">
				<description>Reduce the set of matched elements to those that match the selector or pass the function's test.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="function" usage="required" type="Function">
						<description>function(index) is a function used as a test for each element in the set. &lt;br&gt;
this is the current DOM element.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$('li').filter(function(index) {
		return $('strong', this).length==1;
	}).css('background-color', 'red');</example>
				</examples>
			</method>
			
			<method name="filter" scope="instance">
				<description>Reduce the set of matched elements to those that match the selector or pass the function's test.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="element" usage="required" type="Element">
						<description>An element to match the current set of elements against.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Select all divs and filter the selection with a DOM element, keeping only
the one with an id of "unique".
	$("div").filter(document.getElementById("unique"));</example>
				</examples>
			</method>
			
			<method name="filter" scope="instance">
				<description>Reduce the set of matched elements to those that match the selector or pass the function's test.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="jQuery" usage="required" type="jQuery">
						<description>An existing jQuery object to match the current set of elements against.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="find" scope="instance">
				<description>Get the descendants of each element in the curernt set of matched elements, filtered by a selector, jQuery object, or element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="required" type="String">
						<description>A string containing a selector expression to match elements against.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Start with all paragraphs and searches for descendant span elements, 
same as $("p span").
	$("p").find("span").css("color", "red");</example>
				</examples>
			</method>
			
			<method name="find" scope="instance">
				<description>Get the descendants of each element in the curernt set of matched elements, filtered by a selector, jQuery object, or element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="jQuery" usage="required" type="jQuery">
						<description>A jQuery object to match elements against.</description>
					</parameter>
				</parameters>
				<examples>
					<example>A selection using a jQuery collection of all span tags.  Only span within p tags
are changed to red while others are left blue.
	var $spans = $('span');
	$("p").find($spans).css('color', 'red');</example>
				</examples>
			</method>
			
			<method name="find" scope="instance">
				<description>Get the descendants of each element in the curernt set of matched elements, filtered by a selector, jQuery object, or element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="element" usage="required" type="Element">
						<description>An element to match elements against.</description>
					</parameter>
				</parameters>
			</method>

			<method name="first" scope="instance">
				<description>Reduce the set of matched elements to the first in the set.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<examples>
					<example>Highlight the first span in the paragraph.
	$("p span").first().addClass('highlight');</example>
				</examples>				
			</method>
			
			<method name="focus" scope="instance">
				<description>Bind an event handler to the "focus" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$("input").focus(function() {
		$(this).next("span").css('display', 'inline').fadeOut(1000);
	});</example>
				</examples>
			</method>
			
			<method name="focus" scope="instance">
				<description>Bind an event handler to the "focus" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventData" usage="optional" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="focus" scope="instance">
				<description>Trigger "focus" JavaScript event on an element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>				
			</method>
			
			<method name="focusin" scope="instance">
				<description>Bind an event handler to the "focusin" event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$("p").focusin(function() {
		$(this).find("span").css('display', 'inline').fadeOut(1000);
	});</example>
				</examples>
			</method>
			
			<method name="focusin" scope="instance">
				<description>Bind an event handler to the "focusin" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventData" usage="optional" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="focusout" scope="instance">
				<description>Bind an event handler to the "focusout" event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Watch for a loss of focus to occur inside paragraphs and note the difference 
between the focusout count and the blur count.
	$("p").focusout(function() {
		foo++; $("#fo").text("focusout fired: " + fo + "x");
	}).blur(function() {
		b++; $("#b").text("blur fired: " + b + "x");
	});</example>
				</examples>
			</method>
			
			<method name="focusout" scope="instance">
				<description>Bind an event handler to the "focusout" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventData" usage="optional" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>	
			
			<method name="get" scope="instance">
				<description>Load data from the server using a HTTP GET request.</description>
				<return-types>
					<return-type type="jqXHR" />
				</return-types>
				<parameters>
					<parameter name="url" usage="required" type="String">
						<description>A string containing the URL to which the request is sent.</description>						
					</parameter>
					<parameter name="data" usage="optional" type="Map">
						<description>A map or string that is sent to the server with the request.</description>
					</parameter>
					<parameter name="success" usage="optional" type="Function">
						<description>success(data, textStatus, jqXHR) is a callback function that is executed if the request succeeds.</description>
					</parameter>
					<parameter name="dataType" usage="optional" type="String">
						<description>The type of data expected from the server. Default: Intelligent Guess (xml, json, script, or html).</description>
					</parameter>
				</parameters>
				<examples>
					<example>Alert out the result from requesting test.cgi with an additional payload of data
(HTML or XML, depending on what was returned).
	$.get("test.cgi", {name: "John", time: "2pm"},
		function(data) {
			alert("Data Loaded: " + data);
		});</example>
				</examples>
			</method>
			
			<method name="get" scope="instance">
				<description>Retrieve the DOM elements matched by the jQuery object.</description>
				<return-types>
					<return-type type="Array" />
				</return-types>
				<parameters>
					<parameter name="index" usage="optional" type="Number">
						<description>A zero-based integer indicating which element to retrieve.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Select all divs in the document and returns the DOM Elements as an Array, then
uses the build-in reverse-method to reverse that array.
	display($("div").get().reverse());</example>
				</examples>
			</method>	
			
			<method name="getJSON" scope="instance">
				<description>Load JSON-encoded data from the server using a GET HTTP request.</description>
				<return-types>
					<return-type type="jqXHR" />
				</return-types>
				<parameters>
					<parameter name="url" usage="required" type="String">
						<description>A string containing the URL to which the request is sent.</description>
					</parameter>
					<parameter name="data" usage="optional" type="Map">
						<description>A map or string that is sent to the server with the request.</description>
					</parameter>
					<parameter name="success" usage="optional" type="Function">
						<description>success(data, textStatus, jqXHR) is a callback function that is executed if the request succeeds.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Loads the four most recent cat picture from the Flickr JSON API.
	$.getJSON("http://api.flickr.com/services/feeds/photos_public.gne?jsoncallback=?",
		{ tags: "mount rainier", tagmode: "any", format: "json"}, 
		function(data) {
			... // called if succeed
		}
	});</example>
				</examples>
			</method>
			
			<method name="getScript" scope="instance">
				<description>Load a JavaScript file from the server using a GET HTTP request, then execute it.</description>
				<return-types>
					<return-type type="jqXHR" />
				</return-types>
				<parameters>
					<parameter name="url" usage="required" type="String">
						<description>A string containing the URL to which the request is sent.</description>
					</parameter>
					<parameter name="success" usage="optional" type="Function">
						<description>success(script, textstatus, jqXHR) is a callback function that is executed if the request succeeds.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$.getScript("/scripts/jquery.color.js", function() {
		$("#go").click(function() {
			...
		}
	});</example>
				</examples>
			</method>
			
			<method name="globalEval" scope="instance">
				<description>Execute some JavaScript code globally.</description>
				<parameters>
					<parameter name="code" usage="required" type="String">
						<description>The JavaScript code to execute.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Execute a script in the global context.
	function test() {
		jQuery.globalEval("var newVar = true;");
	}
	test();  // newVar === true</example>
	
				</examples>
			</method>
			
			<method name="grep" scope="instance">
				<description>Finds the elements of an array which satisfy a filter function.  The original array is not affected.</description>
				<return-types>
					<return-type type="Array" />
				</return-types>
				<parameters>
					<parameter name="array" usage="required" type="Array">
						<description>The array to search through.</description>
					</parameter>
					<parameter name="function" usage="required" type="Function">
						<description>function(elementOfArray, indexInArray) is a function to process each item against.&lt;br&gt;
The first argument to the function is the item, and the second argument is the index.&lt;br&gt;
The function should return a Boolean value.  this will be the global window object.</description>
					</parameter>
					<parameter name="invert" usage="optional" type="Boolean">
						<description>If "invert" is false, or not provided, then the function returns an array consisting &lt;br&gt;
of all elements for which "callback" returns true.  If "invert" is true, then the function &lt;br&gt;
returns an array consisting of all elements for which "callback" return false.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Filters the original array of numbers leaving that are not 5 and having an index greater than 4.
	var arr = [1,9,3,8,6,1,5,9,4,7,3,8,6,9,1];
	$("div").text(arr.join(", "));
	arr = jQuery.grep(arr, function(n, i) {
		return (n!=5 &amp;&amp; i>4);
	});</example>
				</examples>
			</method>
			
			<method name="has" scope="instance">
				<description>Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="required" type="String">
						<description>A string containing a selector expression to match elements against.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$("ul").has("li").addClass("full");</example>
				</examples>
			</method>
			
			<method name="has" scope="instance">
				<description>Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="contained" usage="required" type="String">
						<description>A DOM element to match elements against.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="hasClass" scope="instance">
				<description>Determine whether any of the matched elements are assigned the given class.</description>
				<return-types>
					<return-type type="Boolean" />
				</return-types>
				<parameters>
					<parameter name="className" usage="required" type="String">
						<description>The class name to search for.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Looks for the paragraph that contains 'selected' as a class.
	$("div#result1").append($("p:first").hasClass("selected").toString());</example>
				</examples>				
			</method>
			
			<method name="hasData" scope="instance">
				<description>Determine whether an element has any jQuery data associated with it.</description>
				<return-types>
					<return-type type="Boolean" />
				</return-types>
				<parameters>
					<parameter name="element" usage="required" type="Element">
						<description>A DOM element to be checked for data.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Set data on an element and see the results of hasData.
	$.data(p, "testing", 123);
	$p.append(jQuery.hasData(p)+" "); /* true */</example>
				</examples>
			</method>
			
			<method name="height" scope="instance">
				<description>Get the current computed height for the first element in the set of matched elements.</description>
				<return-types>
					<return-type type="Number" />
				</return-types>
				<examples>
					<example>
	$("p").height();</example>
				</examples>
			</method>
			
			<method name="height" scope="instance">
				<description>Set the CSS height of every matched element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="value" usage="required" type="Number">
						<description>An integer representing the number of pixels, or an integer with an optional unit of measure appended (as a String).</description>
					</parameter>
				</parameters>
				<examples>
					<example>To set the height of each div to 30px plus a color change.
	$("div").height(30).css({cursor:"auto", backgroundColor:"green"});</example>
				</examples>
			</method>
			
			<method name="height" scope="instance">
				<description>Set the CSS height of every matched element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="function" usage="required" type="Function">
						<description>function(index, height) is a function returning the height to set.  Receives the index &lt;br&gt;
position of the element in the set and the old height as arguments.  Within the function, &lt;br&gt;
this refers to the current element in the set.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="hide" scope="instance">
				<description>Hide the matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
			</method>
			
			<method name="hide" scope="instance">
				<description>Hide the matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="duration" usage="required" type="Number">
						<description>A string or number determining how long the animation will run.&lt;br&gt;
The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 ms, respectively.</description>
					</parameter>
					<parameter name="callback" usage="optional" type="Function">
						<description>A function to call once the animation is complete.</description>
					</parameter>					
				</parameters>
			</method>
			
			<method name="hide" scope="instance">
				<description>Hide the matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="duration" usage="optional" type="Number">
						<description>A string or number determining how long the animation will run.&lt;br&gt;
The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 ms, respectively.</description>
					</parameter>
					<parameter name="easing" usage="optional" type="String">
						<description>A string indicating which easing function to use for the transition.&lt;br&gt;
The only easing implementations in the jQuery library are the default, calling 'swing', and one that &lt;br&gt;
progresses at a constant pace, called 'linear'.</description>
					</parameter>
					<parameter name="callback" usage="optional" type="Function">
						<description>A function to call once the animation is complete.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="holdReady" scope="instance">
				<description>Holds or release the execution of jQuery's ready event.</description>
				<parameters>
					<parameter name="hold" usage="required" type="Boolean">
						<description>Indicates whether the ready hold is being requested or released.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Delay the ready event until a custom plugin has loaded.
	$.holdReady(true);
	$.getScript("myplugin.js", function() {
		$.holdReady(false);
	});</example>
				</examples>
			</method>
			
			<method name="hover" scope="instance">
				<description>Bind two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="handlerIn" usage="required" type="Function">
						<description>handlerIn(eventObject) is a function to execute when the mouse pointer enters the element.</description>
					</parameter>
					<parameter name="handlerOut" usage="required" type="Function">
						<description>handlerOut(eventObject) is a function to execute when the mouse pointer leaves the element.</description>
					</parameter>
				</parameters>
				<examples>
					<example>To add a special style to list items that are being hovered over.
	$("li.fade").hover(function() {
		$(this).fadeOut(100); $(this).fadeIn(500);
	});</example>
				</examples>
			</method>
			
			<method name="hover" scope="instance">
				<description>Bind a single handler to the matched elements, to be executed when the mouse pointer enters or leaves the elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="handlerInOut" usage="required" type="Function">
						<description>handlerInOut(eventObject) is a function to execute when the mouse pointer enters or leaves the element.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Slide the next sibling LI up or down on hover, and toggle a class.
	$("li").filter(":odd").hide().end()
		.filter(":even").hover(function() {
			$(this).toggleClass("active").next().stop(true,true).slideToggle();
		});</example>
				</examples>
			</method>
			
			<method name="html" scope="instance">
				<description>Get the HTML contents of the first element in the set of matched elements.</description>
				<return-types>
					<return-type type="String" />
				</return-types>
				<examples>
					<example>
	var htmlStr = $(this).html();</example>
				</examples>
			</method>
			
			<method name="html" scope="instance">
				<description>Set the HTML contents of each element in the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="htmlString" usage="required" type="String">
						<description>A string of HTML to set as the content of each matched element.</description>
					</parameter> 
				</parameters>
				<examples>
					<example>Add some html to each div.
	$("div").html("&lt;span class='red'&gt;Hello &lt;b&gt;Again&lt;/b&gt;&lt;/span&gt;");</example>
				</examples>
			</method>
			
			<method name="html" scope="instance">
				<description>Set the HTML contents of each element in the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="function" usage="required" type="Function">
						<description>function(index,oldhtml) is a function returning the HTML content to set.  Receives the index position &lt;br&gt;
of the element in the set nad the old HTML value as arguments.  jQuery empties the element before calling &lt;br&gt;
the function; use the oldhtml argument to reference the previous content.  Within the function, this refers to the &lt;br&gt;
current element in the set.</description>
					</parameter> 
				</parameters>
				<examples>
					<example>Add some html to each div.
	$("div").html("&lt;span class='red'&gt;Hello &lt;b&gt;Again&lt;/b&gt;&lt;/span&gt;");</example>
				</examples>
			</method>
			
			<method name="inArray" scope="instance">
				<description>Seach for a specified value within an array and return its index (or -1 if not found).</description>
				<return-types>
					<return-type type="Number" />
				</return-types>
				<parameters>
					<parameter name="value" usage="required" type="Object">
						<description>The value to search for.</description>
					</parameter>
					<parameter name="array" usage="required" type="Array">
						<description>An array through which to search.</description>
					</parameter>
					<parameter name="fromIndex" usage="optional" type="Number">
						<description>The index of the array at which to begin the search.  Default is 0.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Report the index of some elements in the array.
	$spans.eq(0).text(jQuery.inArray("John", arr));</example>
				</examples>
			</method>
			
			<method name="index" scope="instance">
				<description>Search for a given element from among the matched elements.  The return value is an integer indication
the position of the first element within the jQuery object relative to its sibling elements.</description>
				<return-types>
					<return-type type="Number" />
				</return-types>
				<examples>
					<example>
	var index = $("div").index(this);</example>
				</examples>
			</method>

			<method name="index" scope="instance">
				<description>Search for a given element from among the matched elements.</description>
				<return-types>
					<return-type type="Number" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="required" type="String">
						<description>A selector representing a jQuery collection in which to look for an element.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="index" scope="instance">
				<description>Search for a given element from among the matched elements.</description>
				<return-types>
					<return-type type="Number" />
				</return-types>
				<parameters>
					<parameter name="element" usage="required" type="Element">
						<description>The DOM element or first element within the jQuery object to look for.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="innerHeight" scope="instance">
				<description>Get the current computed height for the first element in the set of matched elements, including padding but not border.</description>
				<return-types>
					<return-type type="Number" />
				</return-types>
				<examples>
					<example>
	$("p:last").text("innerHeight:" + p.innerHeight());</example>
				</examples>
			</method>
			
			<method name="innerWidth" scope="instance">
				<description>Get the current computed width for the first element in the set of matched elements, including padding but not border.</description>
				<return-types>
					<return-type type="Number" />
				</return-types>
				<examples>
					<example>
	$("p:last").text("innerWidth:" + p.innerWidth());</example>
				</examples>
			</method>
			
			<method name="insertAfter" scope="instance">
				<description>Insert every element in the set of matched elements after the target.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="target" usage="required" type="String">
						<description>A selector, element, HTML string, or jQuery object; the matched set of elements&lt;br&gt;
will be inserted after the element(s) specified by this parameter.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Inserts all paragraphs after an element with id of "foo".
	$("p").insertAfter("#foo");
					</example>
				</examples>
			</method>
			
			<method name="insertBefore" scope="instance">
				<description>Insert every element in the set of matched elements before the target.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="target" usage="required" type="String">
						<description>A selector, element, HTML string, or jQuery object; the matched set of elements&lt;br&gt;
will be inserted after the element(s) specified by this parameter.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Inserts all paragraphs before an element with id of "foo".
	$("p").insertBefore("#foo");</example>
				</examples>
			</method>
			
			<method name="is" scope="instance">
				<description>Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.</description>
				<return-types>
					<return-type type="Boolean" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="required" type="String">
						<description>A string containing a selector expression to match elements against.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="is" scope="instance">
				<description>Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.</description>
				<return-types>
					<return-type type="Boolean" />
				</return-types>
				<parameters>
					<parameter name="function" usage="required" type="Function">
						<description>function(index) is a function used as a test for the set of elements.  It accepts one argument, &lt;br&gt;
index, which is the element's index in the jQuery collection.  Within the function, this refers to the current DOM element.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="is" scope="instance">
				<description>Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.</description>
				<return-types>
					<return-type type="Boolean" />
				</return-types>
				<parameters>
					<parameter name="jQuery" usage="required" type="jQuery">
						<description>An existing jQuery object to match the current set of elements against.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="is" scope="instance">
				<description>Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.</description>
				<return-types>
					<return-type type="Boolean" />
				</return-types>
				<parameters>
					<parameter name="element" usage="required" type="Element">
						<description>An element to match the current set of elements against.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="isArray" scope="instance">
				<description>Determine whether the argument is an array.</description>
				<return-types>
					<return-type type="Boolean" />
				</return-types>
				<parameters>
					<parameter name="obj" usage="required" type="Object">
						<description>Object to test whether or not it is an array.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="isEmptyObject" scope="instance">
				<description>Check to see if an object is empty (contains no properties).</description>
				<return-types>
					<return-type type="Boolean" />
				</return-types>
				<parameters>
					<parameter name="obj" usage="required" type="Object">
						<description>Object that will be checked to see if it's empty.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="isFunction" scope="instance">
				<description>Determine if the argument passed is a Javascript function object.</description>
				<return-types>
					<return-type type="Boolean" />
				</return-types>
				<parameters>
					<parameter name="obj" usage="required" type="Object">
						<description>Object to test whether or not it is a function.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="isNumeric" scope="instance">
				<description>Determine whether its argument is a number.</description>
				<return-types>
					<return-type type="Boolean" />
				</return-types>
				<parameters>
					<parameter name="value" usage="required" type="Object">
						<description>The value to be tested.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="isPlainObject" scope="instance">
				<description>Check to see if an object is a plain object (created using "{}" or "new Object").</description>
				<return-types>
					<return-type type="Boolean" />
				</return-types>
				<parameters>
					<parameter name="obj" usage="required" type="Object">
						<description>Object that will be checked to see if it's a plain object.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="isWindow" scope="instance">
				<description>Determine whether the argument is a window.</description>
				<return-types>
					<return-type type="Boolean" />
				</return-types>
				<parameters>
					<parameter name="obj" usage="required" type="Object">
						<description>Object to test whether or not it is a window.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="isXMLDoc" scope="instance">
				<description>Check to see if a DOM node is within an XML document (or is an XML document).</description>
				<return-types>
					<return-type type="Boolean" />
				</return-types>
				<parameters>
					<parameter name="node" usage="required" type="Element">
						<description>The DOM node that will be checked to see if it's in an XML document.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="keydown" scope="instance">
				<description>Bind an event handler to the "keydown" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="keydown" scope="instance">
				<description>Bind an event handler to the "keydown" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventData" usage="optional" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="keydown" scope="instance">
				<description>Trigger "keydown" Javascript event on an element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
			</method>
			
			<method name="keypress" scope="instance">
				<description>Bind an event handler to the "keypress" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="keypress" scope="instance">
				<description>Bind an event handler to the "keypress" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventData" usage="optional" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="keypress" scope="instance">
				<description>Trigger "keypress" Javascript event on an element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
			</method>
			
			<method name="keyup" scope="instance">
				<description>Bind an event handler to the "keyup" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="keyup" scope="instance">
				<description>Bind an event handler to the "keyup" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventData" usage="optional" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="keyup" scope="instance">
				<description>Trigger "keyup" Javascript event on an element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
			</method>
			
			<method name="last" scope="instance">
				<description>Reduce the set of matched elements to the final one in the set.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<examples>
					<example>Highlight the last span in a paragraph.
	$("p span").last().addClass('highlight');</example>
				</examples>
			</method>

			<method name="load" scope="instance">
				<description>Load data from the server and place the returned HTML into matched element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="url" usage="required" type="String">
						<description>A string containing the URL to which the request is sent.</description>
					</parameter>
					<parameter name="data" usage="optional" type="Map">
						<description>A map or string that is sent to the server with the request.</description>
					</parameter>
					<parameter name="complete" usage="optional" type="Function">
						<description>complete(responseText, textStatus, XMLHttpRequest) is a callback function that is &lt;br&gt;
executed when the request completes.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Load the main page's footer navigation into an orderer list.
	$("#new-nav").load("/ #jq-footerNavigation li");</example>
				</examples>
			</method>	
			
			<method name="makeArray" scope="instance">
				<description>Convert an array-like object into a true JavaScript array.</description>
				<return-types>
					<return-type type="Array" />
				</return-types>
				<parameters>
					<parameter name="obj" usage="required" type="Object">
						<description>Any object to turn into a native Array.</description>
					</parameter>
				</parameters>
			</method>		
			
			<method name="map" scope="instance">
				<description>Pass each element in the current matched set through a function, producing a new jQuery object containing the return values.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="callback" usage="required" type="Function">
						<description>callback(index, domElement) is a function object that will be invoked for each element in the current set.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Build a list of all the values within a form.
	$("p").append($("input").map(function() {
		return $(this).val();
	}).get().join(", "));</example>
				</examples>
			</method>
			
			<method name="map" scope="instance">
				<description>Translate all items in an array or objct to new array or items.</description>
				<return-types>
					<return-type type="Array" />
				</return-types>
				<parameters>
					<parameter name="array" usage="required" type="Array">
						<description>The array to translate.</description>
					</parameter>
					<parameter name="callback" usage="required" type="Function">
						<description>callback(elementOfArray, indexInArray) is the function to process each item against.&lt;br&gt;
The first argument is the array item, the second argument is the index in array.&lt;br&gt;
The function can return any value.  Within the function, this refers to global (window) object.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	arr = jQuery.map(arr, function(n,i) {
		return (n.toUpperCase()+i);
	});</example>
				</examples>
			</method>
			
			<method name="map" scope="instance">
				<description>Translate all items in an array or objct to new array or items.</description>
				<return-types>
					<return-type type="Array" />
				</return-types>
				<parameters>
					<parameter name="arrayOrObject" usage="required" type="Object">
						<description>The array or object to translate.</description>
					</parameter>
					<parameter name="callback" usage="required" type="Function">
						<description>callback(value, indexOrKey) is the function to process each item against.&lt;br&gt;
The first argument is the value; the second argument is the index or key of the array or object property.&lt;br&gt;
The function can return any value.  A returned array will be flattened into the resulting array.&lt;br&gt;
Within the function, this refers to global (window) object.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Map the original object to a new array and double each value.
	var dimensions = { width: 10, height: 15, length: 20};
	dimensions = $.map(dimensions, function(value,index) {
		return value*2;
	});</example>
				</examples>
			</method>
			
			<method name="merge" scope="instance">
				<description>Merge the contents of two arrays together into the first array.</description>
				<return-types>
					<return-type type="Array" />
				</return-types>
				<parameters>
					<parameter name="first" usage="required" type="Array">
						<description>The first array to merge, the elements of second added.</description>
					</parameter>
					<parameter name="second" usage="required" type="Array">
						<description>The second array to merge into the first, unaltered.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Merge two arrays, altering the first argument.
	$.merge( [0,1,2], [2,3,4] ); // result: [0,1,2,3,4]</example>
				</examples>
			</method>
			
			<method name="mousedown" scope="instance">
				<description>Bind an event handler to the "mousedown" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="mousedown" scope="instance">
				<description>Bind an event handler to the "mousedown" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventData" usage="required" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="mousedown" scope="instance">
				<description>Trigger "mousedown" JavaScript event on an element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
			</method>
			
			<method name="mouseenter" scope="instance">
				<description>Bind an event handler to the "mouseenter" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="mouseenter" scope="instance">
				<description>Bind an event handler to the "mouseenter" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventData" usage="required" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="mouseenter" scope="instance">
				<description>Trigger "mouseenter" JavaScript event on an element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
			</method>
			
			<method name="mouseleave" scope="instance">
				<description>Bind an event handler to the "mouseleave" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="mouseleave" scope="instance">
				<description>Bind an event handler to the "mouseleave" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventData" usage="required" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="mouseleave" scope="instance">
				<description>Trigger "mouseleave" JavaScript event on an element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
			</method>
			
			<method name="mousemove" scope="instance">
				<description>Bind an event handler to the "mousemove" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="mousemove" scope="instance">
				<description>Bind an event handler to the "mousemove" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventData" usage="required" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="mousemove" scope="instance">
				<description>Trigger "mousemove" JavaScript event on an element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
			</method>
			
			<method name="mouseout" scope="instance">
				<description>Bind an event handler to the "mouseout" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="mouseout" scope="instance">
				<description>Bind an event handler to the "mouseout" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventData" usage="required" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="mouseout" scope="instance">
				<description>Trigger "mouseout" JavaScript event on an element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
			</method>
			
			<method name="mouseover" scope="instance">
				<description>Bind an event handler to the "mouseover" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="mouseover" scope="instance">
				<description>Bind an event handler to the "mouseover" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventData" usage="required" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="mouseover" scope="instance">
				<description>Trigger "mouseover" JavaScript event on an element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
			</method>
			
			<method name="mouseup" scope="instance">
				<description>Bind an event handler to the "mouseup" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="mouseup" scope="instance">
				<description>Bind an event handler to the "mouseup" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventData" usage="required" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="mouseup" scope="instance">
				<description>Trigger "mouseup" JavaScript event on an element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
			</method>

			<method name="next" scope="instance">
				<description>Get the immediately following sibling of each element in thext set of matched elements.
If a selector is provided, it retrieves the next sibling only if it matches that selector.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="optional" type="String">
						<description>A string containing a selector expression to match elements against.</description>
					</parameter>					
				</parameters>
				<examples>
					<example>Find the very next sibling of each paragraph.  Keep only the ones with a class "selected".
	$("p").next(".selected").css("background", "yellow");</example>
				</examples>
			</method>

			<method name="nextAll" scope="instance">
				<description>Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="optional" type="String">
						<description>A string containing a selector expression to match elements against.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Locate all the divs after the first and give them a class.
	$("div:first").nextAll().addClass("after");</example>
				</examples>
			</method>
			
			<method name="nextUntil" scope="instance">
				<description>Get all following siblings of each element up to but not including the element matched by 
the selector, DOM node, or jQuery object passed.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="optional" type="String">
						<description>A string containing a selector expression to indicate where to stop matching following sibling elements.</description>
					</parameter>
					<parameter name="filter" usage="optional" type="String">
						<description>A string containing a selector expression to match elements against.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Find the siblings that folow &lt;dt id="term-2"&gt; up to the next &lt;dt&gt; and give them a red backgroud color.
	$("#term-2").nextUntil("dt").css("background-color", "red");</example>
				</examples>
			</method>
			
			<method name="noConflict" scope="instance">
				<description>Relinquish jQuery's control of $ variable.</description>
				<return-types>
					<return-type type="Object" />
				</return-types>
				<parameters>
					<parameter name="removeAll" usage="optional" type="Boolean">
						<description>A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself).</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	jQuery.noConflict() {function() {
		// code using jQuery
	});
	// other code using $ as an alias to the other library
					</example>
				</examples>
			</method>

			<method name="noop" scope="instance">
				<description>An empty function</description>
			</method>
			
			<method name="not" scope="instance">
				<description>Remove elements from the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="required" type="String">
						<description>A string containing a selector expresion to match elements against.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Adds a border to divs that are not green or blue.
	$("div").not(".green, #blueone").css("border-color", "red");</example>
				</examples>
			</method>
			
			<method name="not" scope="instance">
				<description>Remove elements from the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="elements" usage="required" type="Element">
						<description>One or more DOM elements to remove from the matched set.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="not" scope="instance">
				<description>Remove elements from the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="function" usage="required" type="Element">
						<description>function(index) is a function used as a test for each element in the set.&lt;br&gt;
this is the current DOM element.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="not" scope="instance">
				<description>Remove elements from the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="jQuery" usage="required" type="jQuery">
						<description>An existing jQuery object to match the current set of elements against.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="now" scope="instance">
				<description>Return a number representing the current time.  This is a shorthand for (new Date()).getTime().</description>
				<return-types>
					<return-type type="Number" />
				</return-types>				
			</method>

			<method name="off" scope="instance">
				<description>Remove an event handler.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="events" usage="required" type="String">
						<description>One or more space-separated event types and optional namespaces, or just namespaces, &lt;br&gt;
such as "click", "keydown.myPlugin", or ".myPlugin".</description>
					</parameter>
					<parameter name="selector" usage="optional" type="String">
						<description>A selector which should match the one originally passed to .on() when attaching event handlers.</description>
					</parameter>
					<parameter name="handler" usage="optional" type="Function">
						<description>A handler function previously attached for the event(s), or false.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Add and remove event handlers on the colored button.
	function aClick() { $("div").show().fadeOut("slow"); }
	$("body").on("click", "#theone", aClick);
	$("body").off("click", "#theone", aClick);</example>
				</examples>							
			</method>
			
			<method name="off" scope="instance">
				<description>Remove an event handler.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventsMap" usage="required" type="Map">
						<description>A map where the string keys represent one or more space-separated event types and optional namespace, &lt;br&gt;
and the values represent handler functions previously attached for the event(s).</description>
					</parameter>
					<parameter name="selector" usage="optional" type="String">
						<description>A selector which should match the one originally passed to .on() when attaching event handlers.</description>
					</parameter>
				</parameters>										
			</method>
			
			<method name="offset" scope="instance">
				<description>Get the current coordinates of the first element in the set of matched elements, relative to the document.</description>
				<return-types>
					<return-type type="Object" />
				</return-types>
				<examples>
					<example>Access the offset of the second paragraph.
	var p = $("p:last");
	var offset = p.offset();</example>
				</examples>				
			</method>
			
			<method name="offset" scope="instance">
				<description>Set the current coordinates of every element in the set of matched elements, relative to the document.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="coordinates" usage="required" type="Object">
						<description>An object containing the properties top and left, which are integers indicating &lt;br&gt;
the new top and left coordinates for the elements.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Set the offset of the second paragraph.
	$("p:last").offset({top:10, left:30});</example>
				</examples>
			</method>
			
			<method name="offset" scope="instance">
				<description>Set the current coordinates of every element in the set of matched elements, relative to the document.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="function" usage="required" type="Function">
						<description>function(index, coords) is a function to return the coordinates to set.  Receives the index &lt;br&gt;
of the element in the collection as the first argument and the current coordinates as the &lt;br&gt;
second argument.  The function should return an object with the new top and left properties.</description>
					</parameter>
				</parameters>
			</method>

			<method name="offsetParent" scope="instance">
				<description>Get the closest ancestor element that is positioned.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<examples>
					<example>Find the offsetParent of item "A".
	$('li.item-a').offsetParent().css('background-color', 'red');</example>
				</examples>
			</method>
			
			<method name="on" scope="instance">
				<description>Attach an event handler function for one or more events to the selected elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="events" usage="required" type="String">
						<description>One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".</description>
					</parameter>
					<parameter name="selector" usage="optional" type="String">
						<description>A selector string to filter the descendants of the selected elements that trigger the event. &lt;br&gt;
If the selector is null or omitted, the event is always triggered when it reaches the selected element.</description>
					</parameter>
					<parameter name="data" usage="optional" type="Object">
						<description>Data to be passed to the handler in event.data when an event is triggered.</description>					
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute when event is triggered.  &lt;br&gt;
The value false is also allowed as a shorthand for a function that simpy does return false.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Cancel a form submit action and prevent the event from bubbling up.
	$("form").on("submit", false);</example>
				</examples>				
			</method>
			
			<method name="on" scope="instance">
				<description>Attach an event handler function for one or more events to the selected elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventsMap" usage="required" type="Map">
						<description>A map in which the string keys represent one or more space-separated event types and &lt;br&gt;
optional namespaces, and the values represent a handler function to be called for the event(s).</description>
					</parameter>
					<parameter name="selector" usage="optional" type="String">
						<description>A selector string to filter the descendants of the selected elements that trigger the event. &lt;br&gt;
If the selector is null or omitted, the event is always triggered when it reaches the selected element.</description>
					</parameter>
					<parameter name="data" usage="optional" type="Object">
						<description>Data to be passed to the handler in event.data when an event is triggered.</description>					
					</parameter>
				</parameters>
				<examples>
					<example>
	$("div.test").on({
		click: function() { $(this).toggleClass("active"); },
		mouseenter: function() { $(this).toggleClass("inside"); },
		mouseleave: function() { $(this).toggleClass("inside"); }
	});</example>
				</examples>							
			</method>
			
			<method name="one" scope="instance">
				<description>Attach a handler to an event for the elements.  The handler is executed at most once per element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="events" usage="required" type="String">
						<description>A string containing one or more JavaScript event types, such as "click" or "submit", or custom event names.</description>
					</parameter>
					<parameter name="data" usage="optional" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute at the time the event is triggered.</description>
					</parameter>
				</parameters>				
			</method>
			
			<method name="one" scope="instance">
				<description>Attach a handler to an event for the elements.  The handler is executed at most once per element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="events" usage="required" type="String">
						<description>A string containing one or more JavaScript event types, such as "click" or "submit", or custom event names.</description>
					</parameter>
					<parameter name="selector" usage="optional" type="String">
						<description>A selector string to filter the descendants of the selected elements that trigger the event. &lt;br&gt;
If the selector is null or omitted, the event is always triggered when it reaches the selected element.</description>
					</parameter>
					<parameter name="data" usage="optional" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute at the time the event is triggered.</description>
					</parameter>
				</parameters>		
				<examples>
					<example>Tie a one-time click to each div.
	$("div").one("click", function() {
		...
	});</example>
				</examples>		
			</method>
				
			<method name="one" scope="instance">
				<description>Attach a handler to an event for the elements.  The handler is executed at most once per element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventsMap" usage="required" type="Map">
						<description>A map in which the string keys represent one or more space-separated event types and optional namespaces,&lt;br&gt;
and the values represent a handler function to be called for the event(s).</description>
					</parameter>
					<parameter name="selector" usage="optional" type="String">
						<description>A selector string to filter the descendants of the selected elements that trigger the event. &lt;br&gt;
If the selector is null or omitted, the event is always triggered when it reaches the selected element.</description>
					</parameter>
					<parameter name="data" usage="optional" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
				</parameters>				
			</method>
			
			<method name="outerHeight" scope="instance">
				<description>Get the current computed height for the first element in the set of matched elements, including
padding, border, and optionally margin.  Return an integer (without "px") representation of the value or null if called on an empty set of elements.</description>
				<return-types>
					<return-type type="Number" />
				</return-types>
				<parameters>
					<parameter name="includeMargin" usage="optional" type="Boolean">
						<description>A Boolean indicating whether to include the element's margin in the calculation.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Get the outerHeight of a paragraph.
	var p = $("p:first");
	$("p:last").text("outerHeight:" + p.outerHeight());</example>
				</examples>
			</method>
			
			<method name="outerWidth" scope="instance">
				<description>Get the current computed width for the first element in the set of matched elements, including
padding, border, and optionally margin.  Return an integer (without "px") representation of the value or null if called on an empty set of elements.</description>
				<return-types>
					<return-type type="Number" />
				</return-types>
				<parameters>
					<parameter name="includeMargin" usage="optional" type="Boolean">
						<description>A Boolean indicating whether to include the element's margin in the calculation.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Get the outerHeight of a paragraph.
	var p = $("p:first");
	$("p:last").text("outerHeight:" + p.outerWidth());</example>
				</examples>
			</method>
			
			<method name="param" scope="instance">
				<description>Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request.</description>
				<return-types>
					<return-type type="String" />
				</return-types>
				<parameters>
					<parameter name="obj" usage="required" type="Object">
						<description>An array or object to serialize</description>
					</parameter>
				</parameters>
				<examples>
					<example>Serialize complex object.
	$.param({a:{b:1,c:2},d:[3,4,{e:5}]})
	// "a[b]=1&amp;a[c]=2&amp;d[]=3&amp;d[]=4&amp;d[2][e]=5"</example>
				</examples>
			</method>

			<method name="param" scope="instance">
				<description>Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request.</description>
				<return-types>
					<return-type type="String" />
				</return-types>
				<parameters>
					<parameter name="obj" usage="required" type="Object">
						<description>An array or object to serialize</description>
					</parameter>
					<parameter name="traditional" usage="required" type="Boolean">
						<description>A Boolean indicating whether to perform a traditional "shallow" serialization.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="parent" scope="instance">
				<description>Get the parent of each element in the current set of matched elements, optionally filtered by a selector.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="optional" type="String">
						<description>A string containing a selector expression to match elements against.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	var parentTag = $(this).parent().get(0).tagName;</example>
				</examples>
			</method>
			
			<method name="parents" scope="instance">
				<description>Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="optional" type="String">
						<description>A string containing a selector expression to match elements against.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Find all parent elements of each b.
	var parentEls = $("b").parents().map(function() {
						return this.tagName;
					}).get().join(", ");</example>
				</examples>
			</method>
			
			<method name="parentsUntil" scope="instance">
				<description>Get the ancestors of each element in the current set of matched elements, up to but not including the element
matched by the selector, DOM node, or jQuery object.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="optional" type="String">
						<description>A string containing a selector expression to indicate where to stop matching ancestor elements.</description>
					</parameter>
					<parameter name="filter" usage="optional" type="String">
						<description>A string containing a selector expression to match elements against.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$("li.item-2").parentsUntil(".level-1").css("background-color", "red");</example>
				</examples>
			</method>
			
			<method name="parentsUntil" scope="instance">
				<description>Get the ancestors of each element in the current set of matched elements, up to but not including the element
matched by the selector, DOM node, or jQuery object.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="element" usage="optional" type="Element">
						<description>A DOM node or jQuery object indicating where to stop matching ancestor elements.</description>
					</parameter>
					<parameter name="filter" usage="optional" type="String">
						<description>A string containing a selector expression to match elements against.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$("li.item-2").parentsUntil($("ul.level-1"), ".yes").css("border", "3px solid green");</example>
				</examples>
			</method>
			
			<method name="parseJSON" scope="instance">
				<description>Takes a well-formed JSON string and returns the resulting JavaScript object.</description>
				<return-types>
					<return-type type="Object" />
				</return-types>
				<parameters>
					<parameter name="json" usage="required" type="String">
						<description>The JSON string to parse.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="parseXML" scope="instance">
				<description>Parses a string into an XML document.</description>
				<return-types>
					<return-type type="XMLDocument" />
				</return-types>
				<parameters>
					<parameter name="data" usage="required" type="String">
						<description>A well-formed XML string to be parsed.</description>
					</parameter>
				</parameters>
			</method>

			<method name="position" scope="instance">
				<description>Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.</description>
				<return-types>
					<return-type type="Object" />
				</return-types>
				<examples>
					<example>Access the position of the second paragraph:
	var position = p.position();</example>
				</examples>
			</method>
			
			<method name="post" scope="instance">
				<description>Load data from the server using a HTTP POST request.</description>
				<return-types>
					<return-type type="jqXHR" />
				</return-types>
				<parameters>
					<parameter name="url" usage="required" type="String">
						<description>A string containing the URL to which the request is sent.</description>
					</parameter>
					<parameter name="data" usage="optional" type="Map">
						<description>A map or string that is sent to the server with the request.</description>
					</parameter>
					<parameter name="success" usage="optional" type="Function">
						<description>A callback function that is executed if the request succeeds.</description>
					</parameter>
					<parameter name="dataType" usage="optional" type="String">
						<description>The type of data expected from the server.  Default: Intelligent Guess (xml, json, script, text, html).</description>
					</parameter>
				</parameters>
				<examples>
					<example>Send form data using ajax request.
	$.post("test.php", $("#testform").serialize());</example>
				</examples>
			</method>
			
			<method name="prepend" scope="instance">
				<description>Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="content" usage="required" type="Element">
						<description>DOM element, array of elements, HTML string, or jQuery object to insert at the &lt;br&gt;
beginning of each element in the set of matched elements.</description>
					</parameter>
					<parameter name="content" usage="optional" type="Element">
						<description>One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects &lt;br&gt;
to insert at the beginning of each element in the set of matched elements.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Prepends some HTML to all paragraphs.
	$("p").prepend("&lt;b&gt;Hello&lt;/b&gt;");</example>
				</examples>
			</method>
			
			<method name="prepend" scope="instance">
				<description>Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="function" usage="required" type="Function">
						<description>function(index, html) is a function that returns an HTML string, DOM elements(s) or jQuery object &lt;br&gt;
to insert at the beginning of each element in the set of matched elements.  Receives the index position &lt;br&gt;
of the element in the set and the old HTML value of the elements as arguments.  Within the function, this refers &lt;br&gt;
to current element in the set.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="prependTo" scope="instance">
				<description>Insert every element in the set of matched elements to the beginning of the target.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="target" usage="required" type="String">
						<description>A selector, element, HTML string, or jQuery object; the matched set of elements &lt;br&gt;
will be inserted at the beginning of the element(s) specified by this parameter.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Prepends all spans to the element with the id "foo".
	$("span").prependTo("#foo");</example>
				</examples>
			</method>
			
			<method name="prev" scope="instance">
				<description>Get the immediately preceding siblings of each element in the set of matched elements, optionally filtered by a selector.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="optional" type="String">
						<description>A string containing a selector expression to match elements against.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Find very previous sibling of div.
	var $curr = $("#start");
	$curr = $curr.prev();</example>
				</examples>
			</method>
			
			<method name="prevAll" scope="instance">
				<description>Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="optional" type="String">
						<description>A string containing a selector expression to match elements against.</description>
					</parameter>				
				</parameters>
				<examples>
					<example>Locate all the divs preceeding the last div and giv them a class.
	$("div:last").prevAll().addClass("before");</example>
				</examples>
			</method>
			
			<method name="prevUntil" scope="instance">
				<description>Get all preceding siblings of each element up to but not including the element matched by selector, DOM node, or jQuery object.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="optional" type="String">
						<description>A string containing a selector expression to indicate where to stop matching preceding sibling elements.</description>
					</parameter>
					<parameter name="filter" usage="optional" type="String">
						<description>A string containing a selector expression to match elements against.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$("#term-3").prevUntil("dt").css("background-color", "red");</example>
				</examples>
			</method>
			
			<method name="prevUntil" scope="instance">
				<description>Get all preceding siblings of each element up to but not including the element matched by selector, DOM node, or jQuery object.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="element" usage="optional" type="String">
						<description>A string containing a selector expression to indicate where to stop matching preceding sibling elements.</description>
					</parameter>
					<parameter name="filter" usage="optional" type="String">
						<description>A string containing a selector expression to match element against.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$("#term-3").prevUntil(term1, "dd").css("color", "green");</example>
				</examples>
			</method>
			
			<method name="promise" scope="instance">
				<description>Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished.</description>
				<return-types>
					<return-type type="Promise" />
				</return-types>
				<parameters>
					<parameter name="type" usage="optional" type="String">
						<description>The type of queue that needs to be observed.  By default, type is "fx".</description>
					</parameter>
					<parameter name="target" usage="optional" type="Object">
						<description>Object onto which the promise methods have to be attached.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Resolve the returned Promise when all animations have ended.
	$("div").each(function(i) {
		$(this).fadeIn().fadeOut(1000*(i+1));
	});
	$("div").promise().done(function() {
		$("p").append(" Finished! ");
	});</example>
				</examples>
			</method>
			
			<method name="prop" scope="instance">
				<description>Get a value of a property for the first element in the set of matched elements.</description>
				<return-types>
					<return-type type="String" />
				</return-types>
				<parameters>
					<parameter name="propertyName" usage="required" type="String">
						<description>The name of the propety to get.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$input.attr('checked'); // return 'checked' or ''
	$input.prop('checked'); // return true or false</example>
				</examples>
			</method>
			
			<method name="prop" scope="instance">
				<description>Set one or more properties for the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="propertyName" usage="required" type="String">
						<description>The name of the property to set.</description>
					</parameter>
					<parameter name="value" usage="required" type="Object">
						<description>A value to set for the property.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="prop" scope="instance">
				<description>Set one or more properties for the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="map" usage="required" type="Map">
						<description>A map of property-value pairs to set.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Disable all checkboxes on the page.
	$("input[type='checkbox']").prop({
		disabled: true
	});</example>
				</examples>
			</method>
			
			<method name="prop" scope="instance">
				<description>Set one or more properties for the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="propertyName" usage="required" type="String">
						<description>The name of the property to set.</description>
					</parameter>
					<parameter name="function" usage="required" type="Function">
						<description>function(index, oldPropertyValue) is a function returning the value to set.  Receives the index &lt;br&gt;
position of the element in the set and the old property value as arguments.  Within the function, &lt;br&gt;
the keyword this refers to the current element.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="proxy" scope="instance">
				<description>Takes a function and returns a new one that will always have a particular context.</description>
				<return-types>
					<return-type type="Function" />
				</return-types>
				<parameters>
					<parameter name="function" usage="required" type="Function">
						<description>The function whose context will be changed.</description>
					</parameter>
					<parameter name="context" usage="required" type="Object">
						<description>The object to which the context (this) of the function should be set.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	// execute you.test() in the context of the 'you' object
	// no matter where it is called
	// i.e. the 'this' keyword wil refer to 'you'
	var youClick = $.proxy(you.test, you);</example>
				</examples>
			</method>
			
			<method name="proxy" scope="instance">
				<description>Takes a function and returns a new one that will always have a particular context.</description>
				<return-types>
					<return-type type="Function" />
				</return-types>
				<parameters>
					<parameter name="context" usage="required" type="Object">
						<description>The object to which the context (this) of the function should be set.</description>
					</parameter>
					<parameter name="name" usage="required" type="String">
						<description>The name of the function whose context will be changed (should be a property of the context object).</description>
					</parameter>
				</parameters>
				<examples>
					<example>Ensure the context of the function using the "context, function name" signature.
	$("#test").click(jQuery.proxy(obj, "test"));</example>
				</examples>
			</method>
			
			<method name="pushStack" scope="instance">
				<description>Add a collection of DOM elements onto the jQuery stack.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="elements" usage="required" type="Array">
						<description>An array of elements to push onto the stack and make into a new jQuery object.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Add some elements onto the jQuery stack, then pop back off again.
	jQuery([]).pushStack(document.getElementsByTagName("div"))
		.remove().end();</example>
				</examples>
			</method>
			
			<method name="pushStack" scope="instance">
				<description>Add a collection of DOM elements onto the jQuery stack.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="elements" usage="required" type="Array">
						<description>An array of elements to push onto the stack and make into a new jQuery object.</description>
					</parameter>
					<parameter name="name" usage="required" type="String">
						<description>The name of a jQuery method that generated the array of elements.</description>
					</parameter>
					<parameter name="arguments" usage="required" type="Object">
						<description>The arguments that were passed in to the jQuery method (for serialization).</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="queue" scope="instance">
				<description>Show the queue of functions to be executed on the matched elements.</description>
				<return-types>
					<return-type type="Array" />
				</return-types>
				<parameters>
					<parameter name="queueName" usage="optional" type="String">
						<description>A string containing the name of the queue.  Defaults to fx, the standard effect queue.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="queue" scope="instance">
				<description>Manipulate the queue of functions to be executed on the matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="queueName" usage="optional" type="String">
						<description>A string containing the name of the queue.  Defaults to fx, the standard effects queue.</description>
					</parameter>
					<parameter name="newQueue" usage="required" type="Array">
						<description>An array of functions to replace the current queue contents.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="queue" scope="instance">
				<description>Manipulate the queue of functions to be executed on the matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="queueName" usage="optional" type="String">
						<description>A string containing the name of the queue.  Defaults to fx, the standard effects queue.</description>
					</parameter>
					<parameter name="function" usage="required" type="Function">
						<description>callback(next) is new function to add to the queue, with a function to call that will dequeue the next item.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Queue a custom function.
	$("div").queue(function() {
		$(this).addClass('newcolor');  $(this).dequeue();
	});</example>
				</examples>
			</method>
			
			<method name="queue" scope="instance">
				<description>Show the queue of functions to be executed on the matched element.</description>
				<return-types>
					<return-type type="Array" />
				</return-types>
				<parameters>
					<parameter name="element" usage="required" type="Element">
						<description>A DOM element to inspect for an attached queue.</description>
					</parameter>
					<parameter name="queueName" usage="optional" type="String">
						<description>A string containing the name of the queue.  Defaults to fx, the standard effects queue.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Show the length of the queue.
	var n = jQuery.queue($("div")[0], "fx");
	$("span").text("Queue length is: " + n.length);</example>
				</examples>
			</method>
			
			<method name="queue" scope="instance">
				<description>Manipulate the queue of functions to be executed on the matched element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="element" usage="required" type="Element">
						<description>A DOM element where the array of queued functions is attached.</description>
					</parameter>
					<parameter name="queueName" usage="required" type="String">
						<description>A string containing the name of the queue.  Defaults to fx, the standard effects queue.</description>
					</parameter>
					<parameter name="newQueue" usage="required" type="Array">
						<description>An array of function to replace the current queue contents.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Set a queue array to delete the queue.
	jQuery.queue($("div")[0], "fx", []);</example>
				</examples>
			</method>
			
			<method name="queue" scope="instance">
				<description>Manipulate the queue of functions to be executed on the matched element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="element" usage="required" type="Element">
						<description>A DOM element where the array of queued functions is attached.</description>
					</parameter>
					<parameter name="queueName" usage="required" type="String">
						<description>A string containing the name of the queue.  Defaults to fx, the standard effects queue.</description>
					</parameter>
					<parameter name="callback" usage="required" type="Function">
						<description>The new function to add to the queue.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Queue a custom function.
	jQuery.queue($("div")[0], "fx", function() {
		$(this).addClass("newcolor");
		jQuery.dequeue(this);
	});</example>
				</examples>
			</method>
			
			<method name="ready" scope="instance">
				<description>Specify a function to execute when the DOM is fully loaded.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>A function to execute after the DOM is ready.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="remove" scope="instance">
				<description>Remove the set of matched elements from the DOM.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="optional" type="String">
						<description>A selector expression that filters the set of matched elements to be removed.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Remove all paragraphs from the DOM.
	$("p").remove();</example>
				</examples>
			</method>
			
			<method name="removeAttr" scope="instance">
				<description>Remove an attribute from each element in the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="attributeName" usage="required" type="String">
						<description>An attribute to remove; as of version 1.7, it can be a space-separated list of attributes.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	var input = $(this).next();
	input.removeAttr("title");</example>
				</examples>
			</method>
			
			<method name="removeClass" scope="instance">
				<description>Remove a single class, multiple classes, or all classes from each element in the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="className" usage="optional" type="String">
						<description>One or more space-separated classes to be removed from the class attribute of each matched element.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Remove the class 'blue' from the matched elements.
	$("p:even").removeClass("blue");</example>
				</examples>
			</method>
			
			<method name="removeClass" scope="instance">
				<description>Remove a single class, multiple classes, or all classes from each element in the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="function" usage="required" type="Function">
						<description>function(index, class) is a function returning one or more space-separated class names to be removed.&lt;br&gt;
	Receives the index position of the element in the set and the old class value as arguments.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="removeData" scope="instance">
				<description>Remove a previously-stored piece of data.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="name" usage="optional" type="String">
						<description>A string naming the piece of data to delete.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Set a data store then remove it.
	$("div").data("test1", "VALUE-1");
	$("div").removeData("test1");</example>
				</examples>
			</method>
			
			<method name="removeData" scope="instance">
				<description>Remove a previously-stored piece of data.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="list" usage="optional" type="String">
						<description>An array or space-separated string naming the pieces of data to delete.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="removeData" scope="instance">
				<description>Remove a previously-stored piece of data.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="element" usage="required" type="Element">
						<description>A DOM element from which to remove data.</description>
					</parameter>
					<parameter name="name" usage="optional" type="String">
						<description>A string naming the piece of data to remove.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	var div = $("div")[0];
	jQuery.removeData(div, "test1");</example>
				</examples>
			</method>
			
			<method name="removeProp" scope="instance">
				<description>Remove a property for the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="propertyName" usage="required" type="String">
						<description>The name of the property to set.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	var $para = $("p");
	$para.prop("luggageCode", 1234);
	$para.removeProp("luggageCode");</example>
				</examples>
			</method>
			
			<method name="replaceAll" scope="instance">
				<description>Replace each target element with the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="target" usage="required" type="String">
						<description>A selector expression indicating which element(s) to replace.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Replace all paragraphs with bold words.
	$("&lt;b&gt;paragraph&lt;/b&gt;").replaceAll("p");</example>
				</examples>
			</method>
			
			<method name="replaceWith" scope="instance">
				<description>Replace each element in the set of matched elements with the provided new content.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="newContent" usage="required" type="String">
						<description>The content to insert.  May be an HTML string, DOM element, or jQuery object.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Replace the button with a div containing the same word.
	$("button").replaceWith("&lt;div&gt;" + $("button").text() + "&lt;/div&gt;");</example>
				</examples>
			</method>
			
			<method name="replaceWith" scope="instance">
				<description>Replace each element in the set of matched elements with the provided new content.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="function" usage="required" type="Function">
						<description>function is a function that returns content with which to replace the set of matched elements.</description>
					</parameter>
				</parameters>				
			</method>
			
			<method name="resize" scope="instance">
				<description>Bind an event handler to the "resize" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="resize" scope="instance">
				<description>Bind an event handler to the "resize" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventData" usage="required" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="resize" scope="instance">
				<description>Trigger "resize" JavaScript event on an element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
			</method>
			
			<method name="scroll" scope="instance">
				<description>Bind an event handler to the "scroll" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="scroll" scope="instance">
				<description>Bind an event handler to the "scroll" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventData" usage="required" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="scroll" scope="instance">
				<description>Trigger "scroll" JavaScript event on an element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
			</method>
			
			<method name="scrollLeft" scope="instance">
				<description>Get the current horizontal position of the scroll bar for the first element in the set of matched elements.</description>
				<return-types>
					<return-type type="Number" />
				</return-types>
			</method>
			
			<method name="scrollLeft" scope="instance">
				<description>Set the current horizontal position of the scroll bar for each of the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="value" usage="required" type="Number">
						<description>An integer indicating the new position to set the scroll bar to.</description>
					</parameter>
				</parameters>
			</method>

			<method name="scrollTop" scope="instance">
				<description>Get the current vertical position of the scroll bar for the first element in the set of matched elements.</description>
				<return-types>
					<return-type type="Number" />
				</return-types>
			</method>
			
			<method name="scrollTop" scope="instance">
				<description>Set the current vertical position of the scroll bar for each of the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="value" usage="required" type="Number">
						<description>An integer indicating the new position to set the scroll bar to.</description>
					</parameter>
				</parameters>
			</method>

			<method name="select" scope="instance">
				<description>Bind an event handler to the "select" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="select" scope="instance">
				<description>Bind an event handler to the "select" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventData" usage="required" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="select" scope="instance">
				<description>Trigger "select" JavaScript event on an element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
			</method>

			<method name="serialize" scope="instance">
				<description>Encode a set of form elements as a string for submission.</description>
				<return-types>
					<return-type type="String" />
				</return-types>
				<examples>
					<example>
	var str = $("form").serialize();
	$(#results).text(str);</example>
				</examples>
			</method>
			
			<method name="serializeArray" scope="instance">
				<description>Encode a set of form elements as an array of names and values.</description>
				<return-types>
					<return-type type="Array" />
				</return-types>
				<examples>
					<example>
	var fields = $(":input").serializeArray();
	$("#results").empty();
	jQuery.each(fields, function(i, field) {
		$("#results").append(field.value + " ");
	});</example>
				</examples>
			</method>

			<method name="show" scope="instance">
				<description>Display the matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>				
			</method>
			
			<method name="show" scope="instance">
				<description>Display the matched elements.</description>				
				<return-types>
					<return-type type="jQuery" />
				</return-types>				
				<parameters>
					<parameter name="duration" usage="optional" type="Number">
						<description>A string or number determining how long the animation will run.&lt;br&gt;
The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 ms, respectively.</description>
					</parameter>
					<parameter name="callback" usage="optional" type="Function">
						<description>A function to call once the animation is complete.</description>
					</parameter>
				</parameters>
			</method>
												
			<method name="show" scope="instance">
				<description>Display the matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="duration" usage="optional" type="Number">
						<description>A string or number determining how long the animation will run.&lt;br&gt;
The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 ms, respectively.</description>
					</parameter>
					<parameter name="easing" usage="optional" type="String">
						<description>A string indicating which easing function to use for the transition.&lt;br&gt;
The only easing implementations in the jQuery library are the default, calling 'swing', and one that &lt;br&gt;
progresses at a constant pace, called 'linear'.</description>
					</parameter>
					<parameter name="callback" usage="optional" type="Function">
						<description>A function to call once the animation is complete.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="siblings" scope="instance">
				<description>Get the siblings of each element in the set of matched elements, optionally filtered by a selector.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="optional" type="String">
						<description>A string containing a selector expression to match elements against.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Find all siblings with a class 'selected' of each div.
	$("p").siblings(".selected").css("background", "yellow");</example>
				</examples>
			</method>
			
			<method name="size" scope="instance">
				<description>Return the number of elements in the jQuery object.</description>
				<return-types>
					<return-type type="Number" />
				</return-types>				
			</method>
			
			<method name="slice" scope="instance">
				<description>Reduce the set of matched elements to a subset specified by a range of indices.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="start" usage="required" type="Number">
						<description>An integer indicating the 0-based position at which the elements begin to be selected. &lt;br&gt;
If negative, it indicates an offset from the end of the set.</description>
					</parameter>
					<parameter name="end" usage="optional" type="Number">
						<description>An integer indicating the 0-based position at which the elements stop being selected. &lt;br&gt;
If negative, it indicates an offset from the end of the set.  If omitted, the range continues until the end of the set.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Select all paragraphs, then slices the selection to include only the second element.
	$("p").slice(1, 2).wrapInner("&lt;b&gt;&lt;/b&gt;");</example>
				</examples>
			</method>
			
			<method name="slideDown" scope="instance">
				<description>Display the matched elements with a sliding motion.</description>				
				<return-types>
					<return-type type="jQuery" />
				</return-types>				
				<parameters>
					<parameter name="duration" usage="optional" type="Number">
						<description>A string or number determining how long the animation will run.&lt;br&gt;
The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 ms, respectively.</description>
					</parameter>
					<parameter name="callback" usage="optional" type="Function">
						<description>A function to call once the animation is complete.</description>
					</parameter>
				</parameters>
			</method>
												
			<method name="slideDown" scope="instance">
				<description>Display the matched elements with a sliding motion.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="duration" usage="optional" type="Number">
						<description>A string or number determining how long the animation will run.&lt;br&gt;
The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 ms, respectively.</description>
					</parameter>
					<parameter name="easing" usage="optional" type="String">
						<description>A string indicating which easing function to use for the transition.&lt;br&gt;
The only easing implementations in the jQuery library are the default, calling 'swing', and one that &lt;br&gt;
progresses at a constant pace, called 'linear'.</description>
					</parameter>
					<parameter name="callback" usage="optional" type="Function">
						<description>A function to call once the animation is complete.</description>
					</parameter>
				</parameters>
			</method>

			<method name="slideToggle" scope="instance">
				<description>Display or hide the matched elements with a sliding motion.</description>				
				<return-types>
					<return-type type="jQuery" />
				</return-types>				
				<parameters>
					<parameter name="duration" usage="optional" type="Number">
						<description>A string or number determining how long the animation will run.&lt;br&gt;
The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 ms, respectively.</description>
					</parameter>
					<parameter name="callback" usage="optional" type="Function">
						<description>A function to call once the animation is complete.</description>
					</parameter>
				</parameters>
			</method>
												
			<method name="slideToggle" scope="instance">
				<description>Display or hide the matched elements with a sliding motion.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="duration" usage="optional" type="Number">
						<description>A string or number determining how long the animation will run.&lt;br&gt;
The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 ms, respectively.</description>
					</parameter>
					<parameter name="easing" usage="optional" type="String">
						<description>A string indicating which easing function to use for the transition.&lt;br&gt;
The only easing implementations in the jQuery library are the default, calling 'swing', and one that &lt;br&gt;
progresses at a constant pace, called 'linear'.</description>
					</parameter>
					<parameter name="callback" usage="optional" type="Function">
						<description>A function to call once the animation is complete.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="slideUp" scope="instance">
				<description>Hide the matched elements with a sliding motion.</description>				
				<return-types>
					<return-type type="jQuery" />
				</return-types>				
				<parameters>
					<parameter name="duration" usage="optional" type="Number">
						<description>A string or number determining how long the animation will run.&lt;br&gt;
The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 ms, respectively.</description>
					</parameter>
					<parameter name="callback" usage="optional" type="Function">
						<description>A function to call once the animation is complete.</description>
					</parameter>
				</parameters>
			</method>
												
			<method name="slideUp" scope="instance">
				<description>Hide the matched elements with a sliding motion.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="duration" usage="optional" type="Number">
						<description>A string or number determining how long the animation will run.&lt;br&gt;
The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 ms, respectively.</description>
					</parameter>
					<parameter name="easing" usage="optional" type="String">
						<description>A string indicating which easing function to use for the transition.&lt;br&gt;
The only easing implementations in the jQuery library are the default, calling 'swing', and one that &lt;br&gt;
progresses at a constant pace, called 'linear'.</description>
					</parameter>
					<parameter name="callback" usage="optional" type="Function">
						<description>A function to call once the animation is complete.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="stop" scope="instance">
				<description>Stop the currently-running animation on the matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="clearQueue" usage="optional" type="Boolean">
						<description>A boolean indicating whether to remove queued animation as well.  Defaults to false.</description>
					</parameter>
					<parameter name="jumpToEnd" usage="optional" type="Boolean">
						<description>A boolean indicating whether to complete the current animation immediately.  Defaults to false.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="stop" scope="instance">
				<description>Stop the currently-running animation on the matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="queue" usage="optional" type="String">
						<description>The name of the queue in which to stop animations.</description>
					</parameter>
					<parameter name="clearQueue" usage="optional" type="Boolean">
						<description>A boolean indicating whether to remove queued animation as well.  Defaults to false.</description>
					</parameter>
					<parameter name="jumpToEnd" usage="optional" type="Boolean">
						<description>A boolean indicating whether to complete the current animation immediately.  Defaults to false.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="submit" scope="instance">
				<description>Bind an event handler to the "submit" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="submit" scope="instance">
				<description>Bind an event handler to the "submit" JavaScript event.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventData" usage="required" type="Map">
						<description>A map of data that will be passed to the event handler.</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute each time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="submit" scope="instance">
				<description>Trigger "submit" JavaScript event on an element.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
			</method>

			<method name="text" scope="instance">
				<description>Get the combined text contents of each element in the set of matched elements, including their descendants.</description>
				<return-types>
					<return-type type="String" />
				</return-types>			
			</method>
			
			<method name="text" scope="instance">
				<description>Set the content of each element in the set of matched elements to the specified text.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="textString" usage="required" type="String">
						<description>A string of text to set as content of each matched element.</description>
					</parameter>
				</parameters>				
			</method>
			
			<method name="text" scope="instance">
				<description>Set the content of each element in the set of matched elements to the specified text.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="function" usage="required" type="Function">
						<description>function(index,text) is a function returning the text content to set.  Receives the index &lt;br&gt;
position of the element in the set and the old text value as arguments.</description>
					</parameter>
				</parameters>				
			</method>
			
			<method name="toArray" scope="instance">
				<description>Retrieve all the DOM elements contained in the jQuery set, as an array.</description>
				<return-types>
					<return-type type="Array" />
				</return-types>
			</method>
			
			<method name="toggle" scope="instance">
				<description>Display or hide the matched elements.</description>				
				<return-types>
					<return-type type="jQuery" />
				</return-types>				
				<parameters>
					<parameter name="duration" usage="optional" type="Number">
						<description>A string or number determining how long the animation will run.&lt;br&gt;
The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 ms, respectively.</description>
					</parameter>
					<parameter name="callback" usage="optional" type="Function">
						<description>A function to call once the animation is complete.</description>
					</parameter>
				</parameters>
			</method>
												
			<method name="toggle" scope="instance">
				<description>Display or hide the matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="duration" usage="optional" type="Number">
						<description>A string or number determining how long the animation will run.&lt;br&gt;
The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 ms, respectively.</description>
					</parameter>
					<parameter name="easing" usage="optional" type="String">
						<description>A string indicating which easing function to use for the transition.&lt;br&gt;
The only easing implementations in the jQuery library are the default, calling 'swing', and one that &lt;br&gt;
progresses at a constant pace, called 'linear'.</description>
					</parameter>
					<parameter name="callback" usage="optional" type="Function">
						<description>A function to call once the animation is complete.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="toggle" scope="instance">
				<description>Display or hide the matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="showOrHide" usage="required" type="Boolean">
						<description>A Boolean indicating whether to show or hide the elements.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="toggleClass" scope="instance">
				<description>Add or remove one or more classes from each element in the set of matched elements,
depending on either the class's presence or the value of the switch argument.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="className" usage="required" type="String">
						<description>One or more class names (separated by spaces) to be toggled for each element in the matched set.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="toggleClass" scope="instance">
				<description>Add or remove one or more classes from each element in the set of matched elements,
depending on either the class's presence or the value of the switch argument.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="className" usage="required" type="String">
						<description>One or more class names (separated by spaces) to be toggled for each element in the matched set.</description>
					</parameter>
					<parameter name="switch" usage="required" type="Boolean">
						<description>A Boolean value to determine whether the class should be added or removed.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="toggleClass" scope="instance">
				<description>Add or remove one or more classes from each element in the set of matched elements,
depending on either the class's presence or the value of the switch argument.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="switch" usage="optional" type="Boolean">
						<description>A Boolean value to determine whether the class should be added or removed.</description>
					</parameter>
				</parameters>
			</method>

			<method name="toggleClass" scope="instance">
				<description>Add or remove one or more classes from each element in the set of matched elements,
depending on either the class's presence or the value of the switch argument.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="function" usage="required" type="Function">
						<description>function(index, class, switch) is a function that returns class names to be toggled in the class attribute &lt;br&gt;
of each element in the matched set.  Receives the index position of the element in the set, &lt;br&gt;
the old class value, and the switch as arguments.</description>
					</parameter>
					<parameter name="switch" usage="optional" type="Boolean">
						<description>A Boolean value to determine whether the class should be added or removed.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="trigger" scope="instance">
				<description>Execute all handler and behaviors attached to the matched elements for the given event type.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventType" usage="required" type="String">
						<description>A string containing a JavaScript event type, such as click or submit.</description>
					</parameter>
					<parameter name="extraParameters" usage="optional" type="String">
						<description>Additional parameters to pass along to the event handler.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="trigger" scope="instance">
				<description>Execute all handler and behaviors attached to the matched elements for the given event type.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="event" usage="required" type="String">
						<description>A jQuery.Event object.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="triggerHandler" scope="instance">
				<description>Execute all handlers attached to an element for an event.  This method does not cause the default
behaviour of an event to occur (such as a form submission).  This method only affects the first matched element.  Event
created with this method do not bubble up the DOM hierarchy.</description>
				<return-types>
					<return-type type="Object" />
				</return-types>
				<parameters>
					<parameter name="eventType" usage="required" type="String">
						<description>A string containing JavaScript event type, such as click or submit.</description>
					</parameter>
					<parameter name="extraParameters" usage="optional" type="Object">
						<description>An array of additional parameters to pass along to the event handler.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="trim" scope="instance">
				<description>Remove the whitespace from the beginning and end of a string.</description>
				<return-types>
					<return-type type="String" />
				</return-types>
				<parameters>
					<parameter name="str" usage="required" type="String">
						<description>The string to trim.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="type" scope="instance">
				<description>Determine the internal JavaScript [[Class]] of an object.</description>
				<return-types>
					<return-type type="String" />
				</return-types>
				<parameters>
					<parameter name="obj" usage="required" type="Object">
						<description>Object to get the internal JavaScript [[Class]] of.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="unbind" scope="instance">
				<description>Remove a previously-attached event handler from the elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventType" usage="optional" type="String">
						<description>A string containing a JavaScript event type, such as click or submit.</description>
					</parameter>
					<parameter name="handler" usage="optional" type="Function">
						<description>handler(eventObject) is the function that is to be no longer executed.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="unbind" scope="instance">
				<description>Remove a previously-attached event handler from the elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="eventType" usage="required" type="String">
						<description>A string containing a JavaScript event type, such as click or submit.</description>
					</parameter>
					<parameter name="false" usage="optional" type="Boolean">
						<description>Unbinds the corresponding 'return false' function that was bound using .bind(eventType, false).</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="unbind" scope="instance">
				<description>Remove a previously-attached event handler from the elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="event" usage="required" type="Event">
						<description>A JavaScript event object as passed to an event handler.</description>
					</parameter>
				</parameters>
			</method>		
			
			<method name="undelegate" scope="instance">
				<description>Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
			</method>	
			
			<method name="undelegate" scope="instance">
				<description>Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="required" type="String">
						<description>A selector which will be used to filter the event results.</description>
					</parameter>
					<parameter name="eventType" usage="required" type="String">
						<description>A string containing a JavaScript event type, such as "click" or "keydown".</description>
					</parameter>
				</parameters>
			</method>	

			<method name="undelegate" scope="instance">
				<description>Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="required" type="String">
						<description>A selector which will be used to filter the event results.</description>
					</parameter>
					<parameter name="eventType" usage="required" type="String">
						<description>A string containing a JavaScript event type, such as "click" or "keydown".</description>
					</parameter>
					<parameter name="handler" usage="required" type="Function">
						<description>handler(eventObject) is a function to execute at the time the event is triggered.</description>
					</parameter>
				</parameters>
			</method>	
			
			<method name="undelegate" scope="instance">
				<description>Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="selector" usage="required" type="String">
						<description>A selector which will be used to filter the event results.</description>
					</parameter>
					<parameter name="events" usage="required" type="Map">
						<description>A map of one or more event types and previously bound functions to unbind from them.</description>
					</parameter>
				</parameters>
			</method>	
			
			<method name="undelegate" scope="instance">
				<description>Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="namespace" usage="required" type="String">
						<description>A String containing a namespace to unbind all events from.</description>
					</parameter>
				</parameters>
			</method>	

			<method name="unique" scope="instance">
				<description>Sorts an array of DOM elements, in place, with the duplicates removed.  Note that this only works on arrays of
DOM elements, not strings or numbers.</description>
				<return-types>
					<return-type type="Array" />
				</return-types>
				<parameters>
					<parameter name="array" usage="required" type="Array">
						<description>The array of DOM elements.</description>
					</parameter>
				</parameters>
			</method> 
			
			<method name="unwrap" scope="instance">
				<description>Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
			</method>
			
			<method name="val" scope="instance">
				<description>Get the current value of the first element in the set of matched elements.</description>
				<return-types>
					<return-type type="Object" />
				</return-types>
			</method>
			
			<method name="val" scope="instance">
				<description>Set the value of each element in the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="value" usage="required" type="String">
						<description>A string of text or an array of strings corresponding to the value of each matched element to set as selected/checked.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="val" scope="instance">
				<description>Set the value of each element in the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="function" usage="required" type="Function">
						<description>function(index, value) is a function returning the value to set.  this is the current element. &lt;br&gt;
Receives the index position of the element in the set and the old value as arguments.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="when" scope="instance">
				<description>Provides a way to execute callback functions based on one or more objects, usually Deferred objects that represent asynchronous events.</description>
				<return-types>
					<return-type type="Promise" />
				</return-types>
				<parameters>
					<parameter name="deferreds" usage="required" type="Object">
						<description>One or more Deferred objects, or plain JavaScript objects.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Executing the function myFunc when both ajax requests are successful,
or myFailure if either one has an error.
	$.when($.ajax("/page1.php"), $.ajax("/page2.php")
	 .then(myFunc, myFailure);
					</example>
				</examples>
			</method>
			
			<method name="width" scope="instance">
				<description>Get the current computed width for the first element in the set of matched elements.</description>
				<return-types>
					<return-type type="Number" />
				</return-types>
			</method>
			
			<method name="width" scope="instance">
				<description>Set the CSS width of each element in the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="value" usage="required" type="Number">
						<description>An integer representing the number of pixels, or an integer along with an optional unit of measure appended.</description>
					</parameter>				
				</parameters>
			</method>
			
			<method name="width" scope="instance">
				<description>Set the CSS width of each element in the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="function" usage="required" type="Function">
						<description>function(index, width) is a function returning the width to set.  Receives the index position of the element &lt;br&gt;
in the set and the old width as arguments.  Within the function, this refers to the current element in the set.</description>
					</parameter>				
				</parameters>
			</method>
			
			<method name="wrap" scope="instance">
				<description>Wrap an HTML structure around each element in the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="wrappingElement" usage="required" type="String">
						<description>An HTML snippet, selector expression, jQuery object, or DOM element &lt;br&gt;
specifying the structure to wrap around the matched elements.</description>
					</parameter>
				</parameters>
			</method>

			<method name="wrap" scope="instance">
				<description>Wrap an HTML structure around each element in the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="function" usage="required" type="Function">
						<description>function(index) is a callback function returning the HTML content or jQuery object to wrap around the matched elements.&lt;br&gt;
Receives the index position of the element in the set as an argument.  Within the function,&lt;br&gt;
this refers to the current element in the set.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="wrapAll" scope="instance">
				<description>Wrap an HTML structure around all elements in the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="wrappingElement" usage="required" type="String">
						<description>An HTML snippet, selector expression, jQuery object, or DOM element&lt;br&gt;
specifying the structure to wrap around the matched elements.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="wrapInner" scope="instance">
				<description>Wrap an HTML structure around the content of each element in the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="wrappingElement" usage="required" type="String">
						<description>An HTML snippet, selector expression, jQuery object, or DOM element&lt;br&gt;
specifying the structure to wrap around the matched elements.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="wrapInner" scope="instance">
				<description>Wrap an HTML structure around the content of each element in the set of matched elements.</description>
				<return-types>
					<return-type type="jQuery" />
				</return-types>
				<parameters>
					<parameter name="function" usage="required" type="Function">
						<description>function(index) is a callback function which generates a structure to wrap around the content of the matched elements.&lt;br&gt;
Receives the index position of the element in the set as an argument.&lt;br&gt;
Within the function, this refers to the current element in the set.</description>
					</parameter>
				</parameters>
			</method>

		</methods>
		
	</class>
	
	<class type="Callbacks">
		<methods>
			<method name="add" scope="instance">
				<description>Add a callback or a collection of callbacks to a callback list.</description>
				<parameters>
					<parameter name="callbacks" usage="required" type="Function">
						<description>A function, or array of functions, that are to be added to the callback list.</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="Callbacks" />
				</return-types>
				<examples>
					<example>Add new callbacks to a callback list.
	var foo = function(value) {
		console.log('foo:' + value);
	}
	var callbacks = $.Callbacks();
	callbacks.add(foo);</example>
				</examples>
			</method>
			
			<method name="disable" scope="instance">
				<description>Disable a callback list from doing anything more.</description>
				<return-types>
					<return-type type="Callbacks" />
				</return-types>
				<examples>
					<example>Disable further calls being made to a callback list.
	var callbacks = $.Callbacks();
	callbacks.add(foo);
	callbacks.fire('foo');
	callbacks.disable();</example>
				</examples>
			</method>
			
			<method name="empty" scope="instance">
				<description>Remove all of the callbacks from a list.</description>
				<return-types>
					<return-type type="Callbacks" />
				</return-types>
				<examples>
					<example>Empty a list of callbacks.
	var callbacks = $.Callbacks();
	callbacks.add(foo);
	callbacks.add(bar);
	callbacks.empty();</example>
				</examples>
			</method>
			
			<method name="fire" scope="instance">
				<description>Call all of the callbacks with the given arguments</description>
				<return-types>
					<return-type type="Callbacks" />
				</return-types>
				<parameters>
					<parameter name="arguments" usage="required" type="Object">
						<description>The argument or list of arguments to pass back to the callback list.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	var callbacks = $.Callbacks();
	callbacks.add(foo);
	callbacks.fire('hello');
	callbacks.fire('world');</example>
				</examples>
			</method>
			
			<method name="fired" scope="instance">
				<description>Determine if the callbacks have already been called at least once.</description>
				<return-types>
					<return-type type="Boolean" />
				</return-types>
				<examples>
					<example>
	var callbacks = $.Callbacks();
	callbacks.add(foo);
	callbacks.fire('hello');
	console.log(callbacks.fired());</example>
				</examples>
			</method>
			
			<method name="fireWith" scope="instance">
				<description>Call all callbacks in a list with the given context and arguments.</description>
				<parameters>
					<parameter name="context" usage="optional" type="Object">
						<description>A reference to the context in which the callbacks in the list should be fired.</description>
					</parameter>
					<parameter name="args" usage="optional" type="Object">
						<description>An argument, or array of arguments, to pass to the callbacks in the list.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Fire a list of callbacks with a specific context and an array of arguments.
	var callbacks = $.Callbacks;
	callbacks.add(log);
	callbacks.fireWith(window, ['foo', 'bar']);</example>
				</examples>
			</method>
			
			<method name="has" scope="instance">
				<description>Determine whether a supplied callback is in a list</description>
				<return-types>
					<return-type type="Boolean" />
				</return-types>
				<parameters>
					<parameter name="callback" usage="required" type="Function">
						<description>The callback to search for.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	var callbacks = $.Callbacks();
	callbacks.add(foo);
	console.log(callbacks.has(foo));
	console.log(callbacks.has(bar));</example>
				</examples>
			</method>
			
			<method name="lock" scope="instance">
				<description>Lock a callback list in its current state.</description>
				<return-types>
					<return-type type="Callbacks" />
				</return-types>
				<examples>
	var callbacks = $.Callbacks();
	callbacks.lock();</examples>
			</method>
			
			<method name="locked" scope="instance">
				<description>Determine if the callbacks list has been locked.</description>
				<return-types>
					<return-type type="Boolean" />
				</return-types>
				<examples>
	var callbacks = $.Callbacks();
	callbacks.lock();
	console.log(callbacks.locked());
				</examples>
			</method>
			
			<method name="remove" scope="instance">
				<description>Remove a callback or a collection of callbacks from a callback list.</description>
				<return-types>
					<return-type type="Callbacks" />
				</return-types>
				<parameters>
					<parameter name="callbacks" usage="required" type="Function">
						<description>A function, or array of functions, that are to be removed from the callback list.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	var callbacks = $.Callbacks();
	callbacks.add(foo);
	callbacks.fire('hello');
	callbacks.remove(foo);</example>
				</examples>
			</method>
			
		</methods>
	</class>
	
	<class type="Deferred">
		<methods>
			<method name="always" scope="instance">
				<description>Add handlers to be called when the Deferred object is either resolved or rejected.</description>
				<return-types>
					<return-type type="Deferred" />
				</return-types>
				<parameters>
					<parameter name="alwaysCallback" usage="required" type="Function">
						<description>A function, or array of functions, that is called when the Deferred is resolved or rejected.</description>
					</parameter>
					<parameter name="alwaysCallback" usage="optional" type="Function">
						<description>Optional additional functions, or arrays of functions.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Attach a callback for both success and error.
	$.get("test.php").always(function() {
		alert("$.get completed with success or error callback arguments");
	});</example>
				</examples>				
			</method>
			
			<method name="done" scope="instance">
				<description>Add handlers to be called when the Deferred object is resolved.</description>
				<return-types>
					<return-type type="Deferred" />
				</return-types>
				<parameters>
					<parameter name="doneCallbacks" usage="required" type="Function">
						<description>A function, or array of functions, that is called when the Deferred is resolved.</description>
					</parameter>
					<parameter name="doneCallback" usage="optional" type="Function">
						<description>Optional additional functions, or arrays of functions.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Resolve a Deferred object when the user clicks a button,
triggering a number of callback functions:
	var dfd = $.Deferred();
	dfd.done([fn1, fn2], fn3, [fn2, fn1]);
	$("button").bind("click", function() {
		dfd.resolve("and");
	});</example>
				</examples>
			</method>
			
			<method name="fail" scope="instance">
				<description>Add handlers to be called when the Deferred object is rejected.</description>
				<return-types>
					<return-type type="Deferred" />
				</return-types>
				<parameters>
					<parameter name="failCallbacks" usage="required" type="Function">
						<description>A function, or array of functions, that is called when the Deferred is rejected.</description>
					</parameter>
					<parameter name="failCallback" usage="optional" type="Function">
						<description>Optional additional functions, or arrays of functions.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$.get("test.php")
		.done(function(){alert("$.get succeeded");})
		.fail(function(){alert("$.get failed!");});</example>
				</examples>
			</method>
			
			<method name="notify" scope="instance">
				<description>Call the progressCallbacks on a Deferred object with the given args.</description>
				<return-types>
					<return-type type="Deferred" />
				</return-types>
				<parameters>
					<parameter name="args" usage="optional" type="Object">
						<description>Optional arguments that are passed to the progressCallbacks.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="notifyWith" scope="instance">
				<description>Call the progressCallbacks on a Deferred object with the given context and args.</description>
				<return-types>
					<return-type type="Deferred" />
				</return-types>
				<parameters>
					<parameter name="context" usage="required" type="Object">
						<description>Context passed to the progressCallbacks as the this object.</description>
					</parameter>
					<parameter name="args" usage="optional" type="Object">
						<description>Optional arguments that are passed to the progressCallbacks.</description>
					</parameter>
				</parameters>				
			</method>
			
			<method name="pipe" scope="instance">
				<description>Utility method to filter and/or chain Deferreds.</description>
				<return-types>
					<return-type type="Promise" />
				</return-types>
				<parameters>
					<parameter name="doneFilter" usage="optional" type="Function">
						<description>An optional function that is called when the Deferred is resolved.</description>
					</parameter>
					<parameter name="failFilter" usage="optional" type="Function">
						<description>An optional function that is called when the Deferred is rejected.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Filter resolve value.
	var defer = $.Deferred(),
	    filtered = defer.pipe(function(value) {
	    	return value * 2;
	    });</example>
				</examples>
			</method>
			
			<method name="pipe" scope="instance">
				<description>Utility method to filter and/or chain Deferreds.</description>
				<return-types>
					<return-type type="Promise" />
				</return-types>
				<parameters>
					<parameter name="doneFilter" usage="optional" type="Function">
						<description>An optional function that is called when the Deferred is resolved.</description>
					</parameter>
					<parameter name="failFilter" usage="optional" type="Function">
						<description>An optional function that is called when the Deferred is rejected.</description>
					</parameter>
					<parameter name="progressFilter" usage="optional" type="Function">
						<description>An optional function that is called when progress notifications are sent to the Deferred.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="progress" scope="instance">
				<description>Add handlers to be called when the Deferred object generates progress notifications.</description>
				<return-types>
					<return-type type="Deferred" />
				</return-types>
				<parameters>
					<parameter name="progressCallbacks" usage="required" type="Function">
						<description>A function, or array of functions, that is called when the Deferred generates progress notifications.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="promise" scope="instance">
				<description>Return a Deferred's Promise object.</description>
				<return-types>
					<return-type type="Promise" />
				</return-types>
				<parameters>
					<parameter name="target" usage="optional" type="Object">
						<description>Object onto which the promise methods have to be attached.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Use the target argument to promote an existing object to a Promise:
	defer = $.Deferred();
	defer.promise(obj);
	defer.resolve("John");
	obj.done(function(name) {
		obj.hello(name);  // will alert "Hello John"
	}).hello("Karl"); // will alert "Hello Karl"</example>
				</examples>
			</method>
			
			<method name="reject" scope="instance">
				<description>Reject a Deferred object and call any failCallbacks with the given args.</description>
				<return-types>
					<return-type type="Deferred" />
				</return-types>
				<parameters>
					<parameter name="args" usage="optional" type="Object">
						<description>Optional arguments that are passed to the failCallbacks.</description>
					</parameter>
				</parameters>				
			</method>
			
			<method name="rejectWith" scope="instance">
				<description>Reject a Deferred object and call any failCallbacks with the given context and args.</description>
				<return-types>
					<return-type type="Deferred" />
				</return-types>
				<parameters>
					<parameter name="context" usage="required" type="Object">
						<description>Context passed to the failCallbacks as the this object.</description>
					</parameter>
					<parameter name="args" usage="optional" type="Object">
						<description>Optional arguments that are passed to the failCallbacks.</description>
					</parameter>
				</parameters>				
			</method>
			
			<method name="resolve" scope="instance">
				<description>Resolve a Deferred object and call any doneCallbacks with the given args.</description>
				<return-types>
					<return-type type="Deferred" />
				</return-types>
				<parameters>
					<parameter name="args" usage="optional" type="Object">
						<description>Optional arguments that are passed to the doneCallbacks.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="resolveWith" scope="instance">
				<description>Resolve a Deferred object and call any doneCallbacks with the given context and args.</description>
				<return-types>
					<return-type type="Deferred" />
				</return-types>
				<parameters>
					<parameter name="context" usage="required" type="Object">
						<description>Context passed to the doneCallbacks as the this object.</description>
					</parameter>
					<parameter name="args" usage="optional" type="Object">
						<description>Optional arguments that are passed to the doneCallbacks.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="state" scope="instance">
				<description>Determine the current state of a Deferred object.  Return &quot;pending&quot;, &quot;resolved&quot; or &quot;rejected&quot;.</description>
				<return-types>
					<return-type type="String" />
				</return-types>
			</method>
			
			<method name="then" scope="instance">
				<description>Add handlers to be called when the Deferred object is resolved or rejected.</description>
				<return-types>
					<return-type type="Promise" />
				</return-types>
				<parameters>
					<parameter name="doneCallbacks" usage="required" type="Function">
						<description>A function, or array of functions, called when the Deferred is resolved.</description>
					</parameter>
					<parameter name="failCallbacks" usage="required" type="Function">
						<description>A function, or array of functions, called when the Deferred is rejected.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$.get("test.php").then(
		function() { alert("$.get succeeded"); },
		function() { alert("$.get failed!"); }
	);</example>
				</examples>
			</method>
			
			<method name="then" scope="instance">
				<description>Add handlers to be called when the Deferred object is resolved or rejected.</description>
				<return-types>
					<return-type type="Promise" />
				</return-types>
				<parameters>
					<parameter name="doneCallbacks" usage="required" type="Function">
						<description>A function, or array of functions, called when the Deferred is resolved.</description>
					</parameter>
					<parameter name="failCallbacks" usage="required" type="Function">
						<description>A function, or array of functions, called when the Deferred is rejected.</description>
					</parameter>
					<parameter name="progressCallbacks" usage="optional" type="Function">
						<description>A function, or array of function, called when the Deferred notifies progress.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="pipe" scope="instance">
				<description>Utility method to filter and/or chain Deferreds.</description>
				<return-types>
					<return-type type="Promise" />
				</return-types>
				<parameters>
					<parameter name="doneFilter" usage="optional" type="Function">
						<description>An optional function that is called when the Deferred is resolved.</description>
					</parameter>
					<parameter name="failFilter" usage="optional" type="Function">
						<description>An optional function that is called when the Deferred is rejected.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Filter resolve value.
	var defer = $.Deferred(),
	    filtered = defer.pipe(function(value) {
	    	return value * 2;
	    });</example>
				</examples>
			</method>
			
			<method name="pipe" scope="instance">
				<description>Utility method to filter and/or chain Deferreds.</description>
				<return-types>
					<return-type type="Promise" />
				</return-types>
				<parameters>
					<parameter name="doneFilter" usage="optional" type="Function">
						<description>An optional function that is called when the Deferred is resolved.</description>
					</parameter>
					<parameter name="failFilter" usage="optional" type="Function">
						<description>An optional function that is called when the Deferred is rejected.</description>
					</parameter>
					<parameter name="progressFilter" usage="optional" type="Function">
						<description>An optional function that is called when progress notifications are sent to the Deferred.</description>
					</parameter>
				</parameters>
			</method>			

			
		</methods>
	
	</class>
	
	<class type="Promise">
	
		<methods>			
	
			<method name="then" scope="instance">
				<description>Add handlers to be called when the Deferred object is resolved or rejected.</description>
				<return-types>
					<return-type type="Promise" />
				</return-types>
				<parameters>
					<parameter name="doneCallbacks" usage="required" type="Function">
						<description>A function, or array of functions, called when the Deferred is resolved.</description>
					</parameter>
					<parameter name="failCallbacks" usage="required" type="Function">
						<description>A function, or array of functions, called when the Deferred is rejected.</description>
					</parameter>
					<parameter name="progressCallbacks" usage="optional" type="Function">
						<description>A function, or array of function, called when the Deferred notifies progress.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="always" scope="instance">
				<description>Add handlers to be called when the Deferred object is either resolved or rejected.</description>
				<return-types>
					<return-type type="Promise" />
				</return-types>
				<parameters>
					<parameter name="alwaysCallback" usage="required" type="Function">
						<description>A function, or array of functions, that is called when the Deferred is resolved or rejected.</description>
					</parameter>
					<parameter name="alwaysCallback" usage="optional" type="Function">
						<description>Optional additional functions, or arrays of functions.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Attach a callback for both success and error.
	$.get("test.php").always(function() {
		alert("$.get completed with success or error callback arguments");
	});</example>
				</examples>				
			</method>
			
			<method name="done" scope="instance">
				<description>Add handlers to be called when the Deferred object is resolved.</description>
				<return-types>
					<return-type type="Promise" />
				</return-types>
				<parameters>
					<parameter name="doneCallbacks" usage="required" type="Function">
						<description>A function, or array of functions, that is called when the Deferred is resolved.</description>
					</parameter>
					<parameter name="doneCallback" usage="optional" type="Function">
						<description>Optional additional functions, or arrays of functions.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Resolve a Deferred object when the user clicks a button,
triggering a number of callback functions:
	var dfd = $.Deferred();
	dfd.done([fn1, fn2], fn3, [fn2, fn1]);
	$("button").bind("click", function() {
		dfd.resolve("and");
	});</example>
				</examples>
			</method>
			
			<method name="fail" scope="instance">
				<description>Add handlers to be called when the Deferred object is rejected.</description>
				<return-types>
					<return-type type="Promise" />
				</return-types>
				<parameters>
					<parameter name="failCallbacks" usage="required" type="Function">
						<description>A function, or array of functions, that is called when the Deferred is rejected.</description>
					</parameter>
					<parameter name="failCallback" usage="optional" type="Function">
						<description>Optional additional functions, or arrays of functions.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$.get("test.php")
		.done(function(){alert("$.get succeeded");})
		.fail(function(){alert("$.get failed!");});</example>
				</examples>
			</method>
			
			<method name="state" scope="instance">
				<description>Determine the current state of a Deferred object.  Return &quot;pending&quot;, &quot;resolved&quot; or &quot;rejected&quot;.</description>
				<return-types>
					<return-type type="String" />
				</return-types>
			</method>
			
		</methods>
	
	</class>
	
	<class type="jqXHR">
		<properties>
			<property name="status" type="Number" scope="instance">
				<description>Return HTTP status code or 0 if error flag is set.</description>
			</property>
			<property name="statusText" type="String" scope="instance">
				<description>Return HTTP status text or empty string if error flag is set.</description>
			</property>
			<property name="responseText" type="String" scope="instance">
				<description>Return the text response entity body.</description>
			</property>
			<property name="responseXML" type="String" scope="instance">
				<description>Return the document response entity body.</description>
			</property>
			<property name="readyState" type="Number" scope="instance">
				<description>Returns the current state.</description>
			</property>			
		</properties>
		
		<methods>
			<method name="getResponseHeader" scope="instance">
				<description>Return the header field value from the response of which the filed name matches header, unless the field name is Set-Cookie or Set-Cookie2.</description>
				<parameters>
					<parameter name="header" usage="required" type="String">
						<description>Matches header filed name with this value.</description>					
					</parameter>
				</parameters>
				<return-types>
					<return-type type="String" />
				</return-types>
			</method>
			<method name="getAllResponseHeaders" scope="instance">
				<description>Return all headers from the response, with the exception of those whose field name is Set-Cookie or Set-Cookie2.</description>
				<return-types>
					<return-type type="String" />
				</return-types>
			</method>
			<method name="setRequestHeader" scope="instance">
				<description>Appends an header tot he list of author request headers, or if header is already in the list of author request headers, combines its value with value.</description>
				<parameters>
					<parameter name="header" usage="required" type="String">
						<description>Header name that will be appended.</description>
					</parameter>
					<parameter name="value" usage="required" type="String">
						<description>Header value that will be appended.</description>
					</parameter>
				</parameters>
			</method>
			<method name="overrideMimeType" scope="instance">
				<description>Set the Content-Type header for the response to mime.</description>
				<parameters>
					<parameter name="mime" usage="required" type="String">
						<description>The new Content-Type.</description>
					</parameter>
				</parameters>
			</method>
			<method name="abort" scope="instance">
				<description>Cancels any network activity.</description>
			</method>			
			<method name="always" scope="instance">
				<description>Add handlers to be called when the Deferred object is either resolved or rejected.</description>
				<return-types>
					<return-type type="Deferred" />
				</return-types>
				<parameters>
					<parameter name="alwaysCallback" usage="required" type="Function">
						<description>A function, or array of functions, that is called when the Deferred is resolved or rejected.</description>
					</parameter>
					<parameter name="alwaysCallback" usage="optional" type="Function">
						<description>Optional additional functions, or arrays of functions.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Attach a callback for both success and error.
	$.get("test.php").always(function() {
		alert("$.get completed with success or error callback arguments");
	});</example>
				</examples>				
			</method>
			
			<method name="done" scope="instance">
				<description>Add handlers to be called when the Deferred object is resolved.</description>
				<return-types>
					<return-type type="Deferred" />
				</return-types>
				<parameters>
					<parameter name="doneCallbacks" usage="required" type="Function">
						<description>A function, or array of functions, that is called when the Deferred is resolved.</description>
					</parameter>
					<parameter name="doneCallback" usage="optional" type="Function">
						<description>Optional additional functions, or arrays of functions.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Resolve a Deferred object when the user clicks a button,
triggering a number of callback functions:
	var dfd = $.Deferred();
	dfd.done([fn1, fn2], fn3, [fn2, fn1]);
	$("button").bind("click", function() {
		dfd.resolve("and");
	});</example>
				</examples>
			</method>
			
			<method name="fail" scope="instance">
				<description>Add handlers to be called when the Deferred object is rejected.</description>
				<return-types>
					<return-type type="Deferred" />
				</return-types>
				<parameters>
					<parameter name="failCallbacks" usage="required" type="Function">
						<description>A function, or array of functions, that is called when the Deferred is rejected.</description>
					</parameter>
					<parameter name="failCallback" usage="optional" type="Function">
						<description>Optional additional functions, or arrays of functions.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$.get("test.php")
		.done(function(){alert("$.get succeeded");})
		.fail(function(){alert("$.get failed!");});</example>
				</examples>
			</method>
			
			<method name="notify" scope="instance">
				<description>Call the progressCallbacks on a Deferred object with the given args.</description>
				<return-types>
					<return-type type="Deferred" />
				</return-types>
				<parameters>
					<parameter name="args" usage="optional" type="Object">
						<description>Optional arguments that are passed to the progressCallbacks.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="notifyWith" scope="instance">
				<description>Call the progressCallbacks on a Deferred object with the given context and args.</description>
				<return-types>
					<return-type type="Deferred" />
				</return-types>
				<parameters>
					<parameter name="context" usage="required" type="Object">
						<description>Context passed to the progressCallbacks as the this object.</description>
					</parameter>
					<parameter name="args" usage="optional" type="Object">
						<description>Optional arguments that are passed to the progressCallbacks.</description>
					</parameter>
				</parameters>				
			</method>
			
			<method name="progress" scope="instance">
				<description>Add handlers to be called when the Deferred object generates progress notifications.</description>
				<return-types>
					<return-type type="Deferred" />
				</return-types>
				<parameters>
					<parameter name="progressCallbacks" usage="required" type="Function">
						<description>A function, or array of functions, that is called when the Deferred generates progress notifications.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="promise" scope="instance">
				<description>Return a Deferred's Promise object.</description>
				<return-types>
					<return-type type="Promise" />
				</return-types>
				<parameters>
					<parameter name="target" usage="optional" type="Object">
						<description>Object onto which the promise methods have to be attached.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Use the target argument to promote an existing object to a Promise:
	defer = $.Deferred();
	defer.promise(obj);
	defer.resolve("John");
	obj.done(function(name) {
		obj.hello(name);  // will alert "Hello John"
	}).hello("Karl"); // will alert "Hello Karl"</example>
				</examples>
			</method>
			
			<method name="reject" scope="instance">
				<description>Reject a Deferred object and call any failCallbacks with the given args.</description>
				<return-types>
					<return-type type="Deferred" />
				</return-types>
				<parameters>
					<parameter name="args" usage="optional" type="Object">
						<description>Optional arguments that are passed to the failCallbacks.</description>
					</parameter>
				</parameters>				
			</method>
			
			<method name="rejectWith" scope="instance">
				<description>Reject a Deferred object and call any failCallbacks with the given context and args.</description>
				<return-types>
					<return-type type="Deferred" />
				</return-types>
				<parameters>
					<parameter name="context" usage="required" type="Object">
						<description>Context passed to the failCallbacks as the this object.</description>
					</parameter>
					<parameter name="args" usage="optional" type="Object">
						<description>Optional arguments that are passed to the failCallbacks.</description>
					</parameter>
				</parameters>				
			</method>
			
			<method name="resolve" scope="instance">
				<description>Resolve a Deferred object and call any doneCallbacks with the given args.</description>
				<return-types>
					<return-type type="Deferred" />
				</return-types>
				<parameters>
					<parameter name="args" usage="optional" type="Object">
						<description>Optional arguments that are passed to the doneCallbacks.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="resolveWith" scope="instance">
				<description>Resolve a Deferred object and call any doneCallbacks with the given context and args.</description>
				<return-types>
					<return-type type="Deferred" />
				</return-types>
				<parameters>
					<parameter name="context" usage="required" type="Object">
						<description>Context passed to the doneCallbacks as the this object.</description>
					</parameter>
					<parameter name="args" usage="optional" type="Object">
						<description>Optional arguments that are passed to the doneCallbacks.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="state" scope="instance">
				<description>Determine the current state of a Deferred object.  Return &quot;pending&quot;, &quot;resolved&quot; or &quot;rejected&quot;.</description>
				<return-types>
					<return-type type="String" />
				</return-types>
			</method>
			
			<method name="then" scope="instance">
				<description>Add handlers to be called when the Deferred object is resolved or rejected.</description>
				<return-types>
					<return-type type="Promise" />
				</return-types>
				<parameters>
					<parameter name="doneCallbacks" usage="required" type="Function">
						<description>A function, or array of functions, called when the Deferred is resolved.</description>
					</parameter>
					<parameter name="failCallbacks" usage="required" type="Function">
						<description>A function, or array of functions, called when the Deferred is rejected.</description>
					</parameter>
				</parameters>
				<examples>
					<example>
	$.get("test.php").then(
		function() { alert("$.get succeeded"); },
		function() { alert("$.get failed!"); }
	);</example>
				</examples>
			</method>
			
			<method name="then" scope="instance">
				<description>Add handlers to be called when the Deferred object is resolved or rejected.</description>
				<return-types>
					<return-type type="Promise" />
				</return-types>
				<parameters>
					<parameter name="doneCallbacks" usage="required" type="Function">
						<description>A function, or array of functions, called when the Deferred is resolved.</description>
					</parameter>
					<parameter name="failCallbacks" usage="required" type="Function">
						<description>A function, or array of functions, called when the Deferred is rejected.</description>
					</parameter>
					<parameter name="progressCallbacks" usage="optional" type="Function">
						<description>A function, or array of function, called when the Deferred notifies progress.</description>
					</parameter>
				</parameters>
			</method>
			
			<method name="pipe" scope="instance">
				<description>Utility method to filter and/or chain Deferreds.</description>
				<return-types>
					<return-type type="Promise" />
				</return-types>
				<parameters>
					<parameter name="doneFilter" usage="optional" type="Function">
						<description>An optional function that is called when the Deferred is resolved.</description>
					</parameter>
					<parameter name="failFilter" usage="optional" type="Function">
						<description>An optional function that is called when the Deferred is rejected.</description>
					</parameter>
				</parameters>
				<examples>
					<example>Filter resolve value.
	var defer = $.Deferred(),
	    filtered = defer.pipe(function(value) {
	    	return value * 2;
	    });</example>
				</examples>
			</method>
			
			<method name="pipe" scope="instance">
				<description>Utility method to filter and/or chain Deferreds.</description>
				<return-types>
					<return-type type="Promise" />
				</return-types>
				<parameters>
					<parameter name="doneFilter" usage="optional" type="Function">
						<description>An optional function that is called when the Deferred is resolved.</description>
					</parameter>
					<parameter name="failFilter" usage="optional" type="Function">
						<description>An optional function that is called when the Deferred is rejected.</description>
					</parameter>
					<parameter name="progressFilter" usage="optional" type="Function">
						<description>An optional function that is&lt;br&gt;called when progress notifications are sent to the Deferred.</description>
					</parameter>
				</parameters>
			</method>			


		</methods>
	</class>
	
	<class type="jQuery.Event">
		<properties>
			<property name="currentTarget" type="Element" scope="instance">
				<description>The current DOM element within the event bubbling phase.</description>
			</property>
			<property name="data" type="Map" scope="instance">
				<description>An optional data map passed to an event method when the current executing handler is bound.</description>
			</property>
			<property name="delegateTarget" type="Element" scope="instance">
				<description>The element where the currently-called jQuery event handler was attached.</description>
			</property>		
			<property name="namespace" type="String" scope="instance">
				<description>The namespace specified when the event was triggered.</description>
			</property>
			<property name="pageX" type="Number" scope="instance">
				<description>The mouse position relative to the left edge of the document.</description>
			</property>
			<property name="pageY" type="Number" scope="instance">
				<description>The mouse position relative to the top edge of the document.</description>
			</property>
			<property name="relatedTarget" type="Element" scope="instance">
				<description>The other DOM element involved in the event, if any.</description>
			</property>
			<property name="result" type="Object" scope="instance">
				<description>The last value returned by an event handler that was triggered by this event, unless the value was undefined.</description>
			</property>
			<property name="target" type="Element" scope="instance">
				<description>The DOM element that initiated the event.</description>
			</property>
			<property name="timestamp" type="Number" scope="instance">
				<description>The difference in milliseconds between the time the browser created the event and January 1, 1970.</description>
			</property>
			<property name="type" type="String" scope="instance">
				<description>Describes the nature of the event.</description>
			</property>
			<property name="which" type="Number" scope="instance">
				<description>For key or mouse events, this property indicates the specific key or button that was pressed.</description>
			</property>
			<property name="altKey" type="Boolean" scope="instance">
				<description>true if the Alt (or Option, on Mac) key was active when the key event was generated.  Read only.</description>
			</property>
			<property name="bubbles" type="Boolean" scope="instance">
				<description>A boolean indicating whether the event bubles up through the DOM or not.</description>
			</property>
			<property name="button" type="Number" scope="instance">
				<description>The button number that was pressed when the mouse event was fired: Left button=0,
middle button=1 (if present), right button=2.  For mice configured for left handed use in which the button actions are
reversed the values are instead read right from left.  Read only.</description>
			</property>
			<property name="cancelable" type="Boolean" scope="instance">
				<description>A boolean indicating whether the event is cancelable.</description>
			</property>
			<property name="char" type="String" scope="instance">
				<description>The character value of the key.  Read only.</description>
			</property>
			<property name="clientX" type="Number" scope="instance">
				<description>The X coordinate of the mouse pointer in local (DOM content) coordinates.  Read only.</description>
			</property>
			<property name="clientY" type="Number" scope="instance">
				<description>The Y coordinate of the mouse pointer in local (DOM content) coordinates.  Read only.</description>
			</property>
			<property name="ctrlKey" type="Boolean" scope="instance">
				<description>true if the Control key was active when the key event was generated. Read only.</description>
			</property>
			<property name="eventPhase" type="Number" scope="instance">
				<description>Indicates which phase of the event flow is currently being evaluated. Returns an integer value
represented by 3 constants:  Event.CAPTURING_PHASE (1), Event.AT_TARGET (2), or Event.BUBBLING_PHASE (3).</description>
			</property>
			<property name="metaKey" type="Boolean" scope="instance">
				<description>true if the Meta (or Command, on Mac) key was active when the key event was generated. Read only.</description>
			</property>			
			<property name="screenX" type="Number" scope="instance">
				<description>The X coordinate of the mouse pointer in global (screen) coordinates.  Read only.</description>
			</property>
			<property name="screenY" type="Number" scope="instance">
				<description>The Y coordinate of the mouse pointer in global (screen) coordinates.  Read only.</description>
			</property>
			<property name="shiftKey" type="Boolean" scope="instance">
				<description>true if the Shift key was active when the key event was generated.  Read only.</description>
			</property>
		</properties>
		
		<methods>
			<method name="isDefaultPrevented" scope="instance">
				<description>Return wether event.preventDefault() was ever called on this object.</description>
				<return-types>
					<return-type type="Boolean" />
				</return-types>
			</method>
			<method name="isImmediatePropagationStopped" scope="instance">
				<description>Return wether event.stopImmediatePropogatin() was ever called on this event object.</description>
				<return-types>
					<return-type type="Boolean" />
				</return-types>
			</method>
			<method name="isPropagationStopped" scope="instance">
				<description>Return whether event.stopPropagation() was ever called on this event object.</description>
				<return-types>
					<return-type type="Boolean" />
				</return-types>
			</method>
			<method name="preventDefault" scope="instance">
				<description>If this method is called, the default action of the event will not be triggered.</description>				
			</method>
			<method name="stopImmediatePropagation" scope="instance">
				<description>Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.</description>				
			</method>
			<method name="stopPropagation" scope="instance">
				<description>Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.</description>
			</method>
		</methods>
	</class>
	
	<class type="jQuery.fx">
		<properties>
			<property name="interval" type="Number" scope="instance">
				<description>The rate (in milliseconds) at which animations fire.</description>
			</property>
			<property name="off" type="Boolean" scope="instance">
				<description>Globally disable all animations.</description>
			</property>
		</properties>
	</class>
</javascript>

