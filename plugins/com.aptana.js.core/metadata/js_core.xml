<?xml version="1.0" encoding="UTF-8"?>
<javascript>
  <class type="Arguments" superclass="Object">
    <description>An array of parameters passed to a function.</description>
	<browsers>
		<browser platform="IE" version="4.0+"/>
		<browser platform="Mozilla" version="1.0+"/>
		<browser platform="Netscape" version="3.0+"/>
		<browser platform="Opera" version="7.0+" />
		<browser platform="Chrome" version="5.0+" />
		<browser platform="Safari" version="1.0+" />
	</browsers>
	    <constructors>
	      <constructor visibility="internal">
	        <description>Creates a new instance of the Arguments array.</description>
	        <return-types>
	          <return-type type="Arguments"/>
	        </return-types>
	      </constructor>
	    </constructors>  
    <properties>
      <property name="callee" type="String" access="read-write">
        <description>Name of the function being executed.</description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.2"/>
		  <specification name="Deprecated by JavaScript 1.4"/>
          <specification name="JScript 5.5"/>
          <specification name="ECMAScript v1"/>
        </availability>
				<example>&lt;h3&gt;Example: Using &lt;code&gt;arguments.callee&lt;/code&gt; in an anonymous recursive function &lt;/h3&gt;
&lt;p&gt;A recursive function must be able to refer to itself. Typically, a function refers to itself by its name. However, an anonymous function does not have a name, and if there is no accessible variable referring to it, i.e. the function is not assigned to any variable, the function cannot refer to itself. (Anonymous functions can be created by a function expression or the &lt;code&gt;Function&lt;/code&gt; constructor.) This is where &lt;code&gt;arguments.callee&lt;/code&gt; comes in.&lt;/p&gt;

&lt;p&gt;The following example defines a function, which, in turn, defines and returns a factorial function.&lt;/p&gt;
&lt;pre&gt;function makeFactorialFunc() {
   alert('making a factorial function!');
   return function(x) {
      if (x &lt;= 1)
         return 1;
      return x * arguments.callee(x - 1);
   };
}

var result = makeFactorialFunc()(5); // returns 120 (5 * 4 * 3 * 2 * 1)
&lt;/pre&gt;
</example>
		<remarks>&lt;p&gt;&lt;code&gt;callee&lt;/code&gt; is a property of the arguments local variable 
			available within all function objects; &lt;code&gt;callee&lt;/code&gt; as a property of &lt;code&gt;Function.arguments&lt;/code&gt; is no longer used.		
			(&lt;code&gt;Function.arguments&lt;/code&gt; itself is also deprecated.)&lt;/p&gt;

			&lt;p&gt;&lt;code&gt;arguments.callee&lt;/code&gt; allows anonymous functions to refer to themselves, which is 
			necessary for recursive anonymous functions.&lt;/p&gt;

			&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; keyword does not refer to the currently executing function. Use the &lt;code&gt;callee&lt;/code&gt; property to refer to a function within the function body.&lt;/p&gt;</remarks>
      </property>
      <property name="caller" type="String" access="read">
		<availability>
			<specification name="JavaScript 1.2"/>
			<specification name="Deprecated by JavaScript 1.3"/>
		</availability>
		<example>&lt;h3&gt;Example: Checking the value of &lt;code&gt;arguments.caller&lt;/code&gt; in a function&lt;/h3&gt;

&lt;p&gt;The following code checks the value of &lt;code&gt;arguments.caller&lt;/code&gt; in a function.&lt;/p&gt;
&lt;pre&gt;function myFunc() {
   if (arguments.caller == null) {
      return ("The function was called from the top!");
   } else
      return ("This function's caller was " + arguments.caller);
}
&lt;/pre&gt;
</example>
		<remarks>&lt;p&gt;&lt;code&gt;arguments.caller&lt;/code&gt; can no longer be used. Use the non-standard &lt;code&gt;caller&lt;/code&gt; property of the function instead.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;caller&lt;/code&gt; property is available only within the body of a function.&lt;/p&gt;
&lt;p&gt;If the currently executing function was invoked by the top level of a JavaScript program, the value of &lt;code&gt;caller&lt;/code&gt; is null.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; keyword does not refer to the currently executing function, so you must refer to functions and &lt;code&gt;Function&lt;/code&gt; objects by name, even within the function body.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;caller&lt;/code&gt; property is a reference to the calling function, so:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;If you use it in a string context, you get the result of calling &lt;code&gt;functionName.toString&lt;/code&gt;, i.e. the decompiled canonical source form of the function.&lt;/li&gt;
&lt;li&gt;You can also call the calling function, if you know what arguments it might want. Thus, a called function can call its caller without knowing the name of the particular caller, provided it knows that all of its callers have the same form and fit, and that they will not call the called function again unconditionally (which would result in infinite recursion).&lt;/li&gt;&lt;/ul&gt;</remarks>
		<description>Name of the function that called the function being executed.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Mozilla" version="1.0" />
		</browsers>
		</property>
		<property name="length" type="Number" access="read-write">
        <description>Number of arguments passed to the function.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.1"/>
          <specification name="JScript 2"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <references>
          <reference name="Array.length"/>
          <reference name="Function.length"/>
        </references>
      </property>
    </properties>
	<references>
    	<reference name="Function"/>
    </references>
    <availability>
      <specification name="JavaScript 1.1"/>
      <specification name="JScript 2.0"/>
      <specification name="ECMAScript v1"/>
    </availability>
  </class>
  
  <class type="Array" superclass="Object">
    <description>An array is an ordered list of elements.</description>
	<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
	</browsers>
    <constructors>
      <constructor>
        <description>Constructs a new instance of an array.</description>
        <parameters>
          <parameter name="arrayLength" type="Number" usage="required">
            <description>The initial length of the array. You can access this value using the length property. If the value specified is not a number, an array of length 1 is created, with the first element having the specified value. The maximum length allowed for an array is 4,294,967,295.</description>
          </parameter>
          <parameter name="elementN" type="Number" usage="zero-or-more">
            <description>A list of values for the array's elements. When this form is specified, the array is initialized with the specified values as its elements, and the array's length property is set to the number of arguments.</description>
          </parameter>
        </parameters>
        <exceptions>
          <exception type="RangeError">
            <description>Throws RangeError if arrayLength is negative or is larger than 2&lt;sup&gt;32&lt;/sup&gt;-1.</description>
          </exception>
        </exceptions>
        <return-types>
          <return-type type="Array"/>
        </return-types>
      </constructor>
    </constructors>
    <properties>
      <property name="constructor" type="Object" access="read-write">
			<browsers>
				<browser platform="IE" version="4.0+"/>
				<browser platform="Mozilla" version="1.0+"/>
				<browser platform="Netscape" version="3.0+"/>
				<browser platform="Opera" version="7.0+" />
				<browser platform="Chrome" version="5.0+" />
				<browser platform="Safari" version="1.0+" />
			</browsers>
			<availability>
				<specification name="JavaScript 1.1"/>
				<specification name="JScript 2.0"/>
				<specification name="ECMAScript v1"/>
			</availability>
			<references>
				<reference name="Object.constructor"/>
			</references>
			<description>Specifies the function that creates the Array prototype.</description>
		</property>
		<property name="index" type="Number" access="read-write">
			<browsers>
				<browser platform="Mozilla" version="1.0+"/>
				<browser platform="Netscape" version="3.0+"/>
				<browser platform="Opera" version="7.0+" />
			</browsers>
			<availability>
				<specification name="JavaScript 1.2"/>
			</availability>
			<remarks>Only applicable to an array created by a RegExp match.</remarks>
			<description>Zero-based index number for the corresponding string in a RegExp match.</description>
		</property>
		<property name="input" type="String" access="read-write">
			<browsers>
				<browser platform="Mozilla" version="1.0+"/>
				<browser platform="Netscape" version="3.0+"/>
				<browser platform="Opera" version="7.0+" />
			</browsers>
			<availability>
				<specification name="JavaScript 1.2"/>
			</availability>
			<remarks>Only applicable to an array created by a RegExp match.</remarks>
			<description>String in a RegExp match.</description>
		</property>
		<property name="length" type="Number" access="read-write">
    		<description>Integer specifying the number of elements in an array. </description>
    		<availability>
    			<specification name="JavaScript 1.1, JScript 2.0"/>
    			<specification name="ECMAScript v1"/>
   			</availability>
			<browsers>
				<browser platform="IE" version="4.0+"/>
				<browser platform="Mozilla" version="1.0+"/>
				<browser platform="Netscape" version="3.0+"/>
				<browser platform="Opera" version="7.0+" />
				<browser platform="Chrome" version="5.0+" />
				<browser platform="Safari" version="1.0+" />
			</browsers>

        <example>
          &lt;h3&gt;Iterating over an array&lt;/h3&gt;&lt;p&gt;In the following example, the &lt;code&gt;getChoice&lt;/code&gt;
          function uses the &lt;code&gt;length&lt;/code&gt; property to iterate
          over every element in the &lt;code&gt;musicType&lt;/code&gt; array.
          &lt;code&gt;musicType&lt;/code&gt; is a select element on the
          &lt;code&gt;musicForm&lt;/code&gt; form.&lt;/p&gt;&lt;pre&gt;          function getChoice() {
          for (var i = 0; i &amp;lt; document.musicForm.musicType.length; i++) {
          if (document.musicForm.musicType.options[i].selected == true) {
          return document.musicForm.musicType.options[i].text
          }
          }
          }
          &lt;/pre&gt;&lt;h3&gt;Shortening an array&lt;/h3&gt;&lt;p&gt;The following example shortens the array
          &lt;code&gt;statesUS&lt;/code&gt; to a length of 50 if the current
          length is greater than 50.&lt;/p&gt;&lt;pre&gt;          if (statesUS.length &amp;gt; 50) {
          statesUS.length=50
          }
          &lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;The value of the &lt;code&gt;length&lt;/code&gt; property is an
          integer with a positive sign and a value less than 2 to
          the 32 power (2&lt;sup&gt;32&lt;/sup&gt;).&lt;/p&gt;&lt;p&gt;You can set the &lt;code&gt;length&lt;/code&gt; property to
          truncate an array at any time. When you extend an array
          by changing its &lt;code&gt;length&lt;/code&gt; property, the number
          of actual elements does not increase; for example, if you
          set &lt;code&gt;length&lt;/code&gt; to 3 when it is currently 2, the
          array still contains only 2 elements.&lt;/p&gt;
        </remarks>
      </property>
    <property name="prototype" type="Array" access="read-write">
		<availability>
			<specification name="JavaScript 1.1"/>
			<specification name="JScript 2.0"/>
			<specification name="ECMAScript v1"/>
		</availability>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
		<description>Represents the Array prototype object.</description>
	</property>
	</properties>
    <methods>
      <method name="isArray" scope="static">
		<parameters>
			<parameter name="arg" type="Object" usage="required">
				<description>Element to search for in the array.</description>
			</parameter>
		</parameters>
		<return-types>
			<return-type type="Boolean"/>
		</return-types>
		<availability>
			<specification name="ECMAScript v5.1"/>
		</availability>
		<description>Returns a Boolean indicating if the arg is an Array.</description>
		<browsers>
			<browser platform="IE" version="9.0+"/>
			<browser platform="Mozilla" version="4.0+"/>
			<browser platform="Opera" version="10.5+" />
			<browser platform="Chrome" version="7.0+" />
			<browser platform="Safari" version="5.0+" />
		</browsers>
		<return-description>Returns the Boolean value true if the argument is an object whose class internal property is "Array"; otherwise it returns false.</return-description>
	  </method>
      <method name="concat">
        <description>
          Returns a new array comprised of this array joined
          with other array(s) and/or value(s).
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a new array comprised of this array joined with other array(s) and/or value(s).</return-description>
        <parameters>
          <parameter name="valueN" type="Number" usage="one-or-more">
            <description>Arrays and/or values to concatenate to this array.</description>
          </parameter>
        </parameters>
        <references>
          <reference name="Array.join"/>
          <reference name="Array.push"/>
          <reference name="Array.splice"/>
        </references>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v3"/>
        </availability>
        <example>
          &lt;h3&gt;Concatenating two arrays&lt;/h3&gt;&lt;p&gt;The following code concatenates two arrays:&lt;/p&gt;
		  &lt;pre&gt;alpha = new Array("a", "b", "c");
numeric = new Array(1, 2, 3);
alphaNumeric = alpha.concat(numeric); // creates array ["a", "b", "c", 1, 2, 3]&lt;/pre&gt;&lt;h3&gt;Concatenating three arrays&lt;/h3&gt;&lt;p&gt;The following code concatenates three arrays:&lt;/p&gt;&lt;pre&gt;num1 = [1, 2, 3];
num2 = [4, 5, 6];
num3 = [7, 8, 9];
nums = num1.concat(num2,num3) // creates array [1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/pre&gt;&lt;h3&gt;Concatenating values to an array&lt;/h3&gt;&lt;p&gt;The following code concatenates three values to an
          array:&lt;/p&gt;&lt;pre&gt;alpha = ['a', 'b', 'c'];
alphaNumeric = alpha.concat(1, 2, 3); // creates array ["a", "b", "c", 1, 2, 3]&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;&lt;code&gt;concat&lt;/code&gt; does not alter the original
          arrays, but returns a "one level deep" copy that contains
          copies of the same elements combined from the original
          arrays. Elements of the original arrays are copied into
          the new array as follows:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Object references (and not the actual object):
          &lt;code&gt;concat&lt;/code&gt; copies object references into the
          new array. Both the original and new array refer to the
          same object. That is, if a referenced object is
          modified, the changes are visible to both the new and
          original arrays.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Strings and numbers (not String
          and Number
          objects): &lt;code&gt;concat&lt;/code&gt; copies the values of
          strings and numbers into the new array.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Any operation on the new array will have no effect on
          the original arrays, and vice versa.&lt;/p&gt;
        </remarks>
      </method>
      <method name="every">
		<parameters>
			<parameter name="callback" type="Function(Object,Number,Array):Boolean" usage="required">
				<description>Function that tests each element of an array.</description>
			</parameter>
			<parameter name="thisObject" type="Function" usage="zero-or-more">
				<description>Object to use as this when executing callback.</description>
			</parameter>
		</parameters>
		<return-types>
			<return-type type="Boolean"/>
		</return-types>
		<exceptions>
			<exception type="TypeError"/>
		</exceptions>
		<availability>
			<specification name="JavaScript 1.6"/>
			<specification name="Gecko 1.8b2"/>
			<specification name="ECMAScript v5.1"/>
		</availability>
		<example>&lt;h3&gt;Example: Testing size of all array elements &lt;/h3&gt;
&lt;p&gt;The following example tests whether all elements in the array are bigger than 10.&lt;/p&gt;
&lt;pre&gt;function isBigEnough(element, index, array) {
  return (element &gt;= 10);
}
passed = [12, 5, 8, 130, 44].every(isBigEnough);
// passed is false
passed = [12, 54, 18, 130, 44].every(isBigEnough);
// passed is true&lt;/pre&gt;
</example>
		<remarks>&lt;p&gt;&lt;code&gt;every&lt;/code&gt; executes the provided function (&lt;code&gt;callback&lt;/code&gt;) once for each element present in the array until it finds one where &lt;code&gt;callback&lt;/code&gt; returns a false value.  If such an element is found, the test aborts and &lt;code&gt;false&lt;/code&gt; is returned, otherwise (&lt;code&gt;callback&lt;/code&gt; returned a true value for each of the elements) &lt;code&gt;every&lt;/code&gt; will return &lt;code&gt;true&lt;/code&gt;.  Arrays are treated as "dense", meaning that &lt;code&gt;callback&lt;/code&gt; will be invoked for each index less than the array's &lt;code&gt;length&lt;/code&gt;, even if a given index has never been explicitly assigned.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;callback&lt;/code&gt; is invoked with three arguments: the value of the element, the index of the element, and the Array object being traversed.
&lt;/p&gt;&lt;p&gt;If a &lt;code&gt;thisObject&lt;/code&gt; parameter is provided to &lt;code&gt;every&lt;/code&gt;, it will be used as the &lt;code&gt;this&lt;/code&gt; for each invocation of the &lt;code&gt;callback&lt;/code&gt;.  If it is not provided, or is &lt;code&gt;null&lt;/code&gt;, the global object associated with &lt;code&gt;callback&lt;/code&gt; is used instead.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;every&lt;/code&gt; does not mutate the array on which it is called.
&lt;/p&gt;&lt;p&gt;The range of elements processed by &lt;code&gt;every&lt;/code&gt; is set before the first invocation of &lt;code&gt;callback&lt;/code&gt;.  Elements which are appended to the array after the call to &lt;code&gt;every&lt;/code&gt; begins will not be visited by &lt;code&gt;callback&lt;/code&gt;.  If existing elements of the array are changed, or deleted, their value as passed to &lt;code&gt;callback&lt;/code&gt; will be the value at the time &lt;code&gt;every&lt;/code&gt; visits them; elements that are deleted will have the value &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;</remarks>
		<description>Returns true if every element in an array meets the specified criteria.</description>
		<browsers>
			<browser platform="IE" version="9.0+"/>
			<browser platform="Mozilla" version="3.0+"/>			
			<browser platform="Safari" version="3.2+"/>
			<browser platform="Chrome" version="5.0+"/>
			<browser platform="Opera" version="10.1+"/>
		</browsers>
		<return-description>Returns true if every element in an array meets the specified criteria.</return-description>
	</method>
	<method name="filter">
			<parameters>
				<parameter name="callback" type="Function" usage="required">
					<description>Function that tests each element of an array.</description>
				</parameter>
				<parameter name="thisObject" type="Function" usage="optional">
					<description>Object to use as this when executing callback.</description>
				</parameter>
			</parameters>
			<return-types>
				<return-type type="Array"/>
			</return-types>
			<availability>
				<specification name="JavaScript 1.6"/>
				<specification name="Gecko 1.8b2"/>
				<specification name="ECMAScript v5.1"/>
			</availability>
			<exceptions>
				<exception type="TypeError">
					<description>If callback argument is not callable.</description>
				</exception>
			</exceptions>
			<example>&lt;h3&gt;Example: Filtering out all small values&lt;/h3&gt;
&lt;p&gt;The following example uses &lt;code&gt;filter&lt;/code&gt; to create a filtered array that has all elements with values less than 10 removed.&lt;/p&gt;
&lt;pre&gt;function isBigEnough(element, index, array) {
  return (element &gt;= 10);
}
filtered = [12, 5, 8, 130, 44].filter(isBigEnough);&lt;/pre&gt;</example>
			<remarks>&lt;p&gt;&lt;code&gt;filter&lt;/code&gt; calls a provided &lt;code&gt;callback&lt;/code&gt; function once for each element in an array, and constructs a new array of all the values for which &lt;code&gt;callback&lt;/code&gt; returns a true value. The produced array is dense; values which do not pass the &lt;code&gt;callback&lt;/code&gt; test are simply skipped, and are not assigned an index in the new array.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;callback&lt;/code&gt; is invoked with three arguments: the value of the element, the index of the element, and the Array object being traversed.&lt;/p&gt;
&lt;p&gt;If a &lt;code&gt;thisObject&lt;/code&gt; parameter is provided to &lt;code&gt;filter&lt;/code&gt;, it will be used as the &lt;code&gt;this&lt;/code&gt; for each invocation of the &lt;code&gt;callback&lt;/code&gt;.  If it is not provided, or is &lt;code&gt;null&lt;/code&gt;, the global object associated with &lt;code&gt;callback&lt;/code&gt; is used instead.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;filter&lt;/code&gt; does not mutate the array on which it is called.&lt;/p&gt;
&lt;p&gt;The range of elements processed by &lt;code&gt;filter&lt;/code&gt; is set before the first invocation of &lt;code&gt;callback&lt;/code&gt;. Elements which are appended to the array after the call to &lt;code&gt;filter&lt;/code&gt; begins will not be visited by &lt;code&gt;callback&lt;/code&gt;. If existing elements of the array are changed, or deleted, their value as passed to&lt;code&gt;callback&lt;/code&gt; will be the value at the time &lt;code&gt;filter&lt;/code&gt; visits them; elements that are deleted will have the value &lt;code&gt;undefined&lt;/code&gt;.</remarks>
			<description>Creates a new array with all elements that meet the specified criteria.</description>
			<browsers>
				<browser platform="IE" version="9.0+"/>
				<browser platform="Mozilla" version="3.0+"/>			
				<browser platform="Safari" version="3.2+"/>
				<browser platform="Chrome" version="5.0+"/>
				<browser platform="Opera" version="10.1+"/>
			</browsers>
			<return-description>Returns a new array containing elements that met the specified criteria.</return-description>
		</method>
		<method name="forEach">
			<parameters>
				<parameter name="callback" type="Function" usage="required">
					<description>Function to call once on each array element.</description>
				</parameter>
				<parameter name="thisObject" type="Object" usage="optional">
					<description>Object to use as this when executing callback.</description>
				</parameter>
			</parameters>
			<return-types>
				<return-type type="undefined"/>
			</return-types>
			<exceptions>
				<exception type="TypeError">
					<description>It callback is not callable.</description>
				</exception>
			</exceptions>
			<availability>
				<specification name="JavaScript 1.6"/>
				<specification name="Gecko 1.8b2"/>
				<specification name="ECMAScript v5.1"/>
			</availability>
			<example>&lt;h3&gt;Example: Printing the contents of an array&lt;/h3&gt;
&lt;p&gt;The following code prints a line for each element in an array (and presumes the presence of a &lt;code&gt;print&lt;/code&gt; function to call!):&lt;/p&gt;
&lt;pre&gt;function printElt(element, index, array) {
    print("[" + index + "] is " + element);
}
[2, 5, 9].forEach(printElt);
// Prints:
// [0] is 2
// [1] is 5
// [2] is 9&lt;/pre&gt;

&lt;h3&gt;Example: Printing the contents of an array with an object method&lt;/h3&gt;
&lt;p&gt;The following code creates a simple writer object and then uses the &lt;code&gt;writeln&lt;/code&gt; method to write one line per element in the array. (This presumes the presence of a &lt;code&gt;print&lt;/code&gt; function to call!):&lt;/p&gt;

&lt;pre&gt;var writer = {
    sb:       [],
    write:    function (s) {
        this.sb.push(s);
    },
    writeln:  function (s) {
        this.write(s + "\n");
    },
    toString: function () {
        return this.sb.join("");
    }
};

[2, 5, 9].forEach(writer.writeln, writer);
print(writer.toString());

// Prints:
// 2
// 5
// 9&lt;/pre&gt;
			</example>
			<remarks>&lt;p&gt;&lt;code&gt;forEach&lt;/code&gt; executes the provided function (&lt;code&gt;callback&lt;/code&gt;) once for each element present in the array.  Arrays are treated as "dense", meaning that &lt;code&gt;callback&lt;/code&gt; will be invoked for each index less than the array's &lt;code&gt;length&lt;/code&gt;, even if a given index has never been explicitly assigned.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;callback&lt;/code&gt; is invoked with three arguments: the value of the element, the index of the element, and the Array object being traversed.&lt;/p&gt;
&lt;p&gt;If a &lt;code&gt;thisObject&lt;/code&gt; parameter is provided to &lt;code&gt;forEach&lt;/code&gt;, it will be used as the &lt;code&gt;this&lt;/code&gt; for each invocation of the &lt;code&gt;callback&lt;/code&gt;.  If it is not provided, or is &lt;code&gt;null&lt;/code&gt;, the global object associated with &lt;code&gt;callback&lt;/code&gt; is used instead.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;forEach&lt;/code&gt; does not mutate the array on which it is called.&lt;/p&gt;
&lt;p&gt;The range of elements processed by &lt;code&gt;forEach&lt;/code&gt; is set before the first invocation of &lt;code&gt;callback&lt;/code&gt;.  Elements which are appended to the array after the call to &lt;code&gt;forEach&lt;/code&gt; begins will not be visited by &lt;code&gt;callback&lt;/code&gt;.  If existing elements of the array are changed, or deleted, their value as passed to &lt;code&gt;callback&lt;/code&gt; will be the value at the time &lt;code&gt;forEach&lt;/code&gt; visits them; elements that are deleted will have the value &lt;code&gt;undefined&lt;/code&gt;.
</remarks>
			<description>Executes the specified function once for each element in an array.</description>
			<browsers>
				<browser platform="IE" version="9.0+"/>
				<browser platform="Mozilla" version="3.0+"/>			
				<browser platform="Safari" version="3.2+"/>
				<browser platform="Chrome" version="5.0+"/>
				<browser platform="Opera" version="10.1+"/>
			</browsers>
			<return-description>Returns the result of callback for each element.</return-description>
		</method>
		<method name="indexOf">
		<parameters>
			<parameter name="searchElement" type="Object" usage="required">
				<description>Element to search for in the array.</description>
			</parameter>
			<parameter name="fromIndex" type="Number" usage="optional">
				<description>Index number to begin searching the array. Default is 0, which searches the whole array.</description>
			</parameter>
		</parameters>
		<references>
			<reference name="lastIndexOf"/>
		</references>
		<return-types>
			<return-type type="Number"/>
		</return-types>
		<availability>
			<specification name="JavaScript 1.6"/>
			<specification name="Gecko 1.8b2"/>
			<specification name="ECMAScript v5.1"/>
		</availability>
		<example>&lt;h3&gt;Example: Using indexOf&lt;/h3&gt;
&lt;p&gt;The following example uses &lt;code&gt;indexOf&lt;/code&gt; to locate values in an array.&lt;/p&gt;
&lt;pre&gt;array = [2, 5, 9];
index = array.indexOf(2);
// index is 0
index = array.indexOf(7);
// index is -1
&lt;/pre&gt;
&lt;h3&gt;Example: Finding all the occurrences of an element&lt;/h3&gt;
&lt;p&gt;The following example uses &lt;code&gt;indexOf&lt;/code&gt; to find all the indices of an element in a given array, using &lt;code&gt;push&lt;/code&gt; to add them to another array as they are found.&lt;/p&gt;
&lt;pre&gt;indices = [];
idx = array.indexOf(element)
while (idx != -1) {
   indices.push(idx);
   idx = array.indexOf(element, idx + 1);
}&lt;/pre&gt;
</example>
		<remarks>&lt;p&gt;&lt;code&gt;indexOf&lt;/code&gt; compares &lt;code&gt;searchElement&lt;/code&gt; to elements of the Array using strict equality (the same method used by the triple-equals (===) operator).&lt;/p&gt;
		&lt;p&gt;For the &lt;code&gt;fromIndex&lt;/code&gt; parameter, if the specified &lt;code&gt;fromIndex&lt;/code&gt; is greater than or equal to the length of the array, &lt;code&gt;lastIndexOf&lt;/code&gt; does not search the array and returns -1. If the specified &lt;code&gt;fromIndex&lt;/code&gt; is negative, the search start position is the offset from the back end of the array; however, the array is still searched from front to back.&lt;/p&gt;
		</remarks>
		<description>Returns the first index number at which the specified element can be found in the array. Returns -1 if the element is not present.</description>
		<browsers>
			<browser platform="IE" version="9.0+"/>
			<browser platform="Mozilla" version="3.0+"/>			
			<browser platform="Safari" version="3.2+"/>
			<browser platform="Chrome" version="5.0+"/>
			<browser platform="Opera" version="10.1+"/>
		</browsers>
		<return-description>Returns the first index number at which the specified element can be found in the array, or -1 if it is not present.</return-description>
	</method>
	<method name="join">
        <description>Joins all elements of an array into a string.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a string version of the array.</return-description>
        <parameters>
          <parameter name="separator" type="String" usage="optional">
            <description>Specifies a string to separate each element of the array. The separator is converted to a string if necessary. If omitted, the array elements are sparated with a comma.</description>
          </parameter>
        </parameters>
        <references>
          <reference name="String.split"/>
          <reference name="reverse"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.1"/>
          <specification name="JScript 2.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Joining an array three different ways&lt;/h3&gt;&lt;p&gt;The following example creates an array,
          &lt;code&gt;a&lt;/code&gt;, with three elements, then joins the array
          three times: using the default separator, then a comma
          and a space, and then a plus.&lt;/p&gt;&lt;pre&gt;a = new Array("Wind","Rain","Fire")
myVar1=a.join()      // assigns "Wind,Rain,Fire" to myVar1
myVar2=a.join(", ")  // assigns "Wind, Rain, Fire" to myVar2
myVar3=a.join(" + ") // assigns "Wind + Rain + Fire" to myVar3&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;The string conversions of all array elements are
          joined into one string.&lt;/p&gt;
        </remarks>
      </method>
      <method name="lastIndexOf">
		<parameters>
			<parameter name="searchElement" type="Object" usage="required">
				<description>Element to search for in the array.</description>
			</parameter>
			<parameter name="fromIndex" type="Number" usage="optional">
				<description>Index number to begin searching the array backwards from. Default is the last element in the array, which searches the whole array.</description>
			</parameter>
		</parameters>
		<references>
			<reference name="indexOf"></reference>
		</references>
		<return-types>
			<return-type type="Number"/>
		</return-types>
		<availability>
			<specification name="JavaScript 1.6"/>
			<specification name="Gecko 1.8b2"/>
			<specification name="ECMAScript v5.1"/>
		</availability>
		<example>
		&lt;h3&gt;Example: Using lastIndexOf&lt;/h3&gt;
&lt;p&gt;The following example uses &lt;code&gt;lastIndexOf&lt;/code&gt; to locate values in an array.&lt;/p&gt;
&lt;pre&gt;array = [2, 5, 9, 2];
index = array.lastIndexOf(2);
// index is 3
index = array.lastIndexOf(7);
// index is -1
index = array.lastIndexOf(2, 3);
// index is 3
index = array.lastIndexOf(2, 2);
// index is 0
index = array.lastIndexOf(2, -2);
// index is 0
index = array.lastIndexOf(2, -1);
// index is 3
&lt;/pre&gt;
&lt;h3&gt;Example: Finding all the occurrences of an element&lt;/h3&gt;
&lt;p&gt;The following example uses &lt;code&gt;lastIndexOf&lt;/code&gt; to find all the indices of an element in a given array, using &lt;code&gt;push&lt;/code&gt; to add them to another array as they are found.&lt;/p&gt;
&lt;pre&gt;indices = [];
idx = array.lastIndexOf(element)
while (idx != -1) {
   indices.push(idx);
   idx = (idx &gt; 0 ? array.lastIndexOf(element, idx - 1) : -1);
}
&lt;/pre&gt;
&lt;p&gt;Note that we have to handle the case &lt;code&gt;idx == 0&lt;/code&gt; separately here because the element will always be found regardsless the &lt;code&gt;fromIndex&lt;/code&gt; parameter if it is the first element of the array. This is different from the &lt;code&gt;indexOf&lt;/code&gt; method.&lt;/p&gt;
		</example>
		<remarks>&lt;p&gt;&lt;code&gt;indexOf&lt;/code&gt; compares &lt;code&gt;searchElement&lt;/code&gt; to elements of the Array using strict equality (the same method used by the triple-equals (===) operator).&lt;/p&gt;
		&lt;p&gt;For the &lt;code&gt;fromIndex&lt;/code&gt; parameter, if the specified &lt;code&gt;fromIndex&lt;/code&gt; is greater than or equal to the length of the array, &lt;code&gt;lastIndexOf&lt;/code&gt; does not search the array and returns -1. If the specified &lt;code&gt;fromIndex&lt;/code&gt; is negative, the search start position is the offset from the start  of the array; however, the array is still searched from back to front.&lt;/p&gt;</remarks>
		<description>Searches an array backwards starting from fromIndex and returns the last index number at which the specified element can be found in the array. Returns -1 if the element is not present.</description>
		<browsers>
			<browser platform="IE" version="9.0+"/>
			<browser platform="Mozilla" version="3.0+"/>			
			<browser platform="Safari" version="3.2+"/>
			<browser platform="Chrome" version="5.0+"/>
			<browser platform="Opera" version="10.1+"/>
		</browsers>
		<return-description>Returns the last index number at which the specified element can be found in the array. Returns -1 if the element is not present.</return-description>
	</method>
	<method name="map">
		<parameters>
		<parameter name="callback" type="Function" usage="required">
			<description>Function that creates an element of the new Array from an element of the current one.</description>
		</parameter>
		<parameter name="thisObject" type="Object" usage="optional">
			<description>Object to use as this when executing callback.</description>
		</parameter>
		</parameters>
		<return-types>
			<return-type type="Array" />
		</return-types>
		<exceptions>
			<exception type="TypeError">
				<description>If callback is not callable.</description>
			</exception>
		</exceptions>
		<availability>
			<specification name="JavaScript 1.6"/>
			<specification name="Gecko 1.8b2"/>
			<specification name="ECMAScript v5.1"/>
		</availability>
		<example>&lt;h3&gt;Example: Upper-casing the strings in an array &lt;/h3&gt;
&lt;p&gt;The following code creates a new array which contains upper-case versions of all the strings in the original.&lt;/p&gt;
&lt;pre&gt;strings = ["hello", "Array", "WORLD"];
function makeUpperCase(v)
{
    return v.toUpperCase();
}
uppers = strings.map(makeUpperCase);
// uppers is now ["HELLO", "ARRAY", "WORLD"]
// strings is unchanged

&lt;/pre&gt;
&lt;h3&gt;Example: Mapping an array of numbers to an array of square roots &lt;/h3&gt;
&lt;p&gt;The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.
&lt;/p&gt;
&lt;pre&gt;numbers = [1, 4, 9];
roots = numbers.map(Math.sqrt);
// roots is now [1, 2, 3]
// numbers is still [1, 4, 9]
&lt;/pre&gt;</example>
		<remarks>&lt;p&gt;&lt;code&gt;map&lt;/code&gt; calls a provided &lt;code&gt;callback&lt;/code&gt; function once for each element in an array, in order, and constructs a new array from the results.  Arrays are treated as "dense", meaning that &lt;code&gt;callback&lt;/code&gt; will be invoked for each index less than the array's &lt;code&gt;length&lt;/code&gt;, even if a given index has never been explicitly assigned.
&lt;/p&gt;&lt;p&gt;&lt;code&gt;callback&lt;/code&gt; is invoked with three arguments: the value of the element, the index of the element, and the Array object being traversed.
&lt;/p&gt;&lt;p&gt;If a &lt;code&gt;thisObject&lt;/code&gt; parameter is provided to &lt;code&gt;map&lt;/code&gt;, it will be used as the &lt;code&gt;this&lt;/code&gt; for each invocation of the &lt;code&gt;callback&lt;/code&gt;.  If it is not provided, or is &lt;code&gt;null&lt;/code&gt;, the global object associated with &lt;code&gt;callback&lt;/code&gt; is used instead.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;map&lt;/code&gt; does not mutate the array on which it is called.
&lt;/p&gt;&lt;p&gt;The range of elements processed by &lt;code&gt;map&lt;/code&gt; is set before the first invocation of &lt;code&gt;callback&lt;/code&gt;.  Elements which are appended to the array after the call to &lt;code&gt;map&lt;/code&gt; begins will not be visited by &lt;code&gt;callback&lt;/code&gt;.  If existing elements of the array are changed, or deleted, their value as passed to &lt;code&gt;callback&lt;/code&gt; will be the value at the time &lt;code&gt;map&lt;/code&gt; visits them; elements that are deleted will have the value &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;</remarks>
		<description>Creates a new array with the results of calling a provided function on every element in this array.</description>
		<browsers>
			<browser platform="IE" version="9.0+"/>
			<browser platform="Mozilla" version="3.0+"/>			
			<browser platform="Safari" version="3.2+"/>
			<browser platform="Chrome" version="5.0+"/>
			<browser platform="Opera" version="10.1+"/>
		</browsers>
		<return-description>Returns a new array.</return-description>
	</method>
	<method name="pop">
        <description>
          Removes the last element from an array and returns
          that element. This method changes the length of the
          array.
        </description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 5.5"/>
          <specification name="ECMAScript v3"/>
        </availability>
        <example>
          &lt;h3&gt;Removing the last element of an array&lt;/h3&gt;&lt;p&gt;The following code creates the myFish array containing
          four elements, then removes its last element.&lt;/p&gt;&lt;pre&gt;myFish = ["angel", "clown", "mandarin", "surgeon"];
popped = myFish.pop();&lt;/pre&gt;
        </example>
        <references>
          <reference name="push"/>
          <reference name="shift"/>
          <reference name="unshift"/>
        </references>
      </method>
      <method name="push">
        <description>
          Adds one or more elements to the end of an array and
          returns the new length of the array. This method changes
          the length of the array.
        </description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the new length of the array.</return-description>
        <parameters>
          <parameter name="element1, ..., elementN" type="Object" usage="one-or-more">
            <description>The elements to add to the end of the array.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 5.5"/>
          <specification name="ECMAScript v3"/>
        </availability>
        <example>
          &lt;h3&gt;Adding elements to an array&lt;/h3&gt;&lt;p&gt;The following code creates the myFish array containing
          two elements, then adds two elements to it. After the
          code executes, pushed contains 4. (In JavaScript 1.2,
          pushed contains "lion" after the code executes.)&lt;/p&gt;&lt;pre&gt;myFish = ["angel", "clown"];
pushed = myFish.push("drum", "lion");&lt;/pre&gt;
        </example>
        <references>
          <reference name="pop"/>
          <reference name="shift"/>
          <reference name="unshift"/>
        </references>
        <remarks>
          &lt;p&gt;The behavior of the &lt;code&gt;push&lt;/code&gt; method is
          analogous to the &lt;code&gt;push&lt;/code&gt; function in Perl 4 (not Perl 5).&lt;/p&gt;
        </remarks>
      </method>
      <method name="reduce">
			<parameters>
				<parameter name="callback" type="Function(Object,Object,Number,Array)" usage="required">
					<description>Function called once for each element of an array, in ascending order.</description>
				</parameter>
				<parameter name="initialValue" type="Object" usage="optional">
					<description>Initial value to use for accumulator.</description>
				</parameter>
			</parameters>
			<return-types>
				<return-type type="Object"/>
			</return-types>
			<availability>
				<specification name="JavaScript 1.6"/>
				<specification name="Gecko 1.8b2"/>
				<specification name="ECMAScript v5.1"/>
			</availability>
			<exceptions>
				<exception type="TypeError">
					<description>If callback argument is not callable.</description>
				</exception>
			</exceptions>
			<remarks>&lt;p&gt;&lt;span class="nh"&gt;NOTE&lt;/span&gt; The &lt;code&gt;reduce&lt;/code&gt; function is intentionally generic; it does not require that its
          &lt;b&gt;this&lt;/b&gt; value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.
          Whether the &lt;code&gt;reduce&lt;/code&gt; function can be applied successfully to a host object is implementation-dependent.&lt;/p&gt;</remarks>
			<browsers>
				<browser platform="IE" version="9.0+"/>
				<browser platform="Mozilla" version="3.0+"/>			
				<browser platform="Safari" version="4.0+"/>
				<browser platform="Chrome" version="5.0+"/>
				<browser platform="Opera" version="10.5+"/>
			</browsers>
			<return-description>Returns an accumulated value generated by calling callback function on each element fo the array, in ascending order.</return-description>
		</method>
		<method name="reduceRight">
			<parameters>
				<parameter name="callback" type="Function(Object,Object,Number,Array)" usage="required">
					<description>Function called once for each element of an array, in descending order.</description>
				</parameter>
				<parameter name="initialValue" type="Object" usage="optional">
					<description>Initial value to use for accumulator.</description>
				</parameter>
			</parameters>
			<return-types>
				<return-type type="Object"/>
			</return-types>
			<availability>
				<specification name="JavaScript 1.6"/>
				<specification name="Gecko 1.8b2"/>
				<specification name="ECMAScript v5.1"/>
			</availability>
			<exceptions>
				<exception type="TypeError">
					<description>If callback argument is not callable.</description>
				</exception>
			</exceptions>
			<remarks>&lt;p&gt;&lt;span class="nh"&gt;NOTE&lt;/span&gt; The &lt;code&gt;reduceRight&lt;/code&gt; function is intentionally generic; it does not require that its
          &lt;b&gt;this&lt;/b&gt; value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.
          Whether the &lt;code&gt;reduceRight&lt;/code&gt; function can be applied successfully to a host object is implementation-dependent.&lt;/p&gt;</remarks>
			<browsers>
				<browser platform="IE" version="9.0+"/>
				<browser platform="Mozilla" version="3.0+"/>			
				<browser platform="Safari" version="4.0+"/>
				<browser platform="Chrome" version="5.0+"/>
				<browser platform="Opera" version="10.5+"/>
			</browsers>
			<return-description>Returns an accumulated value generated by calling callback function on each element fo the array, in descending order.</return-description>
		</method>
      <method name="reverse">
        <description>
          Transposes the elements of an array: the first array
          element becomes the last and the last becomes the
          first.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the array with its elements reversed.</return-description>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.1"/>
          <specification name="JScript 2.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Reversing the elements in an array&lt;/h3&gt;&lt;p&gt;The following example creates an array myArray,
          containing three elements, then reverses the array.&lt;/p&gt;&lt;pre&gt;myArray = new Array("one", "two", "three")
myArray.reverse()&lt;/pre&gt;&lt;p&gt;This code changes &lt;code&gt;myArray&lt;/code&gt; so that:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;myArray[0]&lt;/code&gt; is "three"&lt;/li&gt;&lt;li&gt;&lt;code&gt;myArray[1]&lt;/code&gt; is "two"&lt;/li&gt;&lt;li&gt;&lt;code&gt;myArray[2]&lt;/code&gt; is "one"&lt;/li&gt;&lt;/ul&gt;
        </example>
        <references>
          <reference name="join"/>
          <reference name="sort"/>
        </references>
        <remarks>
          &lt;p&gt;The &lt;code&gt;reverse&lt;/code&gt; method transposes the
          elements of the calling array object.&lt;/p&gt;
        </remarks>
      </method>
      <method name="shift">
        <description>
          Removes the first element from an array and returns
          that element. This method changes the length of the
          array.
        </description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the element removed from the array.</return-description>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 5.5"/>
          <specification name="ECMAScript v3"/>
        </availability>
        <example>
          &lt;h3&gt;Removing an element from an array&lt;/h3&gt;&lt;p&gt;The following code displays the &lt;code&gt;myFish&lt;/code&gt;
          array before and after removing its first element. It
          also displays the removed element:&lt;/p&gt;&lt;pre&gt;myFish = ["angel", "clown", "mandarin", "surgeon"];
document.writeln("myFish before: " + myFish);
shifted = myFish.shift();
document.writeln("myFish after: " + myFish);
document.writeln("Removed this element: " + shifted);&lt;/pre&gt;&lt;p&gt;This example displays the following:&lt;/p&gt;&lt;pre&gt;myFish before: ["angel", "clown", "mandarin", "surgeon"]
myFish after: ["clown", "mandarin", "surgeon"]
Removed this element: angel&lt;/pre&gt;
        </example>
        <references>
          <reference name="pop"/>
          <reference name="push"/>
          <reference name="unshift"/>
        </references>
      </method>
      <method name="slice">
        <description>
          Extracts a section of an array and returns a new
          array.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a new array containing the specified slice.</return-description>
        <parameters>
          <parameter name="begin" type="Object" usage="required">
            <description>Zero-based index at which to begin extraction.</description>
          </parameter>
          <parameter name="end" type="Object" usage="required">
            <description>Zero-based index at which to end extraction. slice extracts up to but not including end.</description>
          </parameter>
        </parameters>
        <references>
          <reference name="Array.splice"/>
        </references>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v3"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;slice&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;In the following example, &lt;code&gt;slice&lt;/code&gt; creates a
          new array, &lt;code&gt;newCar&lt;/code&gt;, from &lt;code&gt;myCar&lt;/code&gt;.
          Both include a reference to the object
          &lt;code&gt;myHonda&lt;/code&gt;. When the color of
          &lt;code&gt;myHonda&lt;/code&gt; is changed to purple, both arrays
          reflect the change.&lt;/p&gt;&lt;pre&gt;
//Using slice, create newCar from myCar.
myHonda = {color:"red",wheels:4,engine:{cylinders:4,size:2.2}}
myCar = [myHonda, 2, "cherry condition", "purchased 1997"]
newCar = myCar.slice(0,2)

//Write the values of myCar, newCar, and the color of myHonda
// referenced from both arrays.
document.write("myCar = " + myCar + "&amp;lt;BR&amp;gt;")
document.write("newCar = " + newCar + "&amp;lt;BR&amp;gt;")
document.write("myCar[0].color = " + myCar[0].color + "&amp;lt;BR&amp;gt;")
document.write("newCar[0].color = " + newCar[0].color + "&amp;lt;BR&amp;gt;&amp;lt;BR&amp;gt;")

//Change the color of myHonda.
myHonda.color = "purple"
document.write("The new color of my Honda is " + myHonda.color + "&amp;lt;BR&amp;gt;&amp;lt;BR&amp;gt;")

//Write the color of myHonda referenced from both arrays.
document.write("myCar[0].color = " + myCar[0].color + "&amp;lt;BR&amp;gt;")
document.write("newCar[0].color = " + newCar[0].color + "&amp;lt;BR&amp;gt;")
&lt;/pre&gt;&lt;p&gt;This script writes:&lt;/p&gt;&lt;pre&gt;myCar = [{color:"red", wheels:4, engine:{cylinders:4, size:2.2}}, 2,
   "cherry condition", "purchased 1997"]
newCar = [{color:"red", wheels:4, engine:{cylinders:4, size:2.2}}, 2]
myCar[0].color = red 
newCar[0].color = red
The new color of my Honda is purple
myCar[0].color = purple
newCar[0].color = purple&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;&lt;code&gt;slice&lt;/code&gt; does not alter the original array,
          but returns a new "one level deep" copy that contains
          copies of the elements sliced from the original array.
          Elements of the original array are copied into the new
          array as follows:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;For object references (and not the actual object),
          &lt;code&gt;slice&lt;/code&gt; copies object references into the
          new array. Both the original and new array refer to the
          same object. If a referenced object changes, the
          changes are visible to both the new and original
          arrays.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;For strings and numbers (not String
          and Number
          objects), &lt;code&gt;slice&lt;/code&gt; copies strings and numbers
          into the new array. Changes to the string or number in
          one array does not affect the other array.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If a new element is added to either array, the other
          array is not affected.&lt;/p&gt;
        </remarks>
      </method>
      <method name="some">
		<parameters>
			<parameter name="callback" type="Function(Object,Number,Array):Boolean" usage="required">
				<description>callback should be a function that accepts three arguments and returns a value that is coercible to the Boolean value true or false.</description>
			</parameter>
			<parameter name="thisArg" type="Object" usage="optional">
				<description>If a thisArg parameter is provided, it will be used as the this value for each invocation of callback. If it is not provided, undefined is used instead.</description>
			</parameter>
		</parameters>
		<return-types>
			<return-type type="Boolean"/>
		</return-types>
		<availability>
			<specification name="JavaScript 1.6"/>
			<specification name="Gecko 1.8b2"/>
			<specification name="EMCAScript v5.1"/>
		</availability>
		<exceptions>
			<exception type="TypeError">
				<description>If callback is not a Function, a TypeError is thrown.</description>
			</exception>
		</exceptions>
		<example>&lt;h3&gt;Example: Testing size of all array elements &lt;/h3&gt;
&lt;p&gt;The following example tests whether some element in the array is bigger than 10.&lt;/p&gt;
&lt;pre&gt;function isBigEnough(element, index, array) {
  return (element &gt;= 10);
}
passed = [2, 5, 8, 1, 4].some(isBigEnough);
// passed is false
passed = [12, 5, 8, 1, 44].some(isBigEnough);
// passed is true
&lt;/pre&gt;</example>
		<remarks>&lt;p&gt;&lt;code&gt;some&lt;/code&gt; executes the provided function (&lt;code&gt;callback&lt;/code&gt;) once for each element present in the array until it finds one where &lt;code&gt;callback&lt;/code&gt; returns a true value.  If such an element is found, the test aborts and &lt;code&gt;true&lt;/code&gt; is returned, otherwise (&lt;code&gt;callback&lt;/code&gt; returned a false value for each of the elements) &lt;code&gt;some&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt;.  Arrays are treated as "dense", meaning that &lt;code&gt;callback&lt;/code&gt; will be invoked for each index less than the array's &lt;code&gt;length&lt;/code&gt;, even if a given index has never been explicitly assigned.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;callback&lt;/code&gt; is invoked with three arguments: the value of the element, the index of the element, and the Array object being traversed.
&lt;/p&gt;&lt;p&gt;If a &lt;code&gt;thisObject&lt;/code&gt; parameter is provided to &lt;code&gt;some&lt;/code&gt;, it will be used as the &lt;code&gt;this&lt;/code&gt; for each invocation of the &lt;code&gt;callback&lt;/code&gt;.  If it is not provided, or is &lt;code&gt;null&lt;/code&gt;, the global object associated with &lt;code&gt;callback&lt;/code&gt; is used instead.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;some&lt;/code&gt; does not mutate the array on which it is called.&lt;/p&gt;

&lt;p&gt;The range of elements processed by &lt;code&gt;some&lt;/code&gt; is set before the first invocation of &lt;code&gt;callback&lt;/code&gt;.  Elements that are appended to the array after the call to &lt;code&gt;some&lt;/code&gt; begins will not be visited by &lt;code&gt;callback&lt;/code&gt;.  If an existing, unvisited element of the array is changed or deleted by &lt;code&gt;callback&lt;/code&gt;, its value passed to the visiting &lt;code&gt;callback&lt;/code&gt; will be the value at the time that &lt;code&gt;some&lt;/code&gt; visits that element's index; elements that are deleted before being visited will have the value &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;</remarks>
		<description>Returns true if some element in the array passes the test implemented by the provided function.</description>
		<browsers>
			<browser platform="IE" version="9.0+"/>
			<browser platform="Mozilla" version="3.0+"/>			
			<browser platform="Safari" version="3.2+"/>
			<browser platform="Chrome" version="5.0+"/>
			<browser platform="Opera" version="10.1+"/>
		</browsers>
		<return-description>Returns true if some element in the array passes the test implemented by the provided function.</return-description>
	</method>
	
	<method name="sort">
        <description>Sorts the elements of an array.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a reference to the sorted array.</return-description>
        <parameters>
          <parameter name="compareFunction" type="Function" usage="optional">
            <description>Specifies a function that defines the sort order. If omitted, the array is sorted lexicographically (in dictionary order) according to the string conversion of each element.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.1"/>
          <specification name="JScript 2.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Creating, displaying, and sorting an
          array&lt;/h3&gt;&lt;p&gt;The following example creates four arrays and displays
          the original array, then the sorted arrays. The numeric
          arrays are sorted without, then with, a compare
          function.&lt;/p&gt;&lt;pre&gt;
stringArray = new Array("Blue","Humpback","Beluga")
numericStringArray = new Array("80","9","700")
numberArray = new Array(40,1,5,200)
mixedNumericArray = new Array("80","9","700",40,1,5,200)

function compareNumbers(a, b) {
   return a - b
}

document.write("stringArray: " + stringArray.join() +"&amp;lt;BR&amp;gt;")
document.write("Sorted: " + stringArray.sort() +"&amp;lt;P&amp;gt;")

document.write("numberArray: " + numberArray.join() +"&amp;lt;BR&amp;gt;")
document.write("Sorted without a compare function: " + numberArray.sort() +"&amp;lt;BR&amp;gt;")
document.write("Sorted with compareNumbers: " + numberArray.sort(compareNumbers) +"&amp;lt;P&amp;gt;")

document.write("numericStringArray: " + numericStringArray.join() +"&amp;lt;BR&amp;gt;")
document.write("Sorted without a compare function: " + numericStringArray.sort() +"&amp;lt;BR&amp;gt;")
document.write("Sorted with compareNumbers: " + numericStringArray.sort(compareNumbers) +"&amp;lt;P&amp;gt;")

document.write("mixedNumericArray: " + mixedNumericArray.join() +"&amp;lt;BR&amp;gt;")
document.write("Sorted without a compare function: " + mixedNumericArray.sort() +"&amp;lt;BR&amp;gt;")
document.write("Sorted with compareNumbers: " + mixedNumericArray.sort(compareNumbers) +"&amp;lt;BR&amp;gt;")
&lt;/pre&gt;&lt;p&gt;This example shows that when you use a compare function, the elements are sorted correctly whether they are numbers or numeric strings.&lt;/p&gt;&lt;pre&gt;stringArray: Blue,Humpback,Beluga
Sorted: Beluga,Blue,Humpback

numberArray: 40,1,5,200
Sorted without a compare function: 1,200,40,5
Sorted with compareNumbers: 1,5,40,200

numericStringArray: 80,9,700
Sorted without a compare function: 700,80,9
Sorted with compareNumbers: 9,80,700

mixedNumericArray: 80,9,700,40,1,5,200
Sorted without a compare function: 1,200,40,5,700,80,9
Sorted with compareNumbers: 1,5,9,40,80,200,700&lt;/pre&gt;
        </example>
        <references>
          <reference name="join"/>
          <reference name="reverse"/>
        </references>
        <remarks>
          &lt;p&gt;If &lt;code&gt;compareFunction&lt;/code&gt; is not supplied,
          elements are sorted by converting them to strings and
          comparing strings in lexicographic ("dictionary" or
          "telephone book," not numerical) order. For example, "80"
          comes before "9" in lexicographic order, but in a numeric
          sort 9 comes before 80.&lt;/p&gt;&lt;p&gt;If &lt;code&gt;compareFunction&lt;/code&gt; is supplied, the array
          elements are sorted according to the return value of the
          compare function. If &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;
          are two elements being compared, then:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If &lt;code&gt;compareFunction(a, b)&lt;/code&gt; is less than
          0, sort &lt;code&gt;b&lt;/code&gt; to a lower index than
          &lt;code&gt;a&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If &lt;code&gt;compareFunction(a, b)&lt;/code&gt; returns 0,
          leave &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; unchanged with
          respect to each other, but sorted with respect to all
          different elements.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If &lt;code&gt;compareFunction(a, b)&lt;/code&gt; is greater
          than 0, sort &lt;code&gt;b&lt;/code&gt; to a higher index than
          &lt;code&gt;a&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;So, the compare function has the following form:&lt;/p&gt;&lt;pre&gt;function compare(a, b) {
   if (a is less than b by some ordering criterion)
      return -1
   if (a is greater than b by the ordering criterion)
      return 1
   // a must be equal to b
   return 0
}&lt;/pre&gt;&lt;p&gt;To compare numbers instead of strings, the compare
          function can simply subtract &lt;code&gt;b&lt;/code&gt; from
          &lt;code&gt;a&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;function compareNumbers(a, b) {
   return a - b
}&lt;/pre&gt;&lt;p&gt;JavaScript uses a stable sort: the index partial order
          of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; does not change if
          &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are equal. If
          &lt;code&gt;a&lt;/code&gt;'s index was less than &lt;code&gt;b&lt;/code&gt;'s
          before sorting, it will be after sorting, no matter how
          &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; move due to
          sorting.&lt;/p&gt;&lt;p&gt;The behavior of the &lt;code&gt;sort&lt;/code&gt; method changed
          between JavaScript 1.1 and JavaScript 1.2.&lt;/p&gt;&lt;p&gt;In JavaScript 1.1, on some platforms, the
          &lt;code&gt;sort&lt;/code&gt; method does not work. This method works
          on all platforms for JavaScript 1.2.&lt;/p&gt;&lt;p&gt;In JavaScript 1.2, this method no longer converts
          undefined elements to null; instead it sorts them to the
          high end of the array. For example, assume you have this
          script:&lt;/p&gt;&lt;pre&gt;
a = new Array();
a[0] = "Ant";
a[5] = "Zebra";

function writeArray(x) {
   for (i = 0; i &amp;lt; x.length; i++) {
      document.write(x[i]);
      if (i &amp;lt; x.length-1) document.write(", ");
   }
}

writeArray(a);
a.sort();
document.write("&amp;lt;BR&amp;gt;&amp;lt;BR&amp;gt;");
writeArray(a);
&lt;/pre&gt;&lt;p&gt;In JavaScript 1.1, JavaScript prints:&lt;/p&gt;&lt;pre&gt;ant, null, null, null, null, zebra
ant, null, null, null, null, zebra&lt;/pre&gt;&lt;p&gt;In JavaScript 1.2, JavaScript prints:&lt;/p&gt;&lt;pre&gt;ant, undefined, undefined, undefined, undefined, zebra
ant, zebra, undefined, undefined, undefined, undefined&lt;/pre&gt;
        </remarks>
      </method>
      
	  <method name="splice">
        <description>Returns the array with the specified elements inserted or removed.</description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the array with the elements removed or replaced.</return-description>
        <parameters>
          <parameter name="index" type="Object" usage="required">
            <description>Index at which to start changing the array.</description>
          </parameter>
          <parameter name="howMany" type="Number" usage="optional">
            <description>An integer indicating the number of old array elements to remove. If howMany is 0, no elements are removed. In this case, you should specify at least one new element.</description>
          </parameter>
          <parameter name="element1, ..., elementN" type="Object" usage="zero-or-more">
            <description>The elements to add to the array. If you don't specify any elements, splice simply removes elements from the array.</description>
          </parameter>
        </parameters>
        <references>
          <reference name="Array.slice"/>
        </references>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 5.5"/>
          <specification name="ECMAScript v3"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;splice&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following script excerpt illustrates the use of splice:&lt;/p&gt;&lt;pre&gt;

myFish = ["angel", "clown", "mandarin", "surgeon"];
document.writeln("myFish: " + myFish + "&amp;lt;BR&amp;gt;");

removed = myFish.splice(2, 0, "drum");
document.writeln("After adding 1: " + myFish);
document.writeln("removed is: " + removed + "&amp;lt;BR&amp;gt;");

removed = myFish.splice(3, 1);
document.writeln("After removing 1: " + myFish);
document.writeln("removed is: " + removed + "&amp;lt;BR&amp;gt;");

removed = myFish.splice(2, 1, "trumpet");
document.writeln("After replacing 1: " + myFish);
document.writeln("removed is: " + removed + "&amp;lt;BR&amp;gt;");

removed = myFish.splice(0, 2, "parrot", "anemone", "blue");
document.writeln("After replacing 2: " + myFish);
document.writeln("removed is: " + removed);

&lt;/pre&gt;

&lt;p&gt;This script displays:&lt;/p&gt;

&lt;pre&gt;myFish: ["angel", "clown", "mandarin", "surgeon"]

After adding 1: ["angel", "clown", "drum", "mandarin", "surgeon"]
removed is: undefined

After removing 1: ["angel", "clown", "drum", "surgeon"]
removed is: mandarin

After replacing 1: ["angel", "clown", "trumpet", "surgeon"]
removed is: drum

After replacing 2: ["parrot", "anemone", "blue", "trumpet", "surgeon"]
removed is: ["angel", "clown"]&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;If you insert a different number of elements than you remove, the array will
          have a different length at the end of the call.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;splice&lt;/code&gt; method returns an array
          containing the removed elements. If you remove only one element, &lt;code&gt;splice&lt;/code&gt; returns one element.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="toLocaleString">
        <description>Returns a localized string version of the array.</description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a localized string version of the array.</return-description>
        <exceptions>
          <exception type="TypeError">
            <description>Throws TypeError if toLocaleString is called on an object that is not an array.</description>
          </exception>
        </exceptions>
        <references>
          <reference name="Array.toString"/>
          <reference name="Object.toLocaleString"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.5"/>
          <specification name="JScript 5.5"/>
          <specification name="ECMAScript v1"/>
        </availability>
    </method>
    
	<method name="toSource">
		<references>
			<reference name="toString"/>
		</references>
		<return-types>
			<return-type type="String"/>
		</return-types>
		<availability>
			<specification name="JavaScript 1.3"/>
		</availability>
		<example>&lt;h3&gt;Example: Examining the source code of an array&lt;/h3&gt;
&lt;p&gt;To examine the source code of an array:&lt;/p&gt;
&lt;pre&gt;alpha = new Array("a", "b", "c")
alpha.toSource() //returns ["a", "b", "c"]&lt;/pre&gt;</example>
		<remarks> &lt;p&gt;The  &lt;code&gt;toSource &lt;/code&gt; method returns the following values: &lt;/p&gt;
 &lt;ul&gt; &lt;li&gt;For the built-in  &lt;code&gt;Array&lt;/code&gt; object,  &lt;code&gt;toSource&lt;/code&gt; returns the following string indicating that the source code is not available: &lt;/li&gt; &lt;/ul&gt;
 &lt;pre&gt;function Array() {
    [native code]
}
 &lt;/pre&gt;
 &lt;ul&gt;&lt;li&gt;For instances of  &lt;code&gt;Array &lt;/code&gt;,  &lt;code&gt;toSource &lt;/code&gt; returns a string representing the source code. &lt;/li&gt; &lt;/ul&gt;
&lt;p&gt;This method is usually called internally by JavaScript and not explicitly in code. You can call  &lt;code&gt;toSource &lt;/code&gt; while debugging to examine the contents of an array. &lt;/p&gt;</remarks>
		<description>Returns a string representing the source code of the array.</description>
		<browsers>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
		</browsers>
		<return-description>Returns a string representing the source code of the array.</return-description>
	</method>
	
	<method name="toString">
        <description>
          Returns a string representing the specified array and
          its elements.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a string version of the array with its elements separated by commas.</return-description>
        <exceptions>
          <exception type="TypeError">
            <description>Throws TypeError if toString is called on an object that is not an array.</description>
          </exception>
        </exceptions>
        <references>
          <reference name="Array.toLocaleString"/>
          <reference name="Object.toString"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.1"/>
          <specification name="JScript 2.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <remarks>
          &lt;p&gt;The Array
          object overrides the &lt;code&gt;toString&lt;/code&gt; method of
          Object.
          For Array objects, the &lt;code&gt;toString&lt;/code&gt; method joins
          the array and returns one string containing each array
          element separated by commas. For example, the following
          code creates an array and uses &lt;code&gt;toString&lt;/code&gt; to
          convert the array to a string.&lt;/p&gt;&lt;pre&gt;var monthNames = new Array("Jan","Feb","Mar","Apr")
myVar=monthNames.toString() // assigns "Jan,Feb,Mar,Apr" to myVar&lt;/pre&gt;&lt;p&gt;JavaScript calls the &lt;code&gt;toString&lt;/code&gt; method
          automatically when an array is to be represented as a
          text value or when an array is referred to in a string
          concatenation.&lt;/p&gt;
        </remarks>
      </method>
	  
      <method name="unshift">
        <description>
          Adds one or more elements to the beginning of an array
          and returns the new length of the array.
        </description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the new length of the array.</return-description>
        <parameters>
          <parameter name="element1, ..., elementN" type="Object" usage="one-or-more">
            <description>The elements to add to the front of the array.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 5.5"/>
          <specification name="ECMAScript v3"/>
        </availability>
        <example>
          &lt;h3&gt;Adding elements to an array&lt;/h3&gt;&lt;p&gt;The following code displays the &lt;code&gt;myFish&lt;/code&gt;
          array before and after adding elements to it.&lt;/p&gt;&lt;pre&gt;myFish = ["angel", "clown"];
document.writeln("myFish before: " + myFish);
unshifted = myFish.unshift("drum", "lion");
document.writeln("myFish after: " + myFish);
document.writeln("New length: " + unshifted);&lt;/pre&gt;&lt;p&gt;This example displays the following:&lt;/p&gt;&lt;pre&gt;myFish before: ["angel", "clown"]
myFish after: ["drum", "lion", "angel", "clown"]
New length: 4&lt;/pre&gt;
        </example>
        <references>
          <reference name="pop"/>
          <reference name="push"/>
          <reference name="shift"/>
        </references>
      </method>
   
    <method name="valueOf">
		<references>
			<reference name="Object.valueOf"/>
		</references>
		<return-types>
			<return-type type="Boolean"/>
			<return-type type="Number"/>
			<return-type type="String"/>
		</return-types>
		<availability>
			<specification name="JavaScript 1.1"/>
			<specification name="JScript 2.0"/>
			<specification name="ECMAScript v1"/>
		</availability>
		<remarks> &lt;p&gt;The table below displays how the data type of an array corresponds to the data type returned
				by the valueOf method. &lt;/p&gt;
				 &lt;table&gt; 
				  &lt;tr&gt;
				  	 &lt;td&gt;Data type of array element&lt;/td&gt;
					 &lt;td&gt;Return type&lt;/td&gt;
				  &lt;/tr&gt;
				  &lt;tr&gt;
				  	 &lt;td&gt;Boolean&lt;/td&gt;
					 &lt;td&gt;Boolean&lt;/td&gt;
				  &lt;/tr&gt;
				  &lt;tr&gt;
				  	 &lt;td&gt;Number or Date&lt;/td&gt;
					 &lt;td&gt;Number&lt;/td&gt;
				  &lt;/tr&gt;
				  &lt;tr&gt;
				  	 &lt;td&gt;All other object types&lt;/td&gt;
					 &lt;td&gt;String&lt;/td&gt;
				  &lt;/tr&gt;
				 &lt;/table&gt;</remarks>
		<description>Returns the primitive value of an array or the primitive value of its elements.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
		<return-description>Returns the primitive value of an array or the primitive value of its elements.</return-description>
	</method>
	</methods>
    <availability>
      <specification name="JavaScript 1.1"/>
      <specification name="JScript 2.0"/>
      <specification name="ECMAScript v1"/>
    </availability>
    <example>
      &lt;h3&gt;Creating an Array&lt;/h3&gt;&lt;p&gt;The following example creates an array,
      &lt;code&gt;msgArray&lt;/code&gt;, with a length of 0, then assigns
      values to &lt;code&gt;msgArray[0]&lt;/code&gt; and
      &lt;code&gt;msgArray[99]&lt;/code&gt;, changing the length of the
      array to 100.&lt;/p&gt;&lt;pre&gt;var msgArray = new Array();
msgArray[0] = "Hello";
msgArray[99] = "world";
// The following statement is true,
// because defined msgArray[99] element.
if (msgArray.length == 100)
   myVar = "The length is 100.";&lt;/pre&gt;&lt;h3&gt;Creating a Two-dimensional Array&lt;/h3&gt;&lt;p&gt;The following creates a two-dimensional array and
      assigns the results to &lt;code&gt;myVar&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;var myVar = "Multidimensional array test; ";
a = new Array(4);
for (var i = 0; i &amp;lt; 4; i++) {
   a[i] = new Array(4);
   for (var j = 0; j &amp;lt; 4; j++) {
      a[i][j] = "[" + i + "," + j + "]";
   }
}
for (var i = 0; i &amp;lt; 4; i++) {
   str = "Row " + i + ":";
   for (var j = 0; j &amp;lt; 4; j++) {
      str += a[i][j];
   }
   myVar += str + "; ";
}&lt;/pre&gt;&lt;p&gt;The following string is assigned to &lt;code&gt;myVar&lt;/code&gt;
      (line breaks are used here for readability):&lt;/p&gt;&lt;pre&gt;Multidimensional array test;
Row 0: [0,0][0,1][0,2][0,3];
Row 1: [1,0][1,1][1,2][1,3];
Row 2: [2,0][2,1][2,2][2,3];
Row 3: [3,0][3,1][3,2][3,3];&lt;/pre&gt;
    </example>
    <remarks>
      &lt;p&gt;An array is an ordered set of values associated with a
      single variable name.&lt;/p&gt;&lt;p&gt;The following example creates an Array object with an
      array literal; the coffees array contains three elements
      and has a length of three:&lt;/p&gt;&lt;pre&gt;coffees = ["French Roast", "Columbian", "Kona"];&lt;/pre&gt;&lt;p&gt;You can construct a dense array of two or more
      elements starting with index 0 if you define initial
      values for all elements. A dense array is one in which
      each element has a value. The following code creates a
      dense array with three elements:&lt;/p&gt;&lt;pre&gt;myArray = new Array("Hello", myVar, 3.14159);&lt;/pre&gt;&lt;h3&gt;Indexing an array&lt;/h3&gt;&lt;p&gt;You index an array by its ordinal number. For example,
      assume you define the following array:&lt;/p&gt;&lt;pre&gt;myArray = new Array("Wind", "Rain", "Fire");&lt;/pre&gt;&lt;p&gt;You can then refer to the elements as thus:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;myArray[0]&lt;/code&gt; is the first element&lt;/li&gt;&lt;li&gt;&lt;code&gt;myArray[1]&lt;/code&gt; is the second element&lt;/li&gt;&lt;li&gt;&lt;code&gt;myArray[2]&lt;/code&gt; is the third element&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Specifying a single parameter&lt;/h3&gt;&lt;p&gt;When you specify a single numeric parameter with the
      &lt;code&gt;Array&lt;/code&gt; constructor, you specify the initial
      length of the array. The following code creates an array
      of five elements:&lt;/p&gt;&lt;pre&gt;billingMethod = new Array(5);&lt;/pre&gt;&lt;p&gt;The behavior of the &lt;code&gt;Array&lt;/code&gt; constructor
      depends on whether the single parameter is a number.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If the value specified is a number, the constructor
      converts the number to an unsigned, 32-bit integer and
      generates an array with the length property (size of
      the array) set to the integer. The array initially
      contains no elements, even though it might have a
      non-zero length.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If the value specified is not a number, an array of
      length 1 is created, with the first element having the
      specified value.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The following code creates an array of length 25, then
      assigns values to the first three elements:&lt;/p&gt;&lt;pre&gt;musicTypes = new Array(25);
musicTypes[0] = "R&amp;amp;B";
musicTypes[1] = "Blues";
musicTypes[2] = "Jazz";&lt;/pre&gt;&lt;h3&gt;Increasing the array length indirectly&lt;/h3&gt;&lt;p&gt;An array's length increases if you assign a value to
      an element higher than the current length of the array.
      The following code creates an array of length 0, then
      assigns a value to element 99. This changes the length of
      the array to 100.&lt;/p&gt;&lt;pre&gt;colors = new Array();
colors[99] = "midnightblue";&lt;/pre&gt;&lt;h3&gt;Creating an array using the result of a match&lt;/h3&gt;&lt;p&gt;The result of a match between a regular expression and
      a string can create an array. This array has properties
      and elements that provide information about the match. An
      array is the return value of RegExp.exec, String.match,
      and String.replace. To help explain these properties and
      elements, look at the following example and then refer to
      the table below:&lt;/p&gt;&lt;pre&gt;// Match one d followed by one or more b's followed by one d
// Remember matched b's and the following d
// Ignore case

myRe = /d(b+)(d)/i;
myArray = myRe.exec("cdbBdbsbz");&lt;/pre&gt;&lt;p&gt;The properties and elements returned from this match
      are as follows:&lt;/p&gt;&lt;table class="fullwidth-table"&gt;&lt;tr&gt;&lt;td class="header"&gt;Property/Element&lt;/td&gt;&lt;td class="header"&gt;Description&lt;/td&gt;&lt;td class="header"&gt;Example&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;input&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A read-only property that reflects the original
      string against which the regular expression was
      matched.&lt;/td&gt;&lt;td&gt;cdbBdbsbz&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;index&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A read-only property that is the zero-based index
      of the match in the string.&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;[0]&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A read-only element that specifies the last
      matched characters.&lt;/td&gt;&lt;td&gt;dbBd&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;[1], ...[n]&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Read-only elements that specify the parenthesized
      substring matches, if included in the regular
      expression. The number of possible parenthesized
      substrings is unlimited.&lt;/td&gt;&lt;td&gt;[1]: bB&lt;br /&gt;
      [2]: d&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    </remarks>
  </class>
  
  <class type="Boolean" superclass="Object">
    <description>
      The Boolean object is an object wrapper
      for a boolean value.
    </description>
	<browsers>
		<browser platform="IE" version="3.0+"/>
		<browser platform="Mozilla" version="1.0+"/>
		<browser platform="Netscape" version="3.0+"/>
		<browser platform="Opera" version="7.0+" />
		<browser platform="Chrome" version="5.0+" />
		<browser platform="Safari" version="1.0+" />
	</browsers>
    <constructors>
      <constructor>
        <description>Creates a new instance of a Boolean object.</description>
        <parameters>
          <parameter name="value" type="Boolean" usage="required">
            <description>The initial value of the Boolean object. The value is converted to a boolean value, if necessary. If value is omitted or is 0, -0, null, false, NaN, undefined, or the empty string (""), the object has an initial value of false. All other values, including any object or the string "false", create an object with an initial value of true.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
      </constructor>
    </constructors>
    <properties>
		<property name="constructor" type="Object">
			<browsers>
				<browser platform="IE" version="4.0+"/>
				<browser platform="Mozilla" version="1.0+"/>
				<browser platform="Netscape" version="3.0+"/>
				<browser platform="Opera" version="7.0+" />
				<browser platform="Chrome" version="5.0+" />
				<browser platform="Safari" version="1.0+" />
			</browsers>
			<availability>
				<specification name="JavaScript 1.1"/>
				<specification name="JScript 2.0"/>
				<specification name="ECMAScript v1"/>
			</availability>
			<references>
				<reference name="Object.constructor"/>
			</references>
			<description>Specifies the function that creates the Boolean prototype.</description>
		</property>
		
		<property name="prototype" type="Boolean">
			<browsers>
				<browser platform="IE" version="4.0+"/>
				<browser platform="Mozilla" version="1.0+"/>
				<browser platform="Netscape" version="3.0+"/>
				<browser platform="Opera" version="7.0+" />
				<browser platform="Chrome" version="5.0+" />
				<browser platform="Safari" version="1.0+" />
			</browsers>
			<availability>
				<specification name="JavaScript 1.1"/>
				<specification name="JScript 2.0"/>
				<specification name="ECMAScript v1"/>
			</availability>
			<references>
				<reference name="Function.prototype"/>
			</references>
			<description>Represents the Boolean prototype object.</description>
		</property>
	</properties>
    
	<methods>
      
	  <method name="toSource">
		<references>
			<reference name="Object.toSource"/>
		</references>
		<return-types>
			<return-type type="String"/>
		</return-types>
		<availability>
			<specification name="JavaScript 1.3"/>
		</availability>
		<remarks>&lt;p&gt;The &lt;code&gt;toSource&lt;/code&gt; method returns the following values:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt; For the built-in &lt;code&gt;Boolean&lt;/code&gt; object, &lt;code&gt;toSource&lt;/code&gt; returns the following string indicating that the source code is not available:
&lt;/li&gt;&lt;/ul&gt;
&lt;pre&gt;function Boolean() {
   [native code]
}
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt; For instances of &lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;toSource&lt;/code&gt; returns a string representing the source code.

&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;This method is usually called internally by JavaScript and not explicitly in code.&lt;/p&gt;</remarks>
		<description>Returns a string representing the source code of a Boolean object.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
		</browsers>
		<return-description>Returns a string representing the source code of a Boolean object.</return-description>
	</method>
	
	<method name="toString">
        <description>
          Returns a string representing the specified Boolean
          object.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a string representation of the specified Boolean object.</return-description>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.1"/>
          <specification name="JScript 2.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <remarks>
          &lt;p&gt;The Boolean
          object overrides the &lt;code&gt;toString&lt;/code&gt; method of the
          Object
          object; it does not inherit Object.toString.
          For Boolean objects, the &lt;code&gt;toString&lt;/code&gt; method
          returns a string representation of the object.&lt;/p&gt;&lt;p&gt;JavaScript calls the &lt;code&gt;toString&lt;/code&gt; method
          automatically when a Boolean is to be represented as a
          text value or when a Boolean is referred to in a string
          concatenation.&lt;/p&gt;&lt;p&gt;For Boolean objects and values, the built-in
          &lt;code&gt;toString&lt;/code&gt; method returns the string
          "&lt;code&gt;true&lt;/code&gt;" or "&lt;code&gt;false&lt;/code&gt;" depending on
          the value of the boolean object. In the following code,
          &lt;code&gt;flag.toString&lt;/code&gt; returns
          "&lt;code&gt;true&lt;/code&gt;".&lt;/p&gt;&lt;pre&gt;var flag = new Boolean(true)
var myVar=flag.toString()&lt;/pre&gt;
        </remarks>
      </method>
      
	  <method name="valueOf">
        <description>Returns the primitive value of a Boolean object.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the primitive value of a Boolean object.</return-description>
        <exceptions>
          <exception type="TypeError">
            <description>Throws TypeError if the object is not a Boolean.</description>
          </exception>
        </exceptions>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.1"/>
          <specification name="JScript 2.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;valueOf&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;x = new Boolean();
myVar=x.valueOf()      //assigns false to myVar&lt;/pre&gt;
        </example>
        <references>
          <reference name="Object.valueOf"/>
        </references>
        <remarks>
          &lt;p&gt;The &lt;code&gt;valueOf&lt;/code&gt; method of Boolean
          returns the primitive value of a Boolean object or
          literal Boolean as a Boolean data type.&lt;/p&gt;&lt;p&gt;This method is usually called internally by JavaScript
          and not explicitly in code.&lt;/p&gt;
        </remarks>
      </method>
    </methods>
    
	<references>
      <reference name="Object"/>
    </references>
    <availability>
      <specification name="JavaScript 1.1"/>
      <specification name="JScript 2.0"/>
      <specification name="ECMAScript v1"/>
    </availability>
    <example>
      &lt;h3&gt;Creating &lt;code&gt;Boolean&lt;/code&gt; objects with an initial
      value of false&lt;/h3&gt;&lt;pre&gt;bNoParam = new Boolean();
bZero = new Boolean(0);
bNull = new Boolean(null);
bEmptyString = new Boolean("");
bfalse = new Boolean(false);&lt;/pre&gt;&lt;h3&gt;Creating &lt;code&gt;Boolean&lt;/code&gt; objects with an initial
      value of true&lt;/h3&gt;&lt;pre&gt;btrue = new Boolean(true);
btrueString = new Boolean("true");
bfalseString = new Boolean("false");
bSuLin = new Boolean("Su Lin");&lt;/pre&gt;
    </example>
    <remarks>
      &lt;p&gt;Do not confuse the primitive Boolean values true and
      false with the true and false values of the Boolean
      object.&lt;/p&gt;&lt;p&gt;Any object whose value is not &lt;code&gt;undefined&lt;/code&gt;
      or &lt;code&gt;null&lt;/code&gt;, including a Boolean object whose
      value is false, evaluates to true when passed to a
      conditional statement. For example, the condition in the
      following if statement evaluates to true:&lt;/p&gt;&lt;pre&gt;x = new Boolean(false);
if (x) //the condition is true&lt;/pre&gt;&lt;p&gt;This behavior does not apply to Boolean primitives.
      For example, the condition in the following if statement
      evaluates to &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;x = false;
if (x) //the condition is false&lt;/pre&gt;&lt;p&gt;Do not use a &lt;code&gt;Boolean&lt;/code&gt; object to convert a
      non-boolean value to a boolean value. Instead, use
      Boolean as a function to perform this task:&lt;/p&gt;&lt;pre&gt;x = Boolean(expression);     //preferred
x = new Boolean(expression); //don't use&lt;/pre&gt;&lt;p&gt;If you specify any object, including a Boolean object
      whose value is false, as the initial value of a Boolean
      object, the new Boolean object has a value of true.&lt;/p&gt;&lt;pre&gt;myFalse = new Boolean(false);   // initial value of false
g = new Boolean(myFalse);       //initial value of true
myString = new String("Hello"); // string object
s = new Boolean(myString);      //initial value of true&lt;/pre&gt;&lt;p&gt;Do not use a Boolean object in place of a Boolean
      primitive.&lt;/p&gt;
    </remarks>
  </class>
  
  <class type="Date" superclass="Object">
    <description>Lets you work with dates and times.</description>
	<browsers>
		<browser platform="IE" version="3.0+"/>
		<browser platform="Mozilla" version="1.0+"/>
		<browser platform="Netscape" version="2.0+"/>
		<browser platform="Opera" version="7.0+" />
		<browser platform="Chrome" version="5.0+" />
		<browser platform="Safari" version="1.0+" />
	</browsers>
    <constructors>
      <constructor>
        <description>Creates a new instance of a Date object.</description>
        <parameters>
          <parameter name="milliseconds" type="Number" usage="optional">
            <description>The elements to add to the front of the array.</description>
          </parameter>
          <parameter name="dateString" type="String" usage="optional">
            <description>String value representing a date. The string should be in a format recognized by the parse method.</description>
          </parameter>
          <parameter name="yr_num, mo_num, day_num" type="Object" usage="optional">
            <description>Integer values representing part of a date. As an integer value, the month is represented by 0 to 11 with 0=January and 11=December.</description>
          </parameter>
          <parameter name="hr_num, min_num, sec_num, ms_num" type="Object" usage="optional">
            <description>Integer values representing part of a date.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Date"></return-type>
        </return-types>
      </constructor>
    </constructors>
    <properties>
      
	  <property name="constructor" type="Function" access="read-write">
        <description>Specifies the function that creates an object's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.1"/>
          <specification name="NES 2.0"/>
          <specification name="ECMA-262"/>
        </availability>
        <references>
          <reference name="Object.constructor"/>
        </references>
      </property>
      <property name="prototype" type="Date" access="read-write">
        <description>Represents the prototype for this class. You can use the prototype to add properties or methods to all instances of a class.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.1"/>
          <specification name="NES 2.0"/>
          <specification name="ECMA-262"/>
        </availability>
        <references>
          <reference name="Function.prototype"/>
        </references>
      </property>
    </properties>
    
	<methods>
      
	  <method name="getDate">
        <description>
          Returns the day of the month for the specified date
          according to local time.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>
          Returns the day of the month for the specified date
          according to local time.
        </return-description>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;getDate&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The second statement below assigns the value 25 to the
          variable &lt;code&gt;day&lt;/code&gt;, based on the value of the
          &lt;code&gt;Date&lt;/code&gt; object &lt;code&gt;Xmas95&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;Xmas95 = new Date("December 25, 1995 23:15:00")
day = Xmas95.getDate()&lt;/pre&gt;
        </example>
        <references>
          <reference name="getUTCDate"/>
          <reference name="getUTCDay"/>
          <reference name="setDate"/>
        </references>
        <remarks>
          &lt;p&gt;The value returned by &lt;code&gt;getDate&lt;/code&gt; is an
          integer between 1 and 31.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="getDay">
        <description>
          Returns a number representing the day of the week for the specified date (according to local time).
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>
          Returns the day of the week for the specified date
          according to local time.
        </return-description>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;getDay&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The second statement below assigns the value 1 to
          &lt;code&gt;weekday&lt;/code&gt;, based on the value of the
          &lt;code&gt;Date&lt;/code&gt; object &lt;code&gt;Xmas95&lt;/code&gt;. December
          25, 1995, is a Monday.&lt;/p&gt;&lt;pre&gt;Xmas95 = new Date("December 25, 1995 23:15:00")
weekday = Xmas95.getDay();&lt;/pre&gt;
        </example>
        <references>
          <reference name="getUTCDay"/>
          <reference name="setDate"/>
        </references>
        <remarks>
          &lt;p&gt;The value returned by &lt;code&gt;getDay&lt;/code&gt; is an
          integer corresponding to the day of the week: 0 for
          Sunday, 1 for Monday, 2 for Tuesday, and so on.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="getFullYear">
        <description>
          Returns the year of the specified date according to
          local time.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.06+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>
          Returns the year of the specified date according to
          local time.
        </return-description>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;getFullYear&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following example assigns the four-digit value of
          the current year to the variable &lt;code&gt;yr&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;var yr;
Today = new Date();
yr = Today.getFullYear();&lt;/pre&gt;
        </example>
        <references>
          <reference name="getYear"/>
          <reference name="getUTCFullYear"/>
          <reference name="setFullYear"/>
        </references>
        <remarks>
          &lt;p&gt;The value returned by &lt;code&gt;getFullYear&lt;/code&gt; is an
          absolute number. For dates between the years 1000 and
          9999, &lt;code&gt;getFullYear&lt;/code&gt; returns a four-digit
          number, for example, 1995. Use this function to make sure
          a year is compliant with years after 2000.&lt;/p&gt;&lt;p&gt;Use this method instead of the &lt;code&gt;getYear&lt;/code&gt;
          method.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="getHours">
        <description>
          Returns the hour for the specified date according to
          local time.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>
          Returns the hour for the specified date according to
          local time.
        </return-description>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;getHours&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The second statement below assigns the value 23 to the
          variable &lt;code&gt;hours&lt;/code&gt;, based on the value of the
          &lt;code&gt;Date&lt;/code&gt; object &lt;code&gt;Xmas95&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;Xmas95 = new Date("December 25, 1995 23:15:00")
hours = Xmas95.getHours()&lt;/pre&gt;
        </example>
        <references>
          <reference name="getUTCHours"/>
          <reference name="setHours"/>
        </references>
        <remarks>
          &lt;p&gt;The value returned by &lt;code&gt;getHours&lt;/code&gt; is an
          integer between 0 and 23.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="getMilliseconds">
        <description>
          Returns the number of milliseconds in the specified date
          according to local time.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.06+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>
          Returns the milliseconds in the specified date
          according to local time.
        </return-description>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;getMilliseconds&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following example assigns the milliseconds portion
          of the current time to the variable &lt;code&gt;ms&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;var ms;
Today = new Date();
ms = Today.getMilliseconds();&lt;/pre&gt;
        </example>
        <references>
          <reference name="getUTCMilliseconds"/>
          <reference name="setMilliseconds"/>
        </references>
        <remarks>
          &lt;p&gt;The value returned by &lt;code&gt;getMilliseconds&lt;/code&gt; is
          a number between 0 and 999.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="getMinutes">
        <description>
          Returns the minutes in the specified date according to
          local time.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the minutes in the specified date according to local time.</return-description>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;getMinutes&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The second statement below assigns the value 15 to the
          variable &lt;code&gt;minutes&lt;/code&gt;, based on the value of the
          &lt;code&gt;Date&lt;/code&gt; object &lt;code&gt;Xmas95&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;Xmas95 = new Date("December 25, 1995 23:15:00")
minutes = Xmas95.getMinutes()&lt;/pre&gt;
        </example>
        <references>
          <reference name="getUTCMinutes"/>
          <reference name="setMinutes"/>
        </references>
        <remarks>
          &lt;p&gt;The value returned by &lt;code&gt;getMinutes&lt;/code&gt; is an
          integer between 0 and 59.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="getMonth">
        <description>
          Returns the month (from 0-11) in the specified date according to
          local time.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the month in the specified date according to local time.</return-description>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;getMonth&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The second statement below assigns the value 11 to the
          variable &lt;code&gt;month&lt;/code&gt;, based on the value of the
          &lt;code&gt;Date&lt;/code&gt; object &lt;code&gt;Xmas95&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;Xmas95 = new Date("December 25, 1995 23:15:00")
month = Xmas95.getMonth()&lt;/pre&gt;
        </example>
        <references>
          <reference name="getUTCMonth"/>
          <reference name="setMonth"/>
        </references>
        <remarks>
          &lt;p&gt;The value returned by &lt;code&gt;getMonth&lt;/code&gt; is an
          integer between 0 and 11. 0 corresponds to January, 1 to
          February, and so on.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="getSeconds">
        <description>
          Returns the seconds in the specified date according to
          local time.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the seconds in the specified date according to local time.</return-description>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;getSeconds&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The second statement below assigns the value 30 to the
          variable &lt;code&gt;secs&lt;/code&gt;, based on the value of the
          &lt;code&gt;Date&lt;/code&gt; object &lt;code&gt;Xmas95&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;Xmas95 = new Date("December 25, 1995 23:15:30")
secs = Xmas95.getSeconds()&lt;/pre&gt;
        </example>
        <references>
          <reference name="getUTCSeconds"/>
          <reference name="setSeconds"/>
        </references>
        <remarks>
          &lt;p&gt;The value returned by &lt;code&gt;getSeconds&lt;/code&gt; is an
          integer between 0 and 59.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="getTime">
        <description>
          Returns the numeric value corresponding to the time
          for the specified date according to universal time.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the numeric value corresponding to the time for the specified date according to universal time.</return-description>
        <references>
          <reference name="parse"/>
          <reference name="Global.UTC"/>
          <reference name="getUTCHours"/>
          <reference name="setTime"/>
          <reference name="valueOf"/>
        </references>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;getTime&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following example assigns the date value of
          &lt;code&gt;theBigDay&lt;/code&gt; to &lt;code&gt;sameAsBigDay&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;theBigDay = new Date("July 1, 1999")
sameAsBigDay = new Date()
sameAsBigDay.setTime(theBigDay.getTime())&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;The value returned by the &lt;code&gt;getTime&lt;/code&gt; method
          is the number of milliseconds since 1 January 1970
          00:00:00. You can use this method to help assign a date
          and time to another &lt;code&gt;Date&lt;/code&gt; object.&lt;/p&gt;&lt;p&gt;This method is functionally equivalent to the
          valueOf method.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="getTimezoneOffset">
        <description>
          Returns the time-zone offset in minutes for the
          current locale.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the time-zone offset in minutes for the current locale.</return-description>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;getTimezoneOffset&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;x = new Date()
currentTimeZoneOffsetInHours = x.getTimezoneOffset()/60&lt;/pre&gt;
        </example>
        <remarks>The time-zone offset is the difference between local
          time and Greenwich Mean Time (GMT). Daylight savings time
          prevents this value from being a constant.</remarks>
      </method>
      
	  <method name="getUTCDate">
        <description>
          Returns the day (date) of the month in the specified
          date according to universal time.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.06+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the day (date) of the month in the specified date according to universal time.</return-description>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;getUTCDate&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following example assigns the day portion of the
          current date to the variable &lt;code&gt;d&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;var d;
Today = new Date();
d = Today.getUTCDate();&lt;/pre&gt;
        </example>
        <references>
          <reference name="getDate"/>
          <reference name="getUTCDay"/>
          <reference name="setUTCDate"/>
        </references>
        <remarks>
          &lt;p&gt;The value returned by &lt;code&gt;getUTCDate&lt;/code&gt; is an
          integer between 1 and 31.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="getUTCDay">
        <description>
          Returns the day of the week in the specified date
          according to universal time.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.06+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the day of the week in the specified date according to universal time.</return-description>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;getUTCDay&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following example assigns the weekday portion of
          the current date to the variable
          &lt;code&gt;weekday&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;var weekday;
Today = new Date()
weekday = Today.getUTCDay()&lt;/pre&gt;
        </example>
        <references>
          <reference name="getDay"/>
          <reference name="getUTCDate"/>
          <reference name="setUTCDate"/>
        </references>
        <remarks>
          &lt;p&gt;The value returned by &lt;code&gt;getUTCDay&lt;/code&gt; is an
          integer corresponding to the day of the week: 0 for
          Sunday, 1 for Monday, 2 for Tuesday, and so on.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="getUTCFullYear">
        <description>
          Returns the year in the specified date according to
          universal time.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.06+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the year in the specified date according to universal time.</return-description>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;getUTCFullYear&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following example assigns the four-digit value of
          the current year to the variable &lt;code&gt;yr&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;var yr;
Today = new Date();
yr = Today.getUTCFullYear();&lt;/pre&gt;
        </example>
        <references>
          <reference name="getFullYear"/>
          <reference name="setFullYear"/>
        </references>
        <remarks>
          &lt;p&gt;The value returned by &lt;code&gt;getUTCFullYear&lt;/code&gt; is
          an absolute number that is compliant with year-2000, for
          example, 1995.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="getUTCHours">
        <description>
          Returns the hours in the specified date according to
          universal time.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.06+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the hours in the specified date according to universal time.</return-description>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;getUTCHours&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following example assigns the hours portion of the
          current time to the variable &lt;code&gt;hrs&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;var hrs;
Today = new Date();
hrs = Today.getUTCHours();&lt;/pre&gt;
        </example>
        <references>
          <reference name="getHours"/>
          <reference name="setUTCHours"/>
        </references>
        <remarks>
          &lt;p&gt;The value returned by &lt;code&gt;getUTCHours&lt;/code&gt; is an
          integer between 0 and 23.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="getUTCMilliseconds">
        <description>
          Returns the milliseconds in the specified date
          according to universal time.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.06+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the milliseconds in the specified date according to universal time.</return-description>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;getUTCMilliseconds&lt;/code&gt; =&lt;/h2&gt;&lt;p&gt;The following example assigns the milliseconds portion
          of the current time to the variable &lt;code&gt;ms&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;var ms;
Today = new Date();
ms = Today.getUTCMilliseconds();&lt;/pre&gt;
        </example>
        <references>
          <reference name="getMilliseconds"/>
          <reference name="setUTCmilliseconds"/>
        </references>
        <remarks>
          &lt;p&gt;The value returned by &lt;code&gt;getUTCMilliseconds&lt;/code&gt;
          is an integer between 0 and 999.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="getUTCMinutes">
        <description>
          Returns the minutes in the specified date according to
          universal time.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.06+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the minutes in the specified date according to universal time.</return-description>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;getUTCMinutes&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following example assigns the minutes portion of
          the current time to the variable &lt;code&gt;min&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;var min;
Today = new Date();
min = Today.getUTCMinutes();&lt;/pre&gt;
        </example>
        <references>
          <reference name="getMinutes"/>
          <reference name="setUTCMinutes"/>
        </references>
        <remarks>
          &lt;p&gt;The value returned by &lt;code&gt;getUTCMinutes&lt;/code&gt; is an
          integer between 0 and 59.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="getUTCMonth">
        <description>
          Returns the month of the specified date according to
          universal time.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.06+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the month of the specified date according to universal time.</return-description>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;getUTCMonth&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following example assigns the month portion of the
          current date to the variable &lt;code&gt;mon&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;var mon;
Today = new Date();
mon = Today.getUTCMonth();&lt;/pre&gt;
        </example>
        <references>
          <reference name="getMonth"/>
          <reference name="setUTCMonth"/>
        </references>
        <remarks>
          &lt;p&gt;The value returned by &lt;code&gt;getUTCMonth&lt;/code&gt; is an
          integer between 0 and 11 corresponding to the month. 0
          for January, 1 for February, 2 for March, and so on.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="getUTCSeconds">
        <description>
          Returns the seconds in the specified date according to
          universal time.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.06+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the seconds in the specified date according to universal time.</return-description>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;getUTCSeconds&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following example assigns the seconds portion of
          the current time to the variable &lt;code&gt;sec&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;var sec;
Today = new Date();
sec = Today.getUTCSeconds();&lt;/pre&gt;
        </example>
        <references>
          <reference name="getSeconds"/>
          <reference name="setUTCSeconds"/>
        </references>
        <remarks>
          &lt;p&gt;The value returned by &lt;code&gt;getUTCSeconds&lt;/code&gt; is an
          integer between 0 and 59.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="getYear">
        <description>
          Returns the year in the specified date according to
          local time.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the year in the specified date according to local time.</return-description>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
          <specification name="deprecated by ECMAScript v3"/>
        </availability>
        <example>
          &lt;h3&gt;Years between 1900 and 1999&lt;/h3&gt;&lt;p&gt;The second statement assigns the value 95 to the
          variable &lt;code&gt;year&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;Xmas = new Date("December 25, 1995 23:15:00")
year = Xmas.getYear() // returns 95&lt;/pre&gt;&lt;h3&gt;Years above 1999&lt;/h3&gt;&lt;p&gt;The second statement assigns the value 100 to the
          variable &lt;code&gt;year&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;Xmas = new Date("December 25, 2000 23:15:00")
year = Xmas.getYear() // returns 100&lt;/pre&gt;&lt;h3&gt;Years below 1900&lt;/h3&gt;&lt;p&gt;The second statement assigns the value -100 to the
          variable &lt;code&gt;year&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;Xmas = new Date("December 25, 1800 23:15:00")
year = Xmas.getYear() // returns -100&lt;/pre&gt;&lt;h3&gt;Setting and getting a year between 1900 and
          1999&lt;/h3&gt;&lt;p&gt;The second statement assigns the value 95 to the
          variable &lt;code&gt;year&lt;/code&gt;, representing the year
          1995.&lt;/p&gt;&lt;pre&gt;Xmas.setYear(95)
year = Xmas.getYear() // returns 95&lt;/pre&gt;
        </example>
        <references>
          <reference name="getFullYear"/>
          <reference name="getUTCFullYear"/>
          <reference name="setYear"/>
        </references>
        <remarks>
          &lt;p&gt;&lt;code&gt;getYear&lt;/code&gt; is no longer used and has been
          replaced by the getFullYear
          method.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;getYear&lt;/code&gt; method returns the year minus
          1900; thus:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;For years above 2000, the value returned by
          &lt;code&gt;getYear&lt;/code&gt; is 100 or greater. For example, if
          the year is 2026, &lt;code&gt;getYear&lt;/code&gt; returns
          126.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;For years between and including 1900 and 1999, the
          value returned by &lt;code&gt;getYear&lt;/code&gt; is between 0 and
          99. For example, if the year is 1976,
          &lt;code&gt;getYear&lt;/code&gt; returns 76.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;For years less than 1900 or greater than 1999, the
          value returned by &lt;code&gt;getYear&lt;/code&gt; is less than 0.
          For example, if the year is 1800, &lt;code&gt;getYear&lt;/code&gt;
          returns -100.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To take into account years before and after 2000, you
          should use &lt;code&gt;getFullYear&lt;/code&gt;
          instead of &lt;code&gt;getYear&lt;/code&gt; so that the year is
          specified in full.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="now">
		<return-types>
			<return-type type="Number"/>
		</return-types>
		<availability>
			<specification name="ECMAScript v5.1"/>
		</availability>
		<description>Returns the number of milliseconds passed since 1970-01-01 00:00:00 UTC.</description>
		<browsers>
			<browser platform="IE" version="9.0+"/>
			<browser platform="Mozilla" version="3.5+"/>
			<browser platform="Opera" version="10.5+" />
			<browser platform="Chrome" version="7.0+" />
			<browser platform="Safari" version="5.0+" />
		</browsers>
		<return-description>Returns the number of milliseconds passed since 1970-01-01 00:00:00 UTC.</return-description>
	</method>
	
	<method name="parse" scope="static">
        <description>
          Parses a string representation of a date, and returns
          the number of milliseconds since January 1, 1970,
          00:00:00, local time.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the number of milliseconds since January 1, 1970, 00:00:00, local time.</return-description>
        <parameters>
          <parameter name="dateString" type="String" usage="required">
            <description>A string representing a date.</description>
          </parameter>
        </parameters>
        <references>
          <reference name="Date"/>
          <reference name="Date.setTime"/>
          <reference name="Date.toGMTString"/>
          <reference name="Date.UTC"/>
        </references>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;parse&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;If &lt;code&gt;IPOdate&lt;/code&gt; is an existing
          &lt;code&gt;Date&lt;/code&gt; object, then you can set it to August
          9, 1995 as follows:&lt;/p&gt;&lt;pre&gt;IPOdate.setTime(Date.parse("Aug 9, 1995")) ;&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;The &lt;code&gt;parse&lt;/code&gt; method takes a date string
          (such as "&lt;code&gt;Dec 25, 1995&lt;/code&gt;") and returns the
          number of milliseconds since January 1, 1970, 00:00:00
          (local time). This function is useful for setting date
          values based on string values, for example in conjunction
          with the &lt;code&gt;setTime&lt;/code&gt;
          method and the &lt;code&gt;Date&lt;/code&gt;
          object.&lt;/p&gt;&lt;p&gt;Given a string representing a time, &lt;code&gt;parse&lt;/code&gt;
          returns the time value. It accepts the IETF standard date
          syntax: "&lt;code&gt;Mon, 25 Dec 1995 13:30:00 GMT&lt;/code&gt;". It
          understands the continental US time-zone abbreviations,
          but for general use, use a time-zone offset, for example,
          "&lt;code&gt;Mon, 25 Dec 1995 13:30:00 GMT+0430&lt;/code&gt;" (4
          hours, 30 minutes west of the Greenwich meridian). If you
          do not specify a time zone, the local time zone is
          assumed. GMT and UTC are considered equivalent.&lt;/p&gt;&lt;p&gt;Because &lt;code&gt;parse&lt;/code&gt; is a static method of
          &lt;code&gt;Date&lt;/code&gt;, you always use it as
          &lt;code&gt;Date.parse()&lt;/code&gt;, rather than as a method of a
          &lt;code&gt;Date&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="setDate">
        <description>
          Sets the day of the month for a specified date
          according to local time.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the adjusted date in milliseconds.</return-description>
        <parameters>
          <parameter name="dayValue" type="Number" usage="required">
            <description>An integer from 1 to 31, representing the day of the month.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <remarks>Before this method was standardized to ECMAScript, it returned nothing.</remarks>
        <example>
          &lt;h3&gt;Using &lt;code&gt;setDate&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The second statement below changes the day for
          &lt;code&gt;theBigDay&lt;/code&gt; to July 24 from its original
          value.&lt;/p&gt;&lt;pre&gt;theBigDay = new Date("July 27, 1962 23:30:00")
theBigDay.setDate(24)&lt;/pre&gt;
        </example>
        <references>
          <reference name="getDate"/>
          <reference name="setUTCDate"/>
        </references>
      </method>
      
	  <method name="setFullYear">
        <description>
          Sets the full year for a specified date according to
          local time.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.06+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the adjusted date in milliseconds.</return-description>
        <parameters>
          <parameter name="yearValue" type="Number" usage="required">
            <description>An integer specifying the numeric value of the year, for example, 1995.</description>
          </parameter>
          <parameter name="monthValue" type="Number" usage="optional">
            <description>An integer between 0 and 11 representing the months January through December.</description>
          </parameter>
          <parameter name="dayValue" type="Number" usage="optional">
            <description>An integer between 1 and 31 representing the day of the month. If you specify the dayValue parameter, you must also specify the monthValue.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;setFullYear&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;theBigDay = new Date();
theBigDay.setFullYear(1997);&lt;/pre&gt;
        </example>
        <references>
          <reference name="getUTCFullYear"/>
          <reference name="setUTCFullYear"/>
          <reference name="setYear"/>
        </references>
        <remarks>
          &lt;p&gt;If you do not specify the &lt;code&gt;monthValue&lt;/code&gt; and
          &lt;code&gt;dayValue&lt;/code&gt; parameters, the values returned
          from the &lt;code&gt;getMonth&lt;/code&gt; and &lt;code&gt;getDate&lt;/code&gt;
          methods are used.&lt;/p&gt;&lt;p&gt;If a parameter you specify is outside of the expected
          range, &lt;code&gt;setFullYear&lt;/code&gt; attempts to update the
          other parameters and the date information in the
          &lt;code&gt;Date&lt;/code&gt; object accordingly. For example, if you
          specify 15 for &lt;code&gt;monthValue&lt;/code&gt;, the year is
          incremented by 1 (year + 1), and 3 is used for the
          month.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="setHours">
        <description>
          Sets the hours for a specified date according to local
          time.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the adjusted date in milliseconds.</return-description>
        <parameters>
          <parameter name="hoursValue" type="Number" usage="required">
            <description>An integer between 0 and 23, representing the hour.</description>
          </parameter>
          <parameter name="minutesValue" type="Number" usage="optional">
            <description>An integer between 0 and 59, representing the minutes.</description>
          </parameter>
          <parameter name="secondsValue" type="Number" usage="optional">
            <description>An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter, you must also specify the minutesValue.</description>
          </parameter>
          <parameter name="msValue" type="Number" usage="optional">
            <description>A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter, you must also specify the minutesValue and secondsValue.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;setHours&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;theBigDay.setHours(7)&lt;/pre&gt;
        </example>
        <references>
          <reference name="getHours"/>
          <reference name="setUTCHours"/>
        </references>
        <remarks>
          &lt;p&gt;Before this method was standardized to ECMAScript, it returned nothing. If you do not specify the &lt;code&gt;minutesValue&lt;/code&gt;,
          &lt;code&gt;secondsValue&lt;/code&gt;, and &lt;code&gt;msValue&lt;/code&gt;
          parameters, the values returned from the
          &lt;code&gt;getUTCMinutes&lt;/code&gt;, &lt;code&gt;getUTCSeconds&lt;/code&gt;,
          and &lt;code&gt;getMilliseconds&lt;/code&gt; methods are used.&lt;/p&gt;&lt;p&gt;If a parameter you specify is outside of the expected
          range, &lt;code&gt;setHours&lt;/code&gt; attempts to update the date
          information in the &lt;code&gt;Date&lt;/code&gt; object accordingly.
          For example, if you use 100 for
          &lt;code&gt;secondsValue&lt;/code&gt;, the minutes will be
          incremented by 1 (min + 1), and 40 will be used for
          seconds.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="setMilliseconds">
        <description>
          Sets the milliseconds for a specified date according
          to local time.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.06+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the adjusted date in milliseconds.</return-description>
        <parameters>
          <parameter name="millisecondsValue" type="Number" usage="required">
            <description>A number between 0 and 999, representing the milliseconds.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;setMilliseconds&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;theBigDay = new Date();
theBigDay.setMilliseconds(100);&lt;/pre&gt;
        </example>
        <references>
          <reference name="getMilliseconds"/>
          <reference name="setUTCMilliseconds"/>
        </references>
        <remarks>
          &lt;p&gt;If you specify a number outside the expected range,
          the date information in the &lt;code&gt;Date&lt;/code&gt; object is
          updated accordingly. For example, if you specify 1005,
          the number of seconds is incremented by 1, and 5 is used
          for the milliseconds.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="setMinutes">
        <description>
          Sets the minutes for a specified date according to
          local time.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the adjusted date in milliseconds.</return-description>
        <parameters>
          <parameter name="minutesValue" type="Number" usage="required">
            <description>An integer between 0 and 59, representing the minutes.</description>
          </parameter>
          <parameter name="secondsValue" type="Number" usage="optional">
            <description>An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter, you must also specify the minutesValue.</description>
          </parameter>
          <parameter name="msValue" type="Number" usage="optional">
            <description>A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter, you must also specify the minutesValue and secondsValue.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;setMinutes&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;theBigDay.setMinutes(45)&lt;/pre&gt;
        </example>
        <references>
          <reference name="getMinutes"/>
          <reference name="setUTCMinutes"/>
        </references>
        <remarks>
          &lt;p&gt;Before this method was standardized to ECMAScript, it returned nothing. If you do not specify the &lt;code&gt;secondsValue&lt;/code&gt;
          and &lt;code&gt;msValue&lt;/code&gt; parameters, the values returned
          from &lt;code&gt;getSeconds&lt;/code&gt; and
          &lt;code&gt;getMilliseconds&lt;/code&gt; methods are used.&lt;/p&gt;&lt;p&gt;If a parameter you specify is outside of the expected
          range, &lt;code&gt;setMinutes&lt;/code&gt; attempts to update the
          date information in the &lt;code&gt;Date&lt;/code&gt; object
          accordingly. For example, if you use 100 for
          &lt;code&gt;secondsValue&lt;/code&gt;, the minutes
          (&lt;code&gt;minutesValue&lt;/code&gt;) will be incremented by 1
          (&lt;code&gt;minutesValue&lt;/code&gt; + 1), and 40 will be used for
          seconds.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="setMonth">
        <description>
          Set the month for a specified date according to local
          time.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the adjusted date in milliseconds.</return-description>
        <parameters>
          <parameter name="monthValue" type="Number" usage="required">
            <description>An integer between 0 and 11 (representing the months January through December).</description>
          </parameter>
          <parameter name="dayValue" type="Number" usage="optional">
            <description>An integer from 1 to 31, representing the day of the month.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;setMonth&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;theBigDay.setMonth(6)&lt;/pre&gt;
        </example>
        <references>
          <reference name="getMonth"/>
          <reference name="setUTCMonth"/>
        </references>
        <remarks>
          &lt;p&gt;Before this method was standardized to ECMAScript, it returned nothing. If you do not specify the &lt;code&gt;dayValue&lt;/code&gt;
          parameter, the value returned from the
          &lt;code&gt;getDate&lt;/code&gt; method is used.&lt;/p&gt;&lt;p&gt;If a parameter you specify is outside of the expected
          range, &lt;code&gt;setMonth&lt;/code&gt; attempts to update the date
          information in the &lt;code&gt;Date&lt;/code&gt; object accordingly.
          For example, if you use 15 for &lt;code&gt;monthValue&lt;/code&gt;,
          the year will be incremented by 1 (year + 1), and 3 will
          be used for month.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="setSeconds">
        <description>
          Sets the seconds for a specified date according to
          local time.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the adjusted date in milliseconds.</return-description>
        <parameters>
          <parameter name="secondsValue" type="Number" usage="required">
            <description>An integer between 0 and 59.</description>
          </parameter>
          <parameter name="msValue" type="Number" usage="optional">
            <description>A number between 0 and 999, representing the milliseconds.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;setSeconds&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;theBigDay.setSeconds(30)&lt;/pre&gt;
        </example>
        <references>
          <reference name="getSeconds"/>
          <reference name="setUTCSeconds"/>
        </references>
        <remarks>
          &lt;p&gt;Before this method was standardized to ECMAScript, it returned nothing. If you do not specify the &lt;code&gt;msValue&lt;/code&gt;
          parameter, the value returned from the
          &lt;code&gt;getMilliseconds&lt;/code&gt; method is used.&lt;/p&gt;&lt;p&gt;If a parameter you specify is outside of the expected
          range, &lt;code&gt;setSeconds&lt;/code&gt; attempts to update the
          date information in the &lt;code&gt;Date&lt;/code&gt; object
          accordingly. For example, if you use 100 for
          &lt;code&gt;secondsValue&lt;/code&gt;, the minutes stored in the
          &lt;code&gt;Date&lt;/code&gt; object will be incremented by 1, and 40
          will be used for seconds.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="setTime">
        <description>
          Sets the value of a Date object according
          to local time.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the timeValue argument in milliseconds.</return-description>
        <parameters>
          <parameter name="timeValue" type="Number" usage="required">
            <description>An integer representing the number of milliseconds since 1 January 1970, 00:00:00.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;setTime&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;theBigDay = new Date("July 1, 1999")
sameAsBigDay = new Date();
sameAsBigDay.setTime(theBigDay.getTime());&lt;/pre&gt;
        </example>
        <references>
          <reference name="getTime"/>
          <reference name="setUTCHours"/>
        </references>
        <remarks>
          &lt;p&gt;Before this method was standardized to ECMAScript, it returned nothing. Use the &lt;code&gt;setTime&lt;/code&gt; method to help assign a
          date and time to another &lt;code&gt;Date&lt;/code&gt; object.&lt;/p&gt;
        </remarks>
      </method>
      <method name="setUTCDate">
        <description>
          Sets the day of the month for a specified date
          according to universal time.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.06+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the adjusted date in milliseconds.</return-description>
        <parameters>
          <parameter name="dayValue" type="Number" usage="required">
            <description>An integer from 1 to 31, representing the day of the month.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;setUTCDate&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;theBigDay = new Date();
theBigDay.setUTCDate(20);&lt;/pre&gt;
        </example>
        <references>
          <reference name="getUTCDate"/>
          <reference name="setDate"/>
        </references>
        <remarks>
          &lt;p&gt;If a parameter you specify is outside of the expected
          range, &lt;code&gt;setUTCDate&lt;/code&gt; attempts to update the
          date information in the &lt;code&gt;Date&lt;/code&gt; object
          accordingly. For example, if you use 40 for
          &lt;code&gt;dayValue&lt;/code&gt;, and the month stored in the
          &lt;code&gt;Date&lt;/code&gt; object is June, the day will be changed
          to 10 and the month will be incremented to July.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="setUTCFullYear">
        <description>
          Sets the full year for a specified date according to
          universal time.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.06+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the adjusted date in milliseconds.</return-description>
        <parameters>
          <parameter name="yearValue" type="Number" usage="required">
            <description>An integer specifying the numeric value of the year, for example, 1995.</description>
          </parameter>
          <parameter name="monthValue" type="Number" usage="optional">
            <description>An integer between 0 and 11 representing the months January through December.</description>
          </parameter>
          <parameter name="dayValue" type="Number" usage="optional">
            <description>An integer between 1 and 31 representing the day of the month. If you specify the dayValue parameter, you must also specify the monthValue.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;setUTCFullYear&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;theBigDay = new Date();
theBigDay.setUTCFullYear(1997);&lt;/pre&gt;
        </example>
        <references>
          <reference name="getUTCFullYear"/>
          <reference name="setFullYear"/>
        </references>
        <remarks>
          &lt;p&gt;If you do not specify the &lt;code&gt;monthValue&lt;/code&gt; and
          &lt;code&gt;dayValue&lt;/code&gt; parameters, the values returned
          from the &lt;code&gt;getMonth&lt;/code&gt; and &lt;code&gt;getDate&lt;/code&gt;
          methods are used.&lt;/p&gt;&lt;p&gt;If a parameter you specify is outside of the expected
          range, &lt;code&gt;setUTCFullYear&lt;/code&gt; attempts to update the
          other parameters and the date information in the
          &lt;code&gt;Date&lt;/code&gt; object accordingly. For example, if you
          specify 15 for &lt;code&gt;monthValue&lt;/code&gt;, the year is
          incremented by 1 (year + 1), and 3 is used for the
          month.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="setUTCHours">
        <description>
          Sets the hour for a specified date according to
          universal time.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.06+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the adjusted date in milliseconds.</return-description>
        <parameters>
          <parameter name="hoursValue" type="Number" usage="required">
            <description>An integer between 0 and 23, representing the hour.</description>
          </parameter>
          <parameter name="minutesValue" type="Number" usage="optional">
            <description>An integer between 0 and 59, representing the minutes.</description>
          </parameter>
          <parameter name="secondsValue" type="Number" usage="optional">
            <description>An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter, you must also specify the minutesValue.</description>
          </parameter>
          <parameter name="msValue" type="Number" usage="optional">
            <description>A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter, you must also specify the minutesValue and secondsValue.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;setUTCHours&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;theBigDay = new Date();
theBigDay.setUTCHours(8);&lt;/pre&gt;
        </example>
        <references>
          <reference name="getUTCHours"/>
          <reference name="setHours"/>
        </references>
        <remarks>
          &lt;p&gt;If you do not specify the &lt;code&gt;minutesValue&lt;/code&gt;,
          &lt;code&gt;secondsValue&lt;/code&gt;, and &lt;code&gt;msValue&lt;/code&gt;
          parameters, the values returned from the
          &lt;code&gt;getUTCMinutes&lt;/code&gt;, &lt;code&gt;getUTCSeconds&lt;/code&gt;,
          and &lt;code&gt;getUTCMilliseconds&lt;/code&gt; methods are used.&lt;/p&gt;&lt;p&gt;If a parameter you specify is outside of the expected
          range, &lt;code&gt;setUTCHours&lt;/code&gt; attempts to update the
          date information in the &lt;code&gt;Date&lt;/code&gt; object
          accordingly. For example, if you use 100 for
          &lt;code&gt;secondsValue&lt;/code&gt;, the minutes will be
          incremented by 1 (min + 1), and 40 will be used for
          seconds.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="setUTCMilliseconds">
        <description>
          Sets the milliseconds for a specified date according
          to universal time.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.06+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the adjusted date in milliseconds.</return-description>
        <parameters>
          <parameter name="millisecondsValue" type="Number" usage="required">
            <description>A number between 0 and 999, representing the milliseconds.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;setUTCMilliseconds&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;theBigDay = new Date();
theBigDay.setUTCMilliseconds(500);&lt;/pre&gt;
        </example>
        <references>
          <reference name="getUTCMilliseconds"/>
          <reference name="setMilliseconds"/>
        </references>
        <remarks>
          &lt;p&gt;If a parameter you specify is outside of the expected
          range, &lt;code&gt;setUTCMilliseconds&lt;/code&gt; attempts to update
          the date information in the &lt;code&gt;Date&lt;/code&gt; object
          accordingly. For example, if you use 1100 for
          &lt;code&gt;millisecondsValue&lt;/code&gt;, the seconds stored in the
          &lt;code&gt;Date&lt;/code&gt; object will be incremented by 1, and
          100 will be used for milliseconds.&lt;/p&gt;
        </remarks>
      </method>
      <method name="setUTCMinutes">
        <description>
          Sets the minutes for a specified date according to universal time.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.06+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the adjusted date in milliseconds.</return-description>
        <parameters>
          <parameter name="minutesValue" type="Number" usage="required">
            <description>An integer between 0 and 59, representing the minutes.</description>
          </parameter>
          <parameter name="secondsValue" type="Number" usage="optional">
            <description>An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter, you must also specify the minutesValue.</description>
          </parameter>
          <parameter name="msValue" type="Number" usage="optional">
            <description>A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter, you must also specify the minutesValue and secondsValue.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;setUTCMinutes&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;theBigDay = new Date();
theBigDay.setUTCMinutes(43);&lt;/pre&gt;
        </example>
        <references>
          <reference name="getUTCMinutes"/>
          <reference name="setMinutes"/>
        </references>
        <remarks>
          &lt;p&gt;If you do not specify the &lt;code&gt;secondsValue&lt;/code&gt;
          and &lt;code&gt;msValue&lt;/code&gt; parameters, the values returned
          from &lt;code&gt;getUTCSeconds&lt;/code&gt; and
          &lt;code&gt;getUTCMilliseconds&lt;/code&gt; methods are used.&lt;/p&gt;&lt;p&gt;If a parameter you specify is outside of the expected
          range, &lt;code&gt;setUTCMinutes&lt;/code&gt; attempts to update the
          date information in the &lt;code&gt;Date&lt;/code&gt; object
          accordingly. For example, if you use 100 for
          &lt;code&gt;secondsValue&lt;/code&gt;, the minutes
          (&lt;code&gt;minutesValue&lt;/code&gt;) will be incremented by 1
          (&lt;code&gt;minutesValue&lt;/code&gt; + 1), and 40 will be used for
          seconds.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="setUTCMonth">
        <description>
          Sets the month for a specified date according to
          universal time.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.06+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the adjusted date in milliseconds.</return-description>
        <parameters>
          <parameter name="monthValue" type="Number" usage="required">
            <description>An integer between 0 and 11, representing the months January through December.</description>
          </parameter>
          <parameter name="dayValue" type="Number" usage="optional">
            <description>An integer from 1 to 31, representing the day of the month.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;setUTCMonth&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;theBigDay = new Date();
theBigDay.setUTCMonth(11);&lt;/pre&gt;
        </example>
        <references>
          <reference name="getUTCMonth"/>
          <reference name="setMonth"/>
        </references>
        <remarks>
          &lt;p&gt;If you do not specify the &lt;code&gt;dayValue&lt;/code&gt;
          parameter, the value returned from the
          &lt;code&gt;getUTCDate&lt;/code&gt; method is used.&lt;/p&gt;&lt;p&gt;If a parameter you specify is outside of the expected
          range, &lt;code&gt;setUTCMonth&lt;/code&gt; attempts to update the
          date information in the &lt;code&gt;Date&lt;/code&gt; object
          accordingly. For example, if you use 15 for
          &lt;code&gt;monthValue&lt;/code&gt;, the year will be incremented by
          1 (year + 1), and 3 will be used for month.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="setUTCSeconds">
        <description>
          Sets the seconds for a specified date according to
          universal time.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.06+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the adjusted date in milliseconds.</return-description>
        <parameters>
          <parameter name="secondsValue" type="Number" usage="required">
            <description>An integer between 0 and 59.</description>
          </parameter>
          <parameter name="msValue" type="Number" usage="optional">
            <description>A number between 0 and 999, representing the milliseconds.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;setUTCSeconds&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;theBigDay = new Date();
theBigDay.setUTCSeconds(20);&lt;/pre&gt;
        </example>
        <references>
          <reference name="getUTCSeconds"/>
          <reference name="setSeconds"/>
        </references>
        <remarks>
          &lt;p&gt;If you do not specify the &lt;code&gt;msValue&lt;/code&gt;
          parameter, the value returned from the
          &lt;code&gt;getUTCMilliseconds&lt;/code&gt; methods is used.&lt;/p&gt;&lt;p&gt;If a parameter you specify is outside of the expected
          range, &lt;code&gt;setUTCSeconds&lt;/code&gt; attempts to update the
          date information in the &lt;code&gt;Date&lt;/code&gt; object
          accordingly. For example, if you use 100 for
          &lt;code&gt;secondsValue&lt;/code&gt;, the minutes stored in the
          &lt;code&gt;Date&lt;/code&gt; object will be incremented by 1, and 40
          will be used for seconds.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="setYear">
        <description>
          Sets the year for a specified date according to local
          time.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the adjusted date in milliseconds.</return-description>
        <parameters>
          <parameter name="yearValue" type="Number" usage="required">
            <description>An integer.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
          <specification name="deprecated by ECMAScript v3"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;setYear&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The first two lines set the year to 1996. The third
          sets the year to 2000.&lt;/p&gt;&lt;pre&gt;theBigDay.setYear(96)
theBigDay.setYear(1996)
theBigDay.setYear(2000)&lt;/pre&gt;
        </example>
        <references>
          <reference name="getYear"/>
          <reference name="setFullYear"/>
          <reference name="setUTCFullYear"/>
        </references>
        <remarks>
          &lt;p&gt;Before this method was standardized to ECMAScript, it returned nothing. &lt;code&gt;setYear&lt;/code&gt; is no longer used and has been
          replaced by the &lt;code&gt;setFullYear&lt;/code&gt; method.&lt;/p&gt;&lt;p&gt;If &lt;code&gt;yearValue&amp;lt;/code. is a number between 0 and
          99 (inclusive), then the year for
          &amp;lt;code&amp;gt;dateObjectName&lt;/code&gt; is set to 1900 +
          &lt;code&gt;yearValue&lt;/code&gt;. Otherwise, the year for
          &lt;code&gt;dateObjectName&lt;/code&gt; is set to
          &lt;code&gt;yearValue&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;To take into account years before and after 2000, you
          should use &lt;code&gt;setFullYear&lt;/code&gt;
          instead of &lt;code&gt;setYear&lt;/code&gt;
          so that the year is specified in full.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="toDateString">
        <description>Returns a string version of the Date object expressed in local time.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a string version of the Date object expressed in local time.</return-description>
        <references>
          <reference name="Date.toLocaleDateString"/>
          <reference name="Date.toLocaleString"/>
          <reference name="Date.toLocaleTimeString"/>
          <reference name="Date.toString"/>
          <reference name="Date.toTimeString"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.5"/>
          <specification name="JScript 5.5"/>
          <specification name="ECMAScript v3"/>
        </availability>
      </method>
      
	  <method name="toGMTString">
        <description>Converts a date to a string, using Internet GMT conventions. </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a string version of the Date object expressed in GMT time.</return-description>
        <references>
          <reference name="Date.toUTCString"/>
          <reference name="toLocaleString"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
          <specification name="deprecated by ECMAScript v3"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;toGMTString&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;In the following example, today is a &lt;code&gt;Date&lt;/code&gt;
          object:&lt;/p&gt;&lt;pre&gt;today.toGMTString();&lt;/pre&gt;&lt;p&gt;In this example, the &lt;code&gt;toGMTString&lt;/code&gt; method
          converts the date to GMT (UTC) using the operating
          system's time-zone offset and returns a string value that
          is similar to the following form. The exact format
          depends on the platform.&lt;/p&gt;&lt;pre&gt;Mon, 18 Dec 1995 17:28:35 GMT&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;&lt;code&gt;toGMTString&lt;/code&gt; is no longer used and has
          been replaced by the &lt;code&gt;toUTCString&lt;/code&gt; method.&lt;/p&gt;&lt;p&gt;The exact format of the value returned by
          &lt;code&gt;toGMTString&lt;/code&gt; varies according to the
          platform.&lt;/p&gt;&lt;p&gt;You should use Date.toUTCString
          instead of &lt;code&gt;toGMTSTring&lt;/code&gt;.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="toLocaleDateString">
        <description>
          Converts a date to a string, returning the "date"
          portion using the current locale's conventions.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a string version of the Date object expressed in local time and formatted to local conventions.</return-description>
        <references>
          <reference name="Date.toDateString"/>
          <reference name="Date.toLocaleString"/>
          <reference name="Date.toLocaleTimeString"/>
          <reference name="Date.toString"/>
          <reference name="Date.toTimeString"/>
          <reference name="toGMTString"/>
          <reference name="toUTCString"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.5"/>
          <specification name="JScript 5.5"/>
          <specification name="ECMAScript v3"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;toLocaleDateString&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;In the following example, &lt;code&gt;today&lt;/code&gt; is a
          &lt;code&gt;Date&lt;/code&gt; object:&lt;/p&gt;&lt;pre&gt;today = new Date(95,11,18,17,28,35) //months are represented by 0 to 11
today.toLocaleDateString()&lt;/pre&gt;&lt;p&gt;In this example, &lt;code&gt;toLocaleDateString&lt;/code&gt;
          returns a string value that is similar to the following
          form. The exact format depends on the platform.&lt;/p&gt;&lt;pre&gt;12/18/95&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;The &lt;code&gt;toLocaleDateString&lt;/code&gt; method relies on
          the underlying operating system in formatting dates. It
          converts the date to a string using the formatting
          convention of the operating system where the script is
          running. For example, in the United States, the month
          appears before the date (04/15/98), whereas in Germany
          the date appears before the month (15.04.98). If the
          operating system is not year-2000 compliant and does not
          use the full year for years before 1900 or over 2000,
          &lt;code&gt;toLocaleDateString&lt;/code&gt; returns a string that is
          not year-2000 compliant. &lt;code&gt;toLocaleDateString&lt;/code&gt;
          behaves similarly to &lt;code&gt;toString&lt;/code&gt; when
          converting a year that the operating system does not
          properly format.&lt;/p&gt;&lt;p&gt;Methods such as &lt;code&gt;getHours&lt;/code&gt;,
          &lt;code&gt;getMinutes&lt;/code&gt;,
          and &lt;code&gt;getSeconds&lt;/code&gt;
          give more portable results than
          &lt;code&gt;toLocaleDateString&lt;/code&gt;.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="toLocaleString">
        <description>
          Converts a date to a string, using the current
          locale's conventions.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a string version of the date expressed in local time and formatted to local conventions.</return-description>
        <references>
          <reference name="Date.toLocaleDateString"/>
          <reference name="Date.toLocaleTimeString"/>
          <reference name="Date.toString"/>
          <reference name="Date.toUTCString"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;toLocaleString&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;In the following example, &lt;code&gt;today&lt;/code&gt; is a
          &lt;code&gt;Date&lt;/code&gt; object:&lt;/p&gt;&lt;pre&gt;today = new Date(95,11,18,17,28,35); //months are represented by 0 to 11
today.toLocaleString();&lt;/pre&gt;&lt;p&gt;In this example, &lt;code&gt;toLocaleString&lt;/code&gt; returns a
          string value that is similar to the following form. The
          exact format depends on the platform.&lt;/p&gt;&lt;pre&gt;12/18/95 17:28:35&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;The &lt;code&gt;toLocaleString&lt;/code&gt; method relies on the
          underlying operating system in formatting dates. It
          converts the date to a string using the formatting
          convention of the operating system where the script is
          running. For example, in the United States, the month
          appears before the date (04/15/98), whereas in Germany
          the date appears before the month (15.04.98). If the
          operating system is not year-2000 compliant and does not
          use the full year for years before 1900 or over 2000,
          &lt;code&gt;toLocaleString&lt;/code&gt; returns a string that is not
          year-2000 compliant. &lt;code&gt;toLocaleString&lt;/code&gt; behaves
          similarly to &lt;code&gt;toString&lt;/code&gt; when converting a year
          that the operating system does not properly format.&lt;/p&gt;&lt;p&gt;Methods such as &lt;code&gt;
          getHours&lt;/code&gt;, &lt;code&gt;
          getMinutes&lt;/code&gt;, and &lt;code&gt;
          getSeconds&lt;/code&gt; give more portable results than
          &lt;code&gt;toLocaleString&lt;/code&gt;.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="toLocaleTimeString">
        <description>
          Converts a date to a string, returning the "date"
          portion using the current locale's conventions.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a string representation of the time portion of a Date object, expressed in local time and formatted according to local conventions.</return-description>
        <references>
          <reference name="Date.toDateString"/>
          <reference name="Date.toLocaleDateString"/>
          <reference name="Date.toLocaleString"/>
          <reference name="Date.toString"/>
          <reference name="Date.toTimeString"/>
          <reference name="toGMTString"/>
          <reference name="toUTCString"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.5"/>
          <specification name="JScript 5.5"/>
          <specification name="ECMAScript v3"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;toLocaleTimeString&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;In the following example, &lt;code&gt;today&lt;/code&gt; is a
          &lt;code&gt;Date&lt;/code&gt; object:&lt;/p&gt;&lt;pre&gt;today = new Date(95,11,18,17,28,35) //months are represented by 0 to 11
today.toLocaleTimeString()&lt;/pre&gt;&lt;p&gt;In this example, &lt;code&gt;toLocaleTimeString&lt;/code&gt;
          returns a string value that is similar to the following
          form. The exact format depends on the platform.&lt;/p&gt;&lt;pre&gt;17:28:35&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;The &lt;code&gt;toLocaleTimeString&lt;/code&gt; method relies on
          the underlying operating system in formatting dates. It
          converts the date to a string using the formatting
          convention of the operating system where the script is
          running. For example, in the United States, the month
          appears before the date (04/15/98), whereas in Germany
          the date appears before the month (15.04.98). If the
          operating system is not year-2000 compliant and does not
          use the full year for years before 1900 or over 2000,
          &lt;code&gt;toLocaleTimeString&lt;/code&gt; returns a string that is
          not year-2000 compliant. &lt;code&gt;toLocaleTimeString&lt;/code&gt;
          behaves similarly to &lt;code&gt;toString&lt;/code&gt; when
          converting a year that the operating system does not
          properly format.&lt;/p&gt;&lt;p&gt;Methods such as &lt;code&gt;getHours&lt;/code&gt;,
          &lt;code&gt;getMinutes&lt;/code&gt;,
          and &lt;code&gt;getSeconds&lt;/code&gt;
          give more portable results than
          &lt;code&gt;toLocaleTimeString&lt;/code&gt;.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="toSource">
		<references>
			<reference name="Object.toSource"/>
		</references>
		<return-types>
			<return-type type="String"/>
		</return-types>
		<availability>
			<specification name="JavaScript 1.3"/>
			<specification name="ECMAScript v1"/>
		</availability>
		<remarks>&lt;p&gt;The &lt;code&gt;toSource&lt;/code&gt; method returns the following values:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt; For the built-in &lt;code&gt;Date&lt;/code&gt; object, &lt;code&gt;toSource&lt;/code&gt; returns the following string indicating that the source code is not available:&lt;/li&gt;&lt;/ul&gt;
&lt;pre&gt;function Date() {
   [native code]
}
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt; For instances of &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;toSource&lt;/code&gt; returns a string representing the source code.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;This method is usually called internally by JavaScript and not explicitly in code.&lt;/p&gt;</remarks>
		<description>Returns a string representing the source code of a Date object.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
		</browsers>
		<return-description>Returns a string representing the source code of a Date object.</return-description>
	</method>
	
	<method name="toString">
        <description>
          Returns a string representing the specified Date
          object.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a string representing the specified Date object.</return-description>
        <references>
          <reference name="Date.parse"/>
          <reference name="Date.toDateString"/>
          <reference name="Date.toLocaleString"/>
          <reference name="Date.toTimeString"/>
          <reference name="Date.toUTCString"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1 Overrides Object.toString"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;toString&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following assigns the &lt;code&gt;toString&lt;/code&gt; value
          of a &lt;code&gt;Date&lt;/code&gt; object to &lt;code&gt;myVar&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;x = new Date();
myVar=x.toString();   //assigns a value to myVar similar to:
     //Mon Sep 28 14:36:22 GMT-0700 (Pacific Daylight Time) 1998&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;The &lt;code&gt;Date&lt;/code&gt;
          object overrides the &lt;code&gt;toString&lt;/code&gt; method of the
          &lt;code&gt;Object&lt;/code&gt;
          object; it does not inherit &lt;code&gt;
          Object.toString&lt;/code&gt;. For &lt;code&gt;Date&lt;/code&gt;
          objects, the &lt;code&gt;toString&lt;/code&gt; method returns a
          string representation of the object.&lt;/p&gt;&lt;p&gt;JavaScript calls the &lt;code&gt;toString&lt;/code&gt; method
          automatically when a date is to be represented as a text
          value or when a date is referred to in a string
          concatenation.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="toTimeString">
        <description>Returns a string representation of the time portion of a Date object, expressed in local time.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a string representation of the time portion of a Date object, expressed in local time.</return-description>
        <references>
          <reference name="Date.toString"/>
          <reference name="Date.toDateString"/>
          <reference name="Date.toLocaleDateString"/>
          <reference name="Date.toLocaleString"/>
          <reference name="Date.toLocaleTimeString"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.5"/>
          <specification name="JScript 5.5"/>
          <specification name="ECMAScript v3"/>
        </availability>
      </method>
      
	  <method name="toUTCString">
        <description>
          Converts a date to a string, using the universal time
          convention.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.06+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a string representatin of the date, expressed in UTC time.</return-description>
        <references>
          <reference name="Date.toLocaleString"/>
          <reference name="Date.toString"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;toUTCString&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;var UTCstring;
Today = new Date();
UTCstring = Today.toUTCString();&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;The value returned by &lt;code&gt;toUTCString&lt;/code&gt; is a
          readable string formatted according to UTC convention.
          The format of the return value may vary according to the
          platform.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="UTC" scope="static">
        <description>
          Accepts the same parameters as the longest form of the
          constructor, and returns the number of milliseconds in a
          Date object since January 1, 1970, 00:00:00,
          universal time.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the number of milliseconds in a Date object since January 1, 1970, 00:00:00, universal time.</return-description>
        <parameters>
          <parameter name="year" type="Object" usage="required">
            <description>A year after 1900.</description>
          </parameter>
          <parameter name="month" type="Number" usage="required">
            <description>An integer between 0 and 11 representing the month.</description>
          </parameter>
          <parameter name="date" type="Number" usage="optional">
            <description>An integer between 1 and 31 representing the day of the month.</description>
          </parameter>
          <parameter name="hrs" type="Number" usage="optional">
            <description>An integer between 0 and 23 representing the hours.</description>
          </parameter>
          <parameter name="min" type="Number" usage="optional">
            <description>An integer between 0 and 59 representing the minutes.</description>
          </parameter>
          <parameter name="sec" type="Number" usage="optional">
            <description>An integer between 0 and 59 representing the seconds.</description>
          </parameter>
          <parameter name="ms" type="Number" usage="optional">
            <description>An integer between 0 and 999 representing the milliseconds.</description>
          </parameter>
        </parameters>
        <references>
          <reference name="Date"/>
          <reference name="Date.parse"/>
          <reference name="Date.setTime"/>
        </references>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;Date.UTC&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following statement creates a &lt;code&gt;Date&lt;/code&gt;
          object using GMT instead of local time:&lt;/p&gt;&lt;pre&gt;gmtDate = new Date(Date.UTC(96, 11, 1, 0, 0, 0));&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;&lt;code&gt;UTC&lt;/code&gt; takes comma-delimited date parameters
          and returns the number of milliseconds between January 1,
          1970, 00:00:00, universal time and the time you
          specified.&lt;/p&gt;&lt;p&gt;You should specify a full year for the year; for
          example, 1998. If a year between 0 and 99 is specified,
          the method converts the year to a year in the 20th
          century (1900 + year); for example, if you specify 95,
          the year 1995 is used.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;UTC&lt;/code&gt; method differs from the
          &lt;code&gt;Date&lt;/code&gt; constructor in two ways.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;Date.UTC&lt;/code&gt; uses universal time instead
          of the local time.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;Date.UTC&lt;/code&gt; returns a time value as a
          number instead of creating a &lt;code&gt;Date&lt;/code&gt;
          object.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If a parameter you specify is outside of the expected
          range, the &lt;code&gt;UTC&lt;/code&gt; method updates the other
          parameters to allow for your number. For example, if you
          use 15 for month, the year will be incremented by 1 (year
          + 1), and 3 will be used for the month.&lt;/p&gt;&lt;p&gt;Because &lt;code&gt;UTC&lt;/code&gt; is a static method of
          &lt;code&gt;Date&lt;/code&gt;, you always use it as
          &lt;code&gt;Date.UTC()&lt;/code&gt;, rather than as a method of a
          &lt;code&gt;Date&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="valueOf">
        <description>Returns the primitive value of a Date object.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the value of a Date object in milliseconds.</return-description>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.1"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;valueOf&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;x = new Date(56, 6, 17);
myVar = x.valueOf();      //assigns -424713600000 to myVar&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
        </example>
        <references>
          <reference name="Object.valueOf"/>
          <reference name="getTime"/>
        </references>
        <remarks>
          &lt;p&gt;The &lt;code&gt;valueOf&lt;/code&gt; method returns the primitive
          value of a &lt;code&gt;Date&lt;/code&gt; object as a number data
          type, the number of milliseconds since midnight 01
          January, 1970 UTC.&lt;/p&gt;&lt;p&gt;This method is functionally equivalent to the
          getTime method.&lt;/p&gt;&lt;p&gt;This method is usually called internally by JavaScript
          and not explicitly in code.&lt;/p&gt;
        </remarks>
      </method>
      
      <method name="toUTCString">
        <description>
          Converts a date to a string, using the universal time
          convention.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.06+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a string representatin of the date, expressed in UTC time.</return-description>
        <references>
          <reference name="Date.toLocaleString"/>
          <reference name="Date.toString"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;toUTCString&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;var UTCstring;
Today = new Date();
UTCstring = Today.toUTCString();&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;The value returned by &lt;code&gt;toUTCString&lt;/code&gt; is a
          readable string formatted according to UTC convention.
          The format of the return value may vary according to the
          platform.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="toISOString">
        <description>
         This function returns a String value represent the instance in time represented by this Date object.
        </description>
		<browsers>
			<browser platform="IE" version="9.0+"/>
			<browser platform="Mozilla" version="3.5+"/>
			<browser platform="Opera" version="10.5+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="4.0+" />
		</browsers>
        <return-description>Returns a String value represent the instance in time represented by this Date object.</return-description>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="ECMAScript v5.1"/>
        </availability>
        <example>var date = new Date("2009-05-21T16:06:05.000Z");
// Prints 2009-05-21T16:06:05.000Z
print( date.toISOString() );
        </example>
        <remarks>
          The format of the String is the Date Time string format defined in 15.9.1.15. All fields are present in the String. The time zone is always UTC, denoted by the suffix Z. If the time value of this object is not a finite Number a RangeError exception is thrown.
        </remarks>
        <exceptions>
        	<exception type="RangeError">
        		<description>If the time value of this object is not a finite Number a RangeError exception is thrown.</description>
        	</exception>
        </exceptions>
      </method>
    </methods>
    <references>
      <reference name="Date.parse"/>
      <reference name="Date.UTC"/>
    </references>
    <availability>
      <specification name="JavaScript 1.0"/>
      <specification name="JScript 1.0"/>
      <specification name="ECMAScript v1"/>
    </availability>
    <example>
      &lt;h3&gt;Several ways to assign dates&lt;/h3&gt;&lt;p&gt;The following examples show several ways to assign
      dates:&lt;/p&gt;&lt;pre&gt;today = new Date();
birthday = new Date("December 17, 1995 03:24:00");
birthday = new Date(95,11,17);
birthday = new Date(95,11,17,3,24,0);&lt;/pre&gt;
    </example>
    <remarks>
      &lt;p&gt;If you supply no arguments, the constructor creates a
      &lt;code&gt;Date&lt;/code&gt; object for today's date and time
      according to local time. If you supply some arguments but
      not others, the missing arguments are set to 0. If you
      supply any arguments, you must supply at least the year,
      month, and day. You can omit the hours, minutes, seconds,
      and milliseconds.&lt;/p&gt;&lt;p&gt;The date is measured in milliseconds since midnight 01
      January, 1970 UTC. A day holds 86,400,000 milliseconds.
      The Date object range is -100,000,000 days to 100,000,000
      days relative to 01 January, 1970 UTC.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;Date&lt;/code&gt; object provides uniform behavior
      across platforms.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;Date&lt;/code&gt; object supports a number of UTC
      (universal) methods, as well as local time methods. UTC,
      also known as Greenwich Mean Time (GMT), refers to the
      time as set by the World Time Standard. The local time is
      the time known to the computer where JavaScript is
      executed.&lt;/p&gt;&lt;p&gt;For compatibility with millennium calculations (in
      other words, to take into account the year 2000), you
      should always specify the year in full; for example, use
      1998, not 98. To assist you in specifying the complete
      year, JavaScript includes the methods &lt;code&gt;
      getFullYear&lt;/code&gt;, &lt;code&gt;
      setFullYear&lt;/code&gt;, &lt;code&gt;
      getUTCFullYear&lt;/code&gt;, and &lt;code&gt;
      setUTCFullYear&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The following example returns the time elapsed between
      &lt;code&gt;timeA&lt;/code&gt; and &lt;code&gt;timeB&lt;/code&gt; in
      milliseconds.&lt;/p&gt;&lt;pre&gt;timeA = new Date();
// Statements here to take some action.
timeB = new Date();
timeDifference = timeB - timeA;&lt;/pre&gt;
    </remarks>
</class>

<class type="Enumerator" superclass="Object">
	<description>Enumerator is a proprietary Microsoft object that iterates over items in a group.</description>
	<browsers>
		<browser platform="IE" version="4.0+"/>
	</browsers>
	<constructors>
		<constructor>
			<description>Creates a new instance of an Enumerator object.</description>
				<parameters>
					<parameter name="group" type="Object" usage="required">
						<description>Group of items to be iterated over.</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="Enumerator"/>
				</return-types>
			</constructor>
		</constructors>
			
            <!--
			<properties>
				<property name="" type="">
					<description>No properties in Enumerator.</description>
				</property>
			</properties>
			-->

			<methods>
				<method name="atEnd">
					<return-types>
						<return-type type="Boolean"/>
					</return-types>
					<availability>
						<specification name="JScript 3.0"/>
					</availability>
					<remarks>IE only. Supported in IE4+.</remarks>
					<description>Returns true if the current item is the last one in the group.</description>
					<browsers>
						<browser platform="IE" version="4.0+"/>
					</browsers>
					<return-description>Returns true if the current item is the last one in the group.</return-description>
				</method>
				
				<method name="item">
					<return-types>
						<return-type type="Object"/>
					</return-types>
					<availability>
						<specification name="JScript 3.0"/>
					</availability>
					<remarks>IE only. Supported in IE4+.</remarks>
					<description>Returns the current item in the group.</description>
					<browsers>
						<browser platform="IE" version="4.0+"/>
					</browsers>
					<return-description>Returns the current item in the group.</return-description>
				</method>
				
				<method name="moveFirst">
					<return-types>
						<return-type type="Object"/>
					</return-types>
					<availability>
						<specification name="JScript 3.0"/>
					</availability>
					<remarks>IE only. Supported in IE4+.</remarks>
					<description>Moves the current item to the first position in the group.</description>
					<browsers>
						<browser platform="IE" version="4.0+"/>
					</browsers>
					<return-description>Returns the current item in its new position.</return-description>
				</method>
				
				<method name="moveNext">
					<return-types>
						<return-type type="Object"/>
					</return-types>
					<availability>
						<specification name="JScript 3.0"/>
					</availability>
					<remarks>IE only. Supported in IE4+.</remarks>
					<description>Moves the current item to the next position in the group.</description>
					<browsers>
						<browser platform="IE" version="4.0+"/>
					</browsers>
					<return-description>Returns the current item in its new position.</return-description>
				</method>
			
			</methods>
			<availability>
				<specification name="JScript 3.0"/>
			</availability>
			<remarks>IE only. Supported in IE4+.</remarks>
			<interfaces>
				<interface type=""/>
			</interfaces>
</class>
	
<class type="Error" superclass="Object">
    <description>Represents a runtime error.</description>
	<browsers>
		<browser platform="IE" version="5.0+"/>
		<browser platform="Mozilla" version="1.0+"/>
		<browser platform="Netscape" version="6.0+"/>
		<browser platform="Opera" version="7.0+" />
		<browser platform="Chrome" version="5.0+" />
		<browser platform="Safari" version="1.0+" />
	</browsers>
    <constructors>
      <constructor>
        <description>Constructs a new instance of an Error object.</description>
        <parameters>
          <parameter name="message" type="String" usage="optional">
            <description>Error message.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Error"/>
        </return-types>
      </constructor>
    </constructors>
    <properties>
      <property name="constructor" type="Object" >
		<availability>
			<specification name="JavaScript 1.5"/>
			<specification name="JScript 5.0"/>
			<specification name="ECMAScript v3"/>
		</availability>
		<description>Specifies the function that creates the Error prototype.</description>
		<browsers>
			<browser platform="IE" version="5.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="6.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
	</property>
	<property name="description" type="String">
		<availability>
			<specification name="JScript 5.0"/>
		</availability>
		<description>Description or message text of the error.</description>
		<browsers>
			<browser platform="IE" version="5.0+"/>
		</browsers>
	</property>
	<property name="fileName" type="String">
		<availability>
			<specification name="JavaScript 1.5"/>
		</availability>
		<description>Path or URL to the file that raised the error.</description>
		<browsers>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="6.0+"/>
		</browsers>
	</property>
	
	<property name="lineNumber" type="Number">
		<availability>
			<specification name="JavaScript 1.5"/>
		</availability>
		<description>Line number in file that raised the error.</description>
		<browsers>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="6.0+"/>
		</browsers>
	</property>
	
	<property name="message" type="String" access="read-write">
        <description>Error message.</description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="6.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.5"/>
          <specification name="JScript 5.5"/>
          <specification name="ECMAScript v3"/>
        </availability>
    </property>
    
	<property name="name" type="String" access="read-write">
        <description>Error name.</description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="6.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.5"/>
          <specification name="JScript 5.5"/>
          <specification name="ECMAScript v3"/>
        </availability>
      </property>
	  
	  <property name="number" type="Number">
		<availability>
			<specification name="JScript 5.0"/>
		</availability>
		<description>Error number.</description>
		<browsers>
			<browser platform="IE" version="5.0+"/>
		</browsers>
	</property>
	
    <property name="prototype" type="Error">
		<availability>
			<specification name="JavaScript 1.5"/>
			<specification name="JScript 5.0"/>
			<specification name="ECMAScript v3"/>
		</availability>
		<description>Reference to the Error object prototype.</description>
		<browsers>
			<browser platform="IE" version="5.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="6.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
	</property>
	
	<property name="stack" type="String">
		<availability>
			<specification name="JavaScript 1.5"/>
		</availability>
		<description>Stack trace that gives information about the context of the error.</description>
		<browsers>
			<browser platform="IE" version="5.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="6.0+"/>
		</browsers>
	</property>
</properties>

    <methods>
      <method name="toString">
        <description>Converts an Error object to a string.</description>
		<browsers>
			<browser platform="IE" version="5.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="6.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a string defined by the implementation.</return-description>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.5"/>
          <specification name="JScript 5.5"/>
          <specification name="ECMAScript v3"/>
        </availability>
      </method>
    </methods>
    <references>
      <reference name="EvalError"/>
      <reference name="RangeError"/>
      <reference name="ReferenceError"/>
      <reference name="SyntaxError"/>
      <reference name="TypeError"/>
      <reference name="URIError"/>
    </references>
    <availability>
      <specification name="JavaScript 1.5"/>
      <specification name="JScript 5.5"/>
      <specification name="ECMAScript v3"/>
    </availability>
    <example>
      &lt;h3&gt;Throwing a generic error&lt;/h3&gt;&lt;p&gt;Usually you create an Error object with the intention
      of raising it using the throw
      keyword. You can handle the error using the try...catch
      construct:&lt;/p&gt;&lt;pre&gt;try {
    throw new Error("Whoops!");
} catch (e) {
    alert(e.name + ": " + e.message);
}&lt;/pre&gt;&lt;h3&gt;Handling a specific error&lt;/h3&gt;&lt;p&gt;You can choose to handle only specific error types by
      testing the error type with the instanceof
      keyword:&lt;/p&gt;&lt;pre&gt;try {
    foo.bar();
} catch (e) {
    if (e instanceof EvalError) {
        alert(e.name + ": " + e.message);
    } else if (e instanceof RangeError) {
        alert(e.name + ": " + e.message);
    }
    // ... etc
}&lt;/pre&gt;&lt;p&gt;You can also test the error's &lt;code&gt;name&lt;/code&gt;
      property to determine the error type. You can use this
      facility to create "user-defined" error types:&lt;/p&gt;&lt;pre&gt;try {
    var error = new Error("Whoops!");
    error.name = "MyError";
    throw error;
} catch (e) {
    if (e.name == "EvalError") {
        alert(e.name + ": " + e.message);
    } else if (e.name == "RangeError") {
        alert(e.name + ": " + e.message);
    }
    // ... etc
    else if (e.name == "MyError") {
        alert(e.name + ": " + e.message);
    }
}&lt;/pre&gt;
    </example>
    <remarks>
      &lt;p&gt;Besides the base &lt;code&gt;Error&lt;/code&gt;, there are six
      other core error types in JavaScript 1.5:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
      EvalError: raised when an error occurs executing
      code in &lt;code&gt;eval()&lt;/code&gt;&lt;/li&gt;&lt;li&gt;
      RangeError: raised when a numeric variable or
      parameter is outside of its valid range&lt;/li&gt;&lt;li&gt;
      ReferenceError: raised when de-referencing an
      invalid reference&lt;/li&gt;&lt;li&gt;
      SyntaxError: raised when a syntax error occurs
      while parsing code in &lt;code&gt;eval()&lt;/code&gt;&lt;/li&gt;&lt;li&gt;
      TypeError: raised when a variable or parameter is
      not a valid type&lt;/li&gt;&lt;li&gt;
      URIError: raised when &lt;code&gt;encodeURI()&lt;/code&gt; or
      &lt;code&gt;decodeURI()&lt;/code&gt; are passed invalid
      parameters&lt;/li&gt;&lt;/ul&gt;
    </remarks>
  </class>
  
  <class type="EvalError" superclass="Error">
    <description>The EvalError is thrown when the eval method is used incorrectly.</description>
	<browsers>
		<browser platform="IE" version="5.0+"/>
		<browser platform="Mozilla" version="1.0+"/>
		<browser platform="Netscape" version="6.0+"/>
	</browsers>
    <constructors>
      <constructor>
        <description>Creates a new instance of EvalError.</description>
        <parameters>
          <parameter name="message" type="String" usage="optional">
            <description>An error message associated with the EvalError object.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="EvalError"/>
        </return-types>
      </constructor>
    </constructors>
    <properties>
      <property name="message" type="String" access="read-write">
        <description>An error message associated with the EvalError object.</description>
      </property>
      <property name="name" type="String" access="read-write">
        <description>Name of the EvalError object.</description>
		<browsers>
			<browser platform="IE" version="5.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="6.0+"/>
		</browsers>
      </property>
    </properties>
    <references>
      <reference name="Error"/>
      <reference name="Error.message"/>
      <reference name="Error.name"/>
    </references>
    <availability>
      <specification name="JavaScript 1.5"/>
      <specification name="JScript 5.5"/>
      <specification name="ECMAScript v3"/>
    </availability>
  </class>
  
  <class type="Function" superclass="Object">
    <description>
      Every function in JavaScript is actually a Function object.
    </description>
	<browsers>
		<browser platform="IE" version="4.0+"/>
		<browser platform="Mozilla" version="1.0+"/>
		<browser platform="Netscape" version="3.0+"/>
		<browser platform="Opera" version="7.0+" />
		<browser platform="Chrome" version="5.0+" />
		<browser platform="Safari" version="1.0+" />
	</browsers>
    <constructors>
      <constructor>
        <description>Creates a new instance of the Function object.</description>
        <parameters>
          <parameter name="arg1, arg2, ... argN" type="String" usage="zero-or-more">
            <description>Names to be used by the function as formal argument names. Each must be a string that corresponds to a valid JavaScript identifier or a list of such strings separated with a comma; for example "x", "theValue", or "a,b".</description>
          </parameter>
          <parameter name="functionBody" type="String" usage="required">
            <description>A string containing the JavaScript statements comprising the function definition.</description>
          </parameter>
        </parameters>
        <exceptions>
          <exception type="SyntaxError">
            <description>Throws a SyntaxError if there was a syntax error in one of the arguments.</description>
          </exception>
        </exceptions>
        <return-types>
          <return-type type="Function"/>
        </return-types>
      </constructor>
    </constructors>
    <properties>
      
	  <property name="arguments" type="Function" scope="invocation" access="read-write">
        <description>
          An array-like object corresponding to the arguments
          passed to a function.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
          <specification name="deprecated by ECMAScript v3"/>
        </availability>
        <references>
          <reference name="Arguments"/>
        </references>
        <remarks>
          &lt;p&gt;Use the &lt;code&gt;arguments&lt;/code&gt;
          object available within functions instead of
          &lt;code&gt;Function.arguments&lt;/code&gt;.&lt;/p&gt;
        </remarks>
      </property>
      <!--
      <property name="arity" type="Number">
		<availability>
			<specification name="JavaScript 1.2"/>
			<specification name="Deprecated in JavaScript 1.4"/>
		</availability>
		<references>
			<reference name="arguments.length"/>
			<reference name="Function.length"/>
		</references>
		<example>See &lt;code&gt;Function.length&lt;/code&gt; for an example of &lt;code&gt;arity&lt;/code&gt;.</example>
		<remarks>&lt;p&gt;&lt;code&gt;arity&lt;/code&gt; is no longer used and has been replaced by the &lt;code&gt;length&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;arity&lt;/code&gt; is external to the function, and indicates how many arguments a function expects. By contrast, &lt;code&gt;arguments.length&lt;/code&gt; provides the number of arguments actually passed to a function.&lt;/p&gt;
</remarks>
		<description>Number of arguments expected by the function.</description>
	</property>
    -->
	<property name="caller" type="Function" scope="invocation" access="read-write">
        <description>
          Specifies the function that invoked the currently
          executing function.This property is not part of ECMA-262 Edition 3
          standard. It is implemented at least in SpiderMonkey (the JavaScript engine
          used in Mozilla) [1] and JScript.
        </description>
				<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Netscape" version="3.0+"/>
		</browsers>
        <availability>
          <specification name="JavaScript 1.0, JScript 2.0"/>
          <specification name="deprecated by ECMAScript"/>
        </availability>

        <example>
          &lt;h3&gt;Checking the value of a function's
          &lt;code&gt;caller&lt;/code&gt; property&lt;/h3&gt;&lt;p&gt;The following code checks the value a function's
          &lt;code&gt;caller&lt;/code&gt; property.&lt;/p&gt;&lt;pre&gt;function myFunc() {
   if (myFunc.caller == null) {
      return ("The function was called from the top!");
   } else
      return ("This function's caller was " + myFunc.caller);
}&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;See
          arguments.caller.&lt;/p&gt;
        </remarks>
      </property>
	  
      <property name="constructor" type="Object">
			<availability>
				<specification name="JavaScript 1.1"/>
				<specification name="JScript 2.0"/>
				<specification name="ECMAScript v1"/>
			</availability>
			<references>
				<reference name="Object.constructor"/>
			</references>
			<description>Specifies the function that creates the Function prototype.</description>
			<browsers>
				<browser platform="IE" version="4.0+"/>
				<browser platform="Mozilla" version="1.0+"/>
				<browser platform="Netscape" version="3.0+"/>
				<browser platform="Opera" version="7.0+" />
				<browser platform="Chrome" version="5.0+" />
				<browser platform="Safari" version="1.0+" />
			</browsers>
		</property>
		
		<property name="length" type="Number" access="read-write">
        	<description>Specifies the number of arguments expected by the function.</description>
			<browsers>
				<browser platform="IE" version="4.0+"/>
				<browser platform="Mozilla" version="1.0+"/>
				<browser platform="Netscape" version="3.0+"/>
				<browser platform="Opera" version="7.0+" />
				<browser platform="Chrome" version="5.0+" />
				<browser platform="Safari" version="1.0+" />
			</browsers>
      	 	<availability>
        		<specification name="JavaScript 1.1"/>
         		<specification name="JScript 2.0"/>
         		<specification name="ECMAScript v1"/>
       		</availability>
       		<references>
          		<reference name="Arguments.length"/>
       		</references>
        	<example>
          &lt;h3&gt;Using &lt;code&gt;Function.length&lt;/code&gt; and
          &lt;code&gt;arguments.length&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following example demonstrates the use of
          &lt;code&gt;Function.length&lt;/code&gt; and
          &lt;code&gt;arguments.length&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;function addNumbers(x, y){
   if (arguments.length == addNumbers.length) {
      return (x + y);
   }
   else
      return 0;
}&lt;/pre&gt;&lt;p&gt;If you pass more than two arguments to this function,
          the function returns 0:&lt;/p&gt;&lt;pre&gt;addNumbers(3,4,5)   // returns 0
addNumbers(3,4)     // returns 7
addNumbers(103,104) // returns 207&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;&lt;code&gt;length&lt;/code&gt; is external to a function, and
          indicates how many arguments the function expects, i.e.
          the number of formal parameters. By contrast,
          &lt;code&gt;
          arguments.length&lt;/code&gt; is local to a function and
          provides the number of arguments actually passed to the
          function.&lt;/p&gt;
        </remarks>
      </property>
      <property name="prototype" type="Function" access="read-write">
        <description>Creates an instance of a Function class.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.1"/>
          <specification name="JScript 2.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;p&gt;The following example creates a method,
          &lt;code&gt;str_rep&lt;/code&gt;, and uses the statement
          &lt;code&gt;String.prototype.rep = str_rep&lt;/code&gt; to add the
          method to all &lt;code&gt;String&lt;/code&gt; objects. All objects
          created with &lt;code&gt;new String()&lt;/code&gt; then have that
          method, even objects already created. The example then
          creates an alternate method and adds that to one of the
          &lt;code&gt;String&lt;/code&gt;
          objects using the statement &lt;code&gt;s1.rep =
          fake_rep&lt;/code&gt;. The &lt;code&gt;str_rep&lt;/code&gt; method of the
          remaining &lt;code&gt;String&lt;/code&gt; objects is not altered.&lt;/p&gt;&lt;pre&gt;var s1 = new String("a")
var s2 = new String("b")
var s3 = new String("c")

// Create a repeat-string-N-times method for all String objects
function str_rep(n) {
   var s = "", t = this.toString()
   while (--n &amp;gt;= 0) s += t
   return s
}

String.prototype.rep = str_rep

s1a=s1.rep(3) // returns "aaa"
s2a=s2.rep(5) // returns "bbbbb"
s3a=s3.rep(2) // returns "cc"

// Create an alternate method and assign it to only one String variable
function fake_rep(n) {
   return "repeat " + this + " " + n + " times."
}

s1.rep = fake_rep
s1b=s1.rep(1) // returns "repeat a 1 times."
s2b=s2.rep(4) // returns "bbbb"
s3b=s3.rep(6) // returns "cccccc"&lt;/pre&gt;&lt;p&gt;The function in this example also works on
          &lt;code&gt;String&lt;/code&gt; objects not created with the
          &lt;code&gt;String&lt;/code&gt; constructor. The following code
          returns "zzz".&lt;/p&gt;&lt;pre&gt;"z".rep(3);&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;You can add new properties or methods to an existing
          class by adding them to the prototype associated with the
          constructor function for that class. The syntax for
          adding a new property or method is:&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;i&gt;fun&lt;/i&gt;.prototype.&lt;i&gt;name&lt;/i&gt; =
          &lt;i&gt;value&lt;/i&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;where&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;code&gt;fun&lt;/code&gt; &lt;/dt&gt;&lt;dd&gt;The name of the constructor function object you
          want to change.&lt;/dd&gt;&lt;/dl&gt;&lt;dl&gt;&lt;dt&gt;&lt;code&gt;name&lt;/code&gt; &lt;/dt&gt;&lt;dd&gt;Property or method to be
          created.&lt;/dd&gt;&lt;/dl&gt;&lt;dl&gt;&lt;dt&gt;&lt;code&gt;value&lt;/code&gt; &lt;/dt&gt;&lt;dd&gt;The value initially assigned to the new property or
          method.&lt;/dd&gt;&lt;/dl&gt;&lt;p&gt;If you add a property to the prototype for an object,
          then all objects created with that object's constructor
          function will have that new property, even if the objects
          existed before you created the new property. For example,
          assume you have the following statements:&lt;/p&gt;&lt;pre&gt;var array1 = new Array();
var array2 = new Array(3);
Array.prototype.description=null;
array1.description="Contains some stuff"
array2.description="Contains other stuff"&lt;/pre&gt;&lt;p&gt;After you set a property for the prototype, all
          subsequent objects created with &lt;code&gt;Array&lt;/code&gt; will
          have the property:&lt;/p&gt;&lt;pre&gt;anotherArray=new Array()
anotherArray.description="Currently empty";&lt;/pre&gt;&lt;p&gt;Note that &lt;code&gt;prototype&lt;/code&gt; is itself an object,
          and can be assigned properties and methods via the object
          literal syntax:&lt;/p&gt;&lt;pre&gt;function MyFunction() {
   alert("Created.");
}

MyFunction.prototype = {
   alert1: function(str) {
      alert(str);
   },

   five: 5,

   alert2: function() {
      alert("Hi.");
   }
};
var myObject = new MyFunction();
myObject.alert1("There.");
myObject.five;
myObject.alert2();&lt;/pre&gt;
        </remarks>
      </property>
    </properties>
    
	<methods>
      <method name="apply">
        <description>
          Allows you to apply a method of another object in the
          context of a different object (the calling object).
        </description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.06+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the value of the invoked function.</return-description>
        <parameters>
          <parameter name="thisArg" type="Function" usage="required">
            <description>Parameter for the calling object.</description>
          </parameter>
          <parameter name="argArray" type="Function" usage="required">
            <description>An argument array for the object.</description>
          </parameter>
        </parameters>
        <exceptions>
          <exception type="TypeError">
            <description>Throws a TypeError if the method is invoked on an object that is not a function, or with a argArray that is not an array or an Arguments object.</description>
          </exception>
        </exceptions>
        <references>
          <reference name="Function.call"/>
        </references>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 5.5"/>
          <specification name="ECMAScript v3"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;apply&lt;/code&gt; to chain
          constructors&lt;/h3&gt;&lt;p&gt;You can use &lt;code&gt;apply&lt;/code&gt; to chain constructors
          for an object, similar to Java. In the following example,
          the constructor for the &lt;code&gt;product&lt;/code&gt; object is
          defined with two parameters, &lt;code&gt;name&lt;/code&gt; and
          &lt;code&gt;value&lt;/code&gt;. Another object,
          &lt;code&gt;prod_dept&lt;/code&gt;, initializes its unique variable
          (&lt;code&gt;dept&lt;/code&gt;) and calls the constructor for
          &lt;code&gt;product&lt;/code&gt; in its constructor to initialize the
          other variables. In this example, the parameter
          &lt;code&gt;arguments&lt;/code&gt; is used for all arguments of the
          product object's constructor.&lt;/p&gt;&lt;pre&gt;function product(name, value){
   this.name = name;
   if(value &amp;gt; 1000)
      this.value = 999;
   else
      this.value = value;
}

function prod_dept(name, value, dept){
   this.dept = dept;
   product.apply(this, arguments);
}

prod_dept.prototype = new product();

// since 5 is less than 100 value is set
cheese = new prod_dept("feta", 5, "food");

// since 5000 is above 1000, value will be 999
car = new prod_dept("honda", 5000, "auto");&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;You can assign a different &lt;code&gt;this&lt;/code&gt; object
          when calling an existing function. &lt;code&gt;this&lt;/code&gt;
          refers to the current object, the calling object. With
          &lt;code&gt;apply&lt;/code&gt;, you can write a method once and then
          inherit it in another object, without having to rewrite
          the method for the new object.&lt;/p&gt;&lt;p&gt;&lt;code&gt;apply&lt;/code&gt; is very similar to &lt;code&gt;call&lt;/code&gt;,
          except for the type of arguments it supports. You can use
          an arguments array instead of a named set of parameters.
          With &lt;code&gt;apply&lt;/code&gt;, you can use an array literal,
          for example, &lt;code&gt;apply(this, [name, value])&lt;/code&gt;, or
          an &lt;code&gt;Array&lt;/code&gt; object, for example,
          &lt;code&gt;apply(this, new Array(name, value))&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;You can also use &lt;code&gt;
          arguments&lt;/code&gt; for the &lt;code&gt;argArray&lt;/code&gt;
          parameter. &lt;code&gt;arguments&lt;/code&gt; is a local variable of
          a function. It can be used for all unspecified arguments
          of the called object. Thus, you do not have to know the
          arguments of the called object when you use the
          &lt;code&gt;apply&lt;/code&gt; method. You can use
          &lt;code&gt;arguments&lt;/code&gt; to pass all the arguments to the
          called object. The called object is then responsible for
          handling the arguments.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="call">
        <description>
          Allows you to call (execute) a method of another
          object in the context of a different object (the calling
          object).
        </description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.06+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the value of the invoked function.</return-description>
        <parameters>
          <parameter name="thisArg" type="Function" usage="required">
            <description>Parameter for the calling object.</description>
          </parameter>
          <parameter name="arg1, arg2, ..." type="Number" usage="zero-or-more">
            <description>Arguments for the object.</description>
          </parameter>
        </parameters>
        <exceptions>
          <exception type="TypeError">
            <description>Throws a TypeError if the method is invoked on an object that is not a Function.</description>
          </exception>
        </exceptions>
        <references>
          <reference name="Function.apply"/>
        </references>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.5"/>
          <specification name="JScript 5.5"/>
          <specification name="ECMAScript v3"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;call&lt;/code&gt; to chain
          constructors for an object&lt;/h3&gt;&lt;p&gt;You can use &lt;code&gt;call&lt;/code&gt; to chain constructors
          for an object, similar to Java. In the following example,
          the constructor for the product object is defined with
          two parameters, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;.
          Another object, &lt;code&gt;prod_dept&lt;/code&gt;, initializes its
          unique variable (&lt;code&gt;dept&lt;/code&gt;) and calls the
          constructor for &lt;code&gt;product&lt;/code&gt; in its constructor
          to initialize the other variables.&lt;/p&gt;&lt;pre&gt;function product(name, value){
   this.name = name;
   if(value &amp;gt; 1000)
      this.value = 999;
   else
      this.value = value;
}

function prod_dept(name, value, dept){
   this.dept = dept;
   product.call(this, name, value);
}

prod_dept.prototype = new product();

// since 5 is less than 100 value is set
cheese = new prod_dept("feta", 5, "food");

// since 5000 is above 1000, value will be 999
car = new prod_dept("honda", 5000, "auto");&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;You can assign a different &lt;code&gt;this&lt;/code&gt; object
          when calling an existing function. &lt;code&gt;this&lt;/code&gt;
          refers to the current object, the calling object.&lt;/p&gt;&lt;p&gt;With &lt;code&gt;call&lt;/code&gt;, you can write a method once
          and then inherit it in another object, without having to
          rewrite the method for the new object.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="toSource">
		<references>
			<reference name="toString"/>
			<reference name="Object.valueOf"/>
		</references>
		<return-types>
			<return-type type="String"/>
		</return-types>
		<availability>
			<specification name="JavaScript 1.3"/>
			<specification name="ECMAScript v3"/>
		</availability>
		<example></example>
		<remarks>&lt;p&gt;The &lt;code&gt;toSource&lt;/code&gt; method returns the following values:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt; For the built-in &lt;code&gt;Function&lt;/code&gt; object, &lt;code&gt;toSource&lt;/code&gt; returns the following string indicating that the source code is not available:&lt;/li&gt;&lt;/ul&gt;
&lt;pre&gt;function Function() {
   [native code]
}
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt; For custom functions, &lt;code&gt;toSource&lt;/code&gt; returns the JavaScript source that defines the object as a string.
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;This method is usually called internally by JavaScript and not explicitly in code. You can call &lt;code&gt;toSource&lt;/code&gt; while debugging to examine the contents of an object.&lt;/p&gt;</remarks>
		<description>Returns a string representing the source code of the function.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
		</browsers>
		<return-description>Returns a string representing the source code of the function.</return-description>
	</method>
	
	<method name="toString">
        <description>
          Returns a string representing the source code of the
          function.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a string representing the source code of the function.</return-description>
        <exceptions>
          <exception type="TypeError">
            <description>Throws a TypeError if the method is invoked on an object that is not a Function.</description>
          </exception>
        </exceptions>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 2.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <remarks>
          &lt;p&gt;The Function
          object overrides the toString
          method of the Object
          object; it does not inherit &lt;code&gt;Object.toString&lt;/code&gt;.
          For &lt;code&gt;Function&lt;/code&gt; objects, the
          &lt;code&gt;toString&lt;/code&gt; method returns a string
          representation of the object.&lt;/p&gt;&lt;p&gt;JavaScript calls the &lt;code&gt;toString&lt;/code&gt; method
          automatically when a &lt;code&gt;Function&lt;/code&gt; is to be
          represented as a text value or when a
          &lt;code&gt;Function&lt;/code&gt; is referred to in a string
          concatenation.&lt;/p&gt;&lt;p&gt;For &lt;code&gt;Function&lt;/code&gt; objects, the built-in
          &lt;code&gt;toString&lt;/code&gt; method decompiles the function back
          into the JavaScript source that defines the function.
          This string includes the &lt;code&gt;function&lt;/code&gt; keyword,
          the argument list, curly braces, and function body.&lt;/p&gt;&lt;p&gt;For example, assume you have the following code that
          defines the &lt;code&gt;Dog&lt;/code&gt; object type and creates
          &lt;code&gt;theDog&lt;/code&gt;, an object of type
          &lt;code&gt;Dog&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;function Dog(name,breed,color,sex) {
   this.name=name
   this.breed=breed
   this.color=color
   this.sex=sex
}

theDog = new Dog("Gabby","Lab","chocolate","girl")&lt;/pre&gt;&lt;p&gt;Any time &lt;code&gt;Dog&lt;/code&gt; is used in a string context,
          JavaScript automatically calls the &lt;code&gt;toString&lt;/code&gt;
          function, which returns the following string:&lt;/p&gt;&lt;pre&gt;function Dog(name, breed, color, sex) { this.name = name; this.breed = breed; this.color = color; this.sex = sex; }&lt;/pre&gt;
        </remarks>
      </method>
    
	<method name="valueOf">
		<references>
			<reference name="toString"/>
			<reference name="Object.valueOf"/>
		</references>
		<return-types>
			<return-type type="String"/>
		</return-types>
		<availability>
			<specification name="JavaScript 1.1"/>
			<specification name="ECMAScript v1"/>
		</availability>
		<remarks>&lt;p&gt;The &lt;code&gt;valueOf&lt;/code&gt; method returns the following values:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt; For the built-in &lt;code&gt;Function&lt;/code&gt; object, &lt;code&gt;valueOf&lt;/code&gt; returns the following string indicating that the source code is not available:&lt;/li&gt;&lt;/ul&gt;
&lt;pre&gt;function Function() {
   [native code]
}
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt; For custom functions, &lt;code&gt;toSource&lt;/code&gt; returns the JavaScript source that defines the object as a string. The method is equivalent to the &lt;code&gt;toString&lt;/code&gt; method of the function.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;This method is usually called internally by JavaScript and not explicitly in code.&lt;/p&gt;</remarks>
		<description>Returns a string representing the source code of the function.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
		<return-description>Returns a string representing the source code of the function.</return-description>
	</method>
	
	<method name="bind">
        <description>The bind method takes one or more arguments, thisArg and (optionally) arg1, arg2, etc, and returns a new function object.</description>
        <parameters>
          <parameter name="thisArg" type="Function" usage="required">
            <description>Parameter for the calling object.</description>
          </parameter>
          <parameter name="arg1, arg2, ..." type="Object" usage="zero-or-more">
            <description>Arguments for the object.</description>
          </parameter>
        </parameters>
		<browsers>
			<browser platform="IE" version="9.0+"/>
			<browser platform="Mozilla" version="4.0+"/>
			<browser platform="Opera" version="12.0+" />
			<browser platform="Chrome" version="7.0+" />
			<browser platform="Safari" version="6.0+" />
		</browsers>
        <return-types>
          <return-type type="Function"/>
        </return-types>
        <availability>
          <specification name="ECMAScript v5.1"/>
        </availability>
        <example>var obj = {
  method: function(name){
    this.name = name;
  }
};
setTimeout( obj.method.bind(obj, "John"), 100 );</example>
        <remarks>Function objects created using Function.prototype.bind do not have a prototype property or the [[Code]], [[FormalParameters]], and [[Scope]] internal properties.</remarks>
        <exceptions>
        	<exception type="TypeError">
        		<description>If &lt;b&gt;this&lt;/b&gt; is not callable, a TypeError exception is thrown.</description>
        	</exception>
        </exceptions>
      </method>
</methods>
    <references>
      <reference name="Arguments"/>
    </references>
    <availability>
      <specification name="JavaScript 1.0"/>
      <specification name="JScript 1.0"/>
      <specification name="ECMAScript v1"/>
    </availability>
    <example>
      &lt;h3&gt;Creating "focus" and "blur" event handlers
      for a frame&lt;/h3&gt;&lt;p&gt;The following example creates &lt;code&gt;onFocus&lt;/code&gt; and
      &lt;code&gt;onBlur&lt;/code&gt; event handlers for a frame. This code
      exists in the same file that contains the
      &lt;code&gt;frameset&lt;/code&gt; tag. Note that scripting is the
      only way to create "focus" and "blur" event handlers for
      a frame, because you cannot specify the event handlers in
      the &lt;code&gt;frame&lt;/code&gt; tag.&lt;/p&gt;&lt;pre&gt;var frame = frames[0];
frame.onfocus = new Function("document.body.style.backgroundColor = 'white';");
frame.onblur = new Function("document.body.style.backgroundColor = '#bbbbbb';");&lt;/pre&gt;
    </example>
    <remarks>
      &lt;h3&gt;General&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Function&lt;/code&gt; objects created with the
      &lt;code&gt;Function&lt;/code&gt; constructor are evaluated each time
      they are used. This is less efficient than declaring a
      function and calling it within your code, because
      declared functions are parsed only once.&lt;/p&gt;&lt;h3&gt;Specifying arguments with the &lt;code&gt;Function&lt;/code&gt;
      constructor&lt;/h3&gt;&lt;p&gt;The following code creates a &lt;code&gt;Function&lt;/code&gt;
      object that takes two arguments.&lt;/p&gt;&lt;pre&gt;var multiply = new Function("x", "y", "return x * y");&lt;/pre&gt;&lt;p&gt;The arguments &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;
      are formal argument names that are used in the function
      body, &lt;code&gt;return x * y&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The preceding code assigns a function to the variable
      &lt;code&gt;multiply&lt;/code&gt;. To call the &lt;code&gt;Function&lt;/code&gt;
      object, you can specify the variable name as if it were a
      function, as shown in the following examples.&lt;/p&gt;&lt;pre&gt;var theAnswer = multiply(7, 6);

var myAge = 50;
if (myAge &amp;gt;= 39)
  myAge = multiply(myAge, .5); &lt;/pre&gt;
    </remarks>
  </class>
  
  <class type="Global" superclass="">
	<description>The Global object is the parent of all globally avaliable properties and methods.</description>
	<browsers>
		<browser platform="IE" version="3.0+"/>
		<browser platform="Mozilla" version="1.0+"/>
		<browser platform="Netscape" version="2.0+"/>
		<browser platform="Opera" version="7.0+" />
	</browsers>
	<constructors>
	</constructors>
	<properties>
		<property name="Infinity" type="Infinity" scope="static">
			<availability>
				<specification name="JavaScript 1.3"/>
				<specification name="JScript 3.0"/>
				<specification name="ECMAScript v1"/>
			</availability>
			<references>
				<reference name="Number.NEGATIVE_INFINITY"/>
				<reference name="Number.POSITIVE_INFINITY"/>
			</references>
			<remarks>
				&lt;p&gt;&lt;code&gt;Infinity&lt;/code&gt; is a property of the &lt;i&gt;global object&lt;/i&gt;, i.e. it is a variable in global scope.&lt;/p&gt;
&lt;p&gt;The initial value of &lt;code&gt;Infinity&lt;/code&gt; is &lt;code&gt;Number.POSITIVE_INFINITY&lt;/code&gt;. The value &lt;code&gt;Infinity&lt;/code&gt; (positive infinity) is greater than any other number including itself. This value behaves mathematically like infinity; for example, anything multiplied by &lt;code&gt;Infinity&lt;/code&gt; is &lt;code&gt;Infinity&lt;/code&gt;, and anything divided by &lt;code&gt;Infinity&lt;/code&gt; is 0.&lt;/p&gt;
			</remarks>
			<description>A numeric value representing infinity.</description>
			<browsers>
				<browser platform="IE" version="4.0+"/>
				<browser platform="Mozilla" version="1.0+"/>
				<browser platform="Netscape" version="4.06+"/>
				<browser platform="Opera" version="7.0+" />
				<browser platform="Chrome" version="5.0+" />
				<browser platform="Safari" version="1.0+" />
			</browsers>
		</property>
			
		<property name="NaN" type="NaN">
			<availability>
				<specification name="JavaScript 1.3"/>
				<specification name="JScript 3.0"/>
				<specification name="ECMAScript v1"/>
			</availability>
			<references>
				<reference name="isNaN"/>
				<reference name="Number.NaN"/>
			</references>
			<remarks>
				&lt;p&gt;&lt;code&gt;NaN&lt;/code&gt; is a property of the &lt;i&gt;global object&lt;/i&gt;, i.e. it is a variable in global scope.&lt;/p&gt;
&lt;p&gt;The initial value of &lt;code&gt;NaN&lt;/code&gt; is Not-A-Number - the same as the value of Number.NaN.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NaN&lt;/code&gt; is always unequal to any other number, including &lt;code&gt;NaN&lt;/code&gt; itself; you cannot check for the not-a-number value by comparing to &lt;code&gt;Number.NaN&lt;/code&gt;. Use the &lt;code&gt;isNaN&lt;/code&gt; function instead.&lt;/p&gt;
&lt;p&gt;Several JavaScript methods (such as the &lt;code&gt;Number&lt;/code&gt; constructor, &lt;code&gt;parseFloat&lt;/code&gt;, and &lt;code&gt;parseInt&lt;/code&gt;) return &lt;code&gt;NaN&lt;/code&gt; if the value specified in the parameter can not be parsed as a number.&lt;/p&gt;
&lt;p&gt;You might use the &lt;code&gt;NaN&lt;/code&gt; property to indicate an error condition for your function that returns a number in case of success.&lt;/p&gt;
&lt;p&gt;JavaScript prints the value &lt;code&gt;Number.NaN&lt;/code&gt; as &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt;

			</remarks>
			<description>A value representing Not-a-Number.</description>
			<browsers>
				<browser platform="IE" version="4.0+"/>
				<browser platform="Mozilla" version="1.0+"/>
				<browser platform="Netscape" version="4.06+"/>
				<browser platform="Opera" version="7.0+" />
				<browser platform="Chrome" version="5.0+" />
				<browser platform="Safari" version="1.0+" />
			</browsers>
		</property>
		
		<property name="undefined" type="undefined">
			<availability>
				<specification name="JavaScript 1.3"/>
				<specification name="JScript 5.5"/>
				<specification name="ECMAScript v1"/>
			</availability>
			<remarks>
				&lt;p&gt;&lt;code&gt;undefined&lt;/code&gt; is a property of the &lt;i&gt;global object&lt;/i&gt;, i.e. it is a variable in global scope.&lt;/p&gt;

&lt;p&gt;The initial value of &lt;code&gt;undefined&lt;/code&gt; is the primitive value &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A variable that has not been assigned a value is of type undefined. A method or statement also returns &lt;code&gt;undefined&lt;/code&gt; if the variable that is being evaluated does not have an assigned value. A function returns &lt;code&gt;undefined&lt;/code&gt; if a value was not returned.
&lt;/p&gt;&lt;p&gt;You can use &lt;code&gt;undefined&lt;/code&gt; and the strict equality operator to determine whether a variable has a value. In the following code, the variable &lt;code&gt;x&lt;/code&gt; is not defined, and the &lt;code&gt;if&lt;/code&gt; statement evaluates to true.&lt;/p&gt;
&lt;pre&gt;var x;
if (x === undefined) {
   // these statements execute
}
&lt;/pre&gt;
&lt;p&gt;Note: The strict equality operator rather than the standard equality operator must be used here, because &lt;code&gt;x == undefined&lt;/code&gt; also checks whether &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, while strict equality doesn't. &lt;code&gt;null&lt;/code&gt; is not equivalent to &lt;code&gt;undefined&lt;/code&gt;. See comparison operators for details.&lt;/p&gt;

&lt;p&gt;Alternatively, typeof can be used:&lt;/p&gt;
&lt;pre&gt;var x;
if (typeof x == 'undefined') {
   // these statements execute
}
&lt;/pre&gt;
			</remarks>
			<description>The value undefined.</description>
			<browsers>
				<browser platform="IE" version="5.5+"/>
				<browser platform="Mozilla" version="1.0+"/>
				<browser platform="Netscape" version="4.06+"/>
				<browser platform="Opera" version="7.0+" />
				<browser platform="Chrome" version="5.0+" />
				<browser platform="Safari" version="1.0+" />
			</browsers>
		</property>
		
		</properties>
		
		<methods>
			
			<method name="decodeURI">
				<parameters>
					<parameter name="encodedURI" type="String" usage="required">
						<description>A complete, encoded Uniform Resource Identifier.</description>
					</parameter>
				</parameters>
				<references>
					<reference name="decodeURIComponent"/>
					<reference name="encodeURI"/>
					<reference name="encodeURIComponent"/>
				</references>
				<return-types>
					<return-type type="String"/>
				</return-types>
				<availability>
					<specification name="JavaScript 1.5"/>
					<specification name="JScript 5.5"/>
					<specification name="ECMAScript v3"/>
				</availability>
				<remarks>
				&lt;p&gt;Replaces each escape sequence in the encoded URI with the character that it represents.&lt;/p&gt;
&lt;p&gt;Does not decode escape sequences that could not have been introduced by &lt;code&gt;encodeURI&lt;/code&gt;.&lt;/p&gt;
				</remarks>
				<description>Decodes a Uniform Resource Identifier (URI) previously created by encodeURI or by a similar routine.</description>
				<browsers>
					<browser platform="IE" version="5.5+"/>
					<browser platform="Mozilla" version="1.0+"/>
					<browser platform="Netscape" version="6.0+"/>
					<browser platform="Opera" version="7.0+" />
				</browsers>
				<return-description>Returns a URI-decoded string.</return-description>
			</method>
			
			<method name="decodeURIComponent">
				<parameters>
					<parameter name="encodedURI" type="String" usage="required">
						<description>An encoded component of a URI.</description>
					</parameter>
				</parameters>
				<references>
					<reference name="decodeURI"/>
					<reference name="encodeURI"/>
					<reference name="encodeURIComponent"/>
				</references>
				<return-types>
					<return-type type="String"/>
				</return-types>
				<availability>
					<specification name="JavaScript 1.5"/>
					<specification name="JScript 5.5"/>
					<specification name="ECMAScript v3"/>
				</availability>
				<remarks>Replaces each escape sequence in the encoded URI component with the character that it represents.</remarks>
				<description>Decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.</description>
				<browsers>
					<browser platform="IE" version="5.5+"/>
					<browser platform="Mozilla" version="1.0+"/>
					<browser platform="Netscape" version="6.0+"/>
					<browser platform="Opera" version="7.0+" />
				</browsers>
				<return-description>Returns a decoded URI.</return-description>
			</method>
			
			<method name="encodeURI">
				<parameters>
					<parameter name="URI" type="String" usage="required">
						<description>A complete Uniform Resource Identifier.</description>
					</parameter>
				</parameters>
				<references>
					<reference name="decodeURI"/>
					<reference name="decodeURIComponent"/>
					<reference name="encodeURIComponent"/>
				</references>
				<return-types>
					<return-type type="String"/>
				</return-types>
				<availability>
					<specification name="JavaScript 1.5"/>
					<specification name="JScript 5.5"/>
					<specification name="ECMAScript v3"/>
				</availability>
				<remarks>
					&lt;p&gt;Assumes that the URI is a complete URI, so does not encode reserved characters that have special meaning in the URI.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;encodeURI&lt;/code&gt; replaces all characters except the following with the appropriate UTF-8 escape sequences:&lt;/p&gt;

&lt;table class="fullwidth-table"&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class="header"&gt;Type&lt;/td&gt;
&lt;td class="header"&gt;Includes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reserved characters&lt;/td&gt;
&lt;td&gt;&lt;code&gt;; , / : @ &amp; = + $&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Unescaped characters&lt;/td&gt;
&lt;td&gt;alphabetic, decimal digits, &lt;code&gt;- _ . ! ~ * ' ( )&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Score&lt;/td&gt;
&lt;td&gt;&lt;code&gt;#&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;Note that &lt;code&gt;encodeURI&lt;/code&gt; by itself &lt;i&gt;cannot&lt;/i&gt; form proper HTTP GET and POST requests, such as for XMLHTTPRequests, because "&amp;", "+", and "=" are not encoded, which are treated as special characters in GET and POST requests. &lt;code&gt;encodeURIComponent&lt;/code&gt;, however, does encode these characters. These behaviors are most likely not consistent across browsers.&lt;/p&gt;
				</remarks>
				<description>Encodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, or three escape sequences representing the UTF-8 encoding of the character.</description>
				<browsers>
					<browser platform="IE" version="5.5+"/>
					<browser platform="Mozilla" version="1.0+"/>
					<browser platform="Netscape" version="6.0+"/>
					<browser platform="Opera" version="7.0+" />
				</browsers>
				<return-description>Returns an encoded URI.</return-description>
			</method>
			
			<method name="encodeURIComponent">
				<parameters>
					<parameter name="String" type="String" usage="required">
						<description>A component of a Uniform Resource Identifier.</description>
					</parameter>
				</parameters>
				<references>
					<reference name="decodeURI"/>
					<reference name="decodeURIComponent"/>
					<reference name="encodeURI"/>
				</references>
				<return-types>
					<return-type type="String"/>
				</return-types>
				<availability>
					<specification name="JavaScript 1.5"/>
					<specification name="JScript 5.5"/>
					<specification name="ECMAScript v3"/>
				</availability>
				<remarks>
					&lt;p&gt;encodeURIComponent escapes all characters except the following: alphabetic, decimal digits, &lt;code&gt;- _ . ! ~ * ' ( )&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For security reasons, you should call encodeURIComponent on any user-entered parameters that will be passed as part of a URI. For example, a user could type "&lt;kbd&gt;Thyme &amp;time=again&lt;/kbd&gt;" for a variable &lt;code&gt;comment&lt;/code&gt;. Not using encodeURIComponent on this variable will give &lt;code&gt;comment=Thyme%20&amp;time=again&lt;/code&gt;. Note that the ampersand and the equal sign mark a new key and value pair. So instead of having a POST &lt;code&gt;comment&lt;/code&gt; key equal to "&lt;kbd&gt;Thyme &amp;time=again&lt;/kbd&gt;", you have two POST keys, one equal to "&lt;kbd&gt;Thyme &lt;/kbd&gt;" and another (&lt;code&gt;time&lt;/code&gt;) equal to &lt;kbd&gt;again&lt;/kbd&gt;. This is super, super, super dangerous if you are using PHP with register_globals turned on.&lt;/p&gt;
				</remarks>
				<description>Encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, or three escape sequences representing the UTF-8 encoding of the character.</description>
				<browsers>
					<browser platform="IE" version="5.5+"/>
					<browser platform="Mozilla" version="1.0+"/>
					<browser platform="Netscape" version="6.0+"/>
					<browser platform="Opera" version="7.0+" />
				</browsers>
				<return-description>Returns an encoded URI string.</return-description>
			</method>
			
			<method name="escape">
				<parameters>
					<parameter name="string" type="string" usage="required">
						<description>String to be URI-encoded.</description>
					</parameter>
				</parameters>
				<references>
					<reference name="unescape"/>
					<reference name="encodeURIComponent"/>
				</references>
				<return-types>
					<return-type type="String"/>
				</return-types>
				<availability>
					<specification name="JavaScript 1.0"/>
					<specification name="JScript 1.0"/>
				</availability>
				<remarks>escape has been phased out in favor of encodeURIComponent.</remarks>
				<description>Returns a URI-encoded version of a string.</description>
				<browsers>
					<browser platform="IE" version="3.0+"/>
					<browser platform="Mozilla" version="1.0+"/>
					<browser platform="Netscape" version="2.0+"/>
					<browser platform="Opera" version="7.0+" />
					<browser platform="Chrome" version="5.0+" />
					<browser platform="Safari" version="1.0+" />
				</browsers>
				<return-description>Returns a URI-encoded version of a string.</return-description>
			</method>
			
			<method name="eval">
				<parameters>
					<parameter name="string" type="String" usage="required">
						<description>A string representing a JavaScript expression, statement, or sequence of statements. string can include variables and properties of existing objects.</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="Boolean"/>
					<return-type type="Number"/>
					<return-type type="Object"/>
					<return-type type="String"/>
				</return-types>
				<availability>
					<specification name="JavaScript 1.0"/>
					<specification name="JScript 1.0"/>
					<specification name="ECMAScript v1"/>
				</availability>
				<example>
					&lt;p&gt;The following examples display output using &lt;code&gt;document.write&lt;/code&gt;. In server-side JavaScript, you can display the same output by calling the &lt;code&gt;write&lt;/code&gt; function instead of using &lt;code&gt;document.write&lt;/code&gt;.

&lt;/p&gt;
&lt;h3&gt;Example: Using &lt;code&gt;eval&lt;/code&gt; &lt;/h3&gt;
&lt;p&gt;In the following code, both of the statements containing &lt;code&gt;eval&lt;/code&gt; return 42. The first evaluates the string "&lt;code&gt;x + y + 1&lt;/code&gt;"; the second evaluates the string "&lt;code&gt;42&lt;/code&gt;".

&lt;/p&gt;
&lt;pre&gt;var x = 2;
var y = 39;
var z = "42";
eval("x + y + 1"); // returns 42
eval(z);           // returns 42 
&lt;/pre&gt;

&lt;h3&gt;Example: Using &lt;code&gt;eval&lt;/code&gt; to evaluate a string of JavaScript statements &lt;/h3&gt;
&lt;p&gt;The following example uses &lt;code&gt;eval&lt;/code&gt; to evaluate the string &lt;code&gt;str&lt;/code&gt;. This string consists of JavaScript statements that open an Alert dialog box and assign &lt;code&gt;z&lt;/code&gt; a value of 42 if &lt;code&gt;x&lt;/code&gt; is five, and assigns 0 to &lt;code&gt;z&lt;/code&gt; otherwise. When the second statement is executed, &lt;code&gt;eval&lt;/code&gt; will cause these statements to be performed, and it will also evaluate the set of statements and return the value that is assigned to &lt;code&gt;z&lt;/code&gt;.

&lt;/p&gt;
&lt;pre&gt;var str = "if (x == 5) {alert('z is 42'); z = 42;} else z = 0; ";
document.write("&lt;P&gt;z is ", eval(str));&lt;/pre&gt;

				</example>
				<remarks>
					&lt;p&gt;&lt;code&gt;eval&lt;/code&gt; is a top-level function and is not associated with any object.
&lt;/p&gt;&lt;p&gt;The argument of the &lt;code&gt;eval&lt;/code&gt; function is a string. If the string represents an expression, &lt;code&gt;eval&lt;/code&gt; evaluates the expression. If the argument represents one or more JavaScript statements, &lt;code&gt;eval&lt;/code&gt; performs the statements. Do not call &lt;code&gt;eval&lt;/code&gt; to evaluate an arithmetic expression; JavaScript evaluates arithmetic expressions automatically.

&lt;/p&gt;&lt;p&gt;If you construct an arithmetic expression as a string, you can use &lt;code&gt;eval&lt;/code&gt; to evaluate it at a later time. For example, suppose you have a variable &lt;code&gt;x&lt;/code&gt;. You can postpone evaluation of an expression involving &lt;code&gt;x&lt;/code&gt; by assigning the string value of the expression, say "&lt;code&gt;3 * x + 2&lt;/code&gt;", to a variable, and then calling &lt;code&gt;eval&lt;/code&gt; at a later point in your script.
&lt;/p&gt;&lt;p&gt;If the argument of &lt;code&gt;eval&lt;/code&gt; is not a string, &lt;code&gt;eval&lt;/code&gt; returns the argument unchanged. In the following example, the &lt;code&gt;String&lt;/code&gt; constructor is specified, and &lt;code&gt;eval&lt;/code&gt; returns a &lt;code&gt;String&lt;/code&gt; object rather than evaluating the string.

&lt;/p&gt;
&lt;pre&gt;eval(new String("2+2")); // returns a String object containing "2+2"
eval("2+2");             // returns 4
&lt;/pre&gt;
&lt;p&gt;You cannot indirectly use the &lt;code&gt;eval&lt;/code&gt; function by invoking it via a name other than &lt;code&gt;eval&lt;/code&gt;; if you do, a runtime error might occur. For example, you should not use the following code:
&lt;/p&gt;
&lt;pre&gt;var x = 2;
var y = 4;
var myEval = eval;
myEval("x + y");
&lt;/pre&gt;
&lt;p&gt;You should not use &lt;code&gt;eval&lt;/code&gt; to convert property names into properties.  For example, consider the following example. The &lt;code&gt;getFieldName(n)&lt;/code&gt; function returns the name of the specified form element as a string. The first statement assigns the string value of the third form element to the variable &lt;code&gt;field&lt;/code&gt;. The second statement uses &lt;code&gt;eval&lt;/code&gt; to display the value of the form element.

&lt;/p&gt;
&lt;pre&gt;var field = getFieldName(3);
document.write("The field named ", field, " has value of ",
   eval(field + ".value"));
&lt;/pre&gt;
&lt;p&gt;However &lt;code&gt;eval&lt;/code&gt; is not necessary here. In fact, its use here is discouraged.  Instead, use the member operators, which are much faster:
&lt;/p&gt;
&lt;pre&gt;var field = getFieldName(3);
document.write("The field named ", field, " has value of ",
   field[value]);
&lt;/pre&gt;

&lt;h2&gt; Backward Compatibility &lt;/h2&gt;

&lt;h3&gt; JavaScript 1.3 and earlier &lt;/h3&gt;
&lt;p&gt;You can use &lt;code&gt;eval&lt;/code&gt; indirectly, although it is discouraged.
&lt;/p&gt;

&lt;h3&gt; JavaScript 1.1 &lt;/h3&gt;

&lt;p&gt;&lt;code&gt;eval&lt;/code&gt; is also a method of all objects.&lt;/p&gt;
				</remarks>
				<description>Evaluates a string of JavaScript code without reference to a particular object.</description>
				<browsers>
					<browser platform="IE" version="3.0+"/>
					<browser platform="Mozilla" version="1.0+"/>
					<browser platform="Netscape" version="2.0+"/>
					<browser platform="Opera" version="7.0+" />
					<browser platform="Chrome" version="5.0+" />
					<browser platform="Safari" version="1.0+" />
				</browsers>
				<return-description>Returns the result of the evaluation.</return-description>
			</method>
			
			<method name="isFinite">
				<parameters>
					<parameter name="number" type="Number" usage="required">
						<description>Number to be evaluated.</description>
					</parameter>
				</parameters>
				<references>
					<reference name="Number.NEGATIVE_INFINITY"/>
					<reference name="Number.POSITIVE_INFINITY"/>
				</references>
				<return-types>
					<return-type type="Boolean"/>
				</return-types>
				<availability>
					<specification name="JavaScript 1.3"/>
					<specification name="JScript 3.0"/>
					<specification name="ECMAScript v1"/>
				</availability>
				<example>
&lt;h3&gt;Example: Using &lt;code&gt;isFinite&lt;/code&gt; &lt;/h3&gt;
&lt;p&gt;You can check a client input to determine whether it is a finite number.
&lt;/p&gt;
&lt;pre&gt;if (isFinite(ClientInput)) {
   /* take specific steps */
}&lt;/pre&gt;
				</example>
				<remarks>
					&lt;p&gt;&lt;code&gt;isFinite&lt;/code&gt; is a top-level function and is not associated with any object.
&lt;/p&gt;&lt;p&gt;You can use this method to determine whether a number is a finite number. The &lt;code&gt;isFinite&lt;/code&gt; method examines the number in its argument. If the argument is &lt;code&gt;NaN&lt;/code&gt;, positive infinity or negative infinity, this method returns &lt;code&gt;false&lt;/code&gt;, otherwise it returns &lt;code&gt;true&lt;/code&gt;. &lt;/p&gt;

				</remarks>
				<description>Evaluates whether an argument is a finite number.</description>
				<browsers>
					<browser platform="IE" version="4.0+"/>
					<browser platform="Mozilla" version="1.0+"/>
					<browser platform="Netscape" version="4.06+"/>
					<browser platform="Opera" version="7.0+" />
					<browser platform="Chrome" version="5.0+" />
					<browser platform="Safari" version="1.0+" />
				</browsers>
				<return-description>Returns true if the argument is a finite number.</return-description>
			</method>
			
			<method name="isNaN">
				<parameters>
					<parameter name="value" type="String" usage="required">
						<description>The value you want to evaluate.</description>
					</parameter>
				</parameters>
				<references>
					<reference name="Number.NaN"/>
					<reference name="parseFloat"/>
					<reference name="parseInt"/>
				</references>
				<return-types>
					<return-type type="Boolean"/>
				</return-types>
				<availability>
					<specification name="JavaScript 1.1"/>
					<specification name="JScript 3.0"/>
					<specification name="ECMAScript v1"/>
				</availability>
				<example>
					&lt;h3&gt;Example: Using &lt;code&gt;isNaN&lt;/code&gt; &lt;/h3&gt;
&lt;p&gt;The following example evaluates &lt;code&gt;floatValue&lt;/code&gt; to determine if it is a number, and then calls a procedure accordingly:&lt;/p&gt;
&lt;pre&gt;floatValue = parseFloat(toFloat);

if (isNaN(floatValue)) {
   notFloat();
} else {
   isFloat();
}&lt;/pre&gt;
				</example>
				<remarks>
					&lt;p&gt;&lt;code&gt;isNaN&lt;/code&gt; is a top-level function and is not associated with any object.
&lt;/p&gt;&lt;p&gt;The &lt;code&gt;parseFloat&lt;/code&gt; and &lt;code&gt;parseInt&lt;/code&gt; functions return &lt;code&gt;NaN&lt;/code&gt; when they evaluate a value that is not a number. &lt;code&gt;isNaN&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; if passed &lt;code&gt;NaN&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; otherwise.

&lt;/p&gt;&lt;p&gt;This function is necessary, because the value &lt;code&gt;NaN&lt;/code&gt; cannot be meaningfully tested with the equality operators. &lt;code&gt;x == NaN&lt;/code&gt; and &lt;code&gt;x === NaN&lt;/code&gt; are always false, regardless of what &lt;code&gt;x&lt;/code&gt; is, even if &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt;. For example, both &lt;code&gt;1 == NaN&lt;/code&gt; and &lt;code&gt;NaN == NaN&lt;/code&gt; return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
				</remarks>
				<description>Evaluates whether an argument is NaN.</description>
				<browsers>
					<browser platform="IE" version="4.0+"/>
					<browser platform="Mozilla" version="1.0+"/>
					<browser platform="Netscape" version="3.0+"/>
					<browser platform="Opera" version="7.0+" />
					<browser platform="Chrome" version="5.0+" />
					<browser platform="Safari" version="1.0+" />
				</browsers>
				<return-description>Returns true if the argument is NaN.</return-description>
			</method>
			
			<method name="parseFloat">
				<parameters>
					<parameter name="string" type="String" usage="required">
						<description>A string that represents the value you want to parse.</description>
					</parameter>
				</parameters>
				<references>
					<reference name="isNaN"/>
					<reference name="parseInt"/>
				</references>
				<return-types>
					<return-type type="Number"/>
				</return-types>
				<availability>
					<specification name="JavaScript 1.0"/>
					<specification name="JScript 1.0"/>
					<specification name="ECMAScript v1"/>
				</availability>
				<example>
					&lt;h3&gt;Example: &lt;code&gt;parseFloat&lt;/code&gt; returning a number &lt;/h3&gt;
&lt;p&gt;The following examples all return 3.14:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;code&gt;parseFloat("3.14");&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;parseFloat("314e-2");&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;parseFloat("0.0314E+2");&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;var x = "3.14";&lt;/code&gt;&lt;br&gt;&lt;code&gt;parseFloat(x);&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;parseFloat("3.14more non-digit characters");&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Example: &lt;code&gt;parseFloat&lt;/code&gt; returning NaN &lt;/h3&gt;

&lt;p&gt;The following example returns &lt;code&gt;NaN&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;parseFloat("FF2");&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
				</example>
				<remarks>
					&lt;p&gt;&lt;code&gt;parseFloat&lt;/code&gt; is a top-level function and is not associated with any object.
&lt;/p&gt;&lt;p&gt;&lt;code&gt;parseFloat&lt;/code&gt; parses its argument, a string, and returns a floating point number. If it encounters a character other than a sign (+ or -), numeral (0-9), a decimal point, or an exponent, it returns the value up to that point and ignores that character and all succeeding characters. Leading and trailing spaces are allowed.

&lt;/p&gt;&lt;p&gt;If the first character cannot be converted to a number, &lt;code&gt;parseFloat&lt;/code&gt; returns &lt;code&gt;NaN&lt;/code&gt;.
&lt;/p&gt;&lt;p&gt;For arithmetic purposes, the &lt;code&gt;NaN&lt;/code&gt; value is not a number in any radix. You can call the &lt;code&gt;isNaN&lt;/code&gt; function to determine if the result of &lt;code&gt;parseFloat&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt;. If &lt;code&gt;NaN&lt;/code&gt; is passed on to arithmetic operations, the operation results will also be &lt;code&gt;NaN&lt;/code&gt;. &lt;/p&gt;
				</remarks>
				<description>Parses a string and returns its value as a number.</description>
				<browsers>
					<browser platform="IE" version="3.0+"/>
					<browser platform="Mozilla" version="1.0+"/>
					<browser platform="Netscape" version="2.0+"/>
					<browser platform="Opera" version="7.0+" />
					<browser platform="Chrome" version="5.0+" />
					<browser platform="Safari" version="1.0+" />
				</browsers>
				<return-description>Returns a number version of the string. </return-description>
			</method>
			
			<method name="parseInt">
				<parameters>
					<parameter name="string" type="String" usage="required">
						<description>A string that represents the value you want to parse.</description>
					</parameter>
					<parameter name="radix" type="Number" usage="optional">
						<description>An integer that represents the radix of the above mentioned string.</description>
					</parameter>
				</parameters>
				<references>
					<reference name="isNaN"/>
					<reference name="parseFloat"/>
					<reference name="Object.valueOf"/>
				</references>
				<return-types>
					<return-type type="Number"/>
				</return-types>
				<availability>
					<specification name="JavaScript 1.0"/>
					<specification name="JScript 1.0"/>
					<specification name="ECMAScript v1"/>
				</availability>
				<example>
					&lt;h3&gt;Example: Using &lt;code&gt;parseInt&lt;/code&gt; &lt;/h3&gt;
&lt;p&gt;The following examples all return 15:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;parseInt("F", 16);&lt;/code&gt;

&lt;/li&gt;&lt;li&gt;&lt;code&gt;parseInt("17", 8);&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;parseInt("15", 10);&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;parseInt(15.99, 10);&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;parseInt("FXX123", 16);&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;parseInt("1111", 2);&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;parseInt("15*3", 10);&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;parseInt("12", 13);&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;The following examples all return &lt;code&gt;NaN&lt;/code&gt;:

&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;parseInt("Hello", 8); // Not a number at all &lt;/code&gt; 
&lt;/li&gt;&lt;li&gt;&lt;code&gt;parseInt("0x7", 10);  // Not in base 10 format &lt;/code&gt; 
&lt;/li&gt;&lt;li&gt;&lt;code&gt;parseInt("546", 2);  // Digits are not valid for binary representations&lt;/code&gt;  
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Even though the radix is specified differently, the following examples all return 17 because the input &lt;code&gt;string&lt;/code&gt; begins with "&lt;code&gt;0x&lt;/code&gt;".
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;parseInt("0x11", 16);&lt;/code&gt;

&lt;/li&gt;&lt;li&gt;&lt;code&gt;parseInt("0x11", 0);&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;parseInt("0x11");&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
				</example>
				<remarks>
					&lt;p&gt;&lt;code&gt;parseInt&lt;/code&gt; is a top-level function and is not associated with any object.
&lt;/p&gt;&lt;p&gt;The &lt;code&gt;parseInt&lt;/code&gt; function parses its first argument, a string, and attempts to return an integer of the specified radix (base). For example, a radix of 10 indicates to convert to a decimal number, 8 octal, 16 hexadecimal, and so on. For radixes above 10, the letters of the alphabet indicate numerals greater than 9. For example, for hexadecimal numbers (base 16), A through F are used.

&lt;/p&gt;&lt;p&gt;If &lt;code&gt;parseInt&lt;/code&gt; encounters a character that is not a numeral in the specified radix, it ignores it and all succeeding characters and returns the integer value parsed up to that point. &lt;code&gt;parseInt&lt;/code&gt; truncates numbers to integer values. Leading and trailing spaces are allowed.
&lt;/p&gt;&lt;p&gt;If the radix is not specified or is specified as 0, JavaScript assumes the following:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt; If the input &lt;code&gt;string&lt;/code&gt; begins with "0x", the radix is 16 (hexadecimal).
&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt; If the input &lt;code&gt;string&lt;/code&gt; begins with "0", the radix is eight (octal). This feature is deprecated.

&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt; If the input &lt;code&gt;string&lt;/code&gt; begins with any other value, the radix is 10 (decimal).
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;If the first character cannot be converted to a number, &lt;code&gt;parseInt&lt;/code&gt; returns &lt;code&gt;NaN&lt;/code&gt;.
&lt;/p&gt;&lt;p&gt;For arithmetic purposes, the &lt;code&gt;NaN&lt;/code&gt; value is not a number in any radix. You can call the &lt;code&gt;isNaN&lt;/code&gt; function to determine if the result of &lt;code&gt;parseInt&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt;. If &lt;code&gt;NaN&lt;/code&gt; is passed on to arithmetic operations, the operation results will also be &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt;
				</remarks>
				
				<description>Parses a string argument and returns an integer of the specified radix or base.</description>
				<browsers>
					<browser platform="IE" version="3.0+"/>
					<browser platform="Mozilla" version="1.0+"/>
					<browser platform="Netscape" version="2.0+"/>
					<browser platform="Opera" version="7.0+" />
					<browser platform="Chrome" version="5.0+" />
					<browser platform="Safari" version="1.0+" />
				</browsers>
				<return-description>Returns an integer of the specified argument.</return-description>
			</method>
			
			<method name="unescape">
				<parameters>
					<parameter name="string" type="String" usage="required">
						<description>URI-encoded string to be decoded.</description>
					</parameter>
				</parameters>
				<references>
					<reference name="escape"/>
					<reference name="decodeURIComponent"/>
				</references>
				<return-types>
					<return-type type="String"/>
				</return-types>
				<availability>
					<specification name="JavaScript 1.0"/>
					<specification name="JScript 1.0"/>
				</availability>
				<remarks>unescape has been phased out in favor of decodeURIComponent.</remarks>
				<description>Returns a URI-decoded version of a string.</description>
				<browsers>
					<browser platform="IE" version="3.0+"/>
					<browser platform="Mozilla" version="1.0+"/>
					<browser platform="Netscape" version="2.0+"/>
					<browser platform="Opera" version="7.0+" />
					<browser platform="Chrome" version="5.0+" />
					<browser platform="Safari" version="1.0+" />
				</browsers>
				<return-description>Returns a URI-decoded version of a string.</return-description>
			</method>
			
		</methods>
	<availability>
		<specification name="JavaScript 1.0"/>
		<specification name="JScript 1.0"/>
		<specification name="ECMAScript v1"/>
	</availability>
	<interfaces>
		<interface type="Global"/>
	</interfaces>
</class>

<class type="Math" superclass="Object" visibility="advanced">
    <description>
      A built-in object that has properties and methods for
      mathematical constants and functions. For example, the
      Math object's PI property has the value of pi.
    </description>
	<browsers>
		<browser platform="IE" version="3.0+"/>
		<browser platform="Mozilla" version="1.0+"/>
		<browser platform="Netscape" version="2.0+"/>
		<browser platform="Opera" version="7.0+" />
		<browser platform="Chrome" version="5.0+" />
		<browser platform="Safari" version="1.0+" />
	</browsers>
    <properties>
      <property name="E" type="Number" scope="static" access="read-write">
        <description>Euler's constant and the base of natural logarithms, approximately 2.718.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;Math.E&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following function returns Euler's constant:&lt;/p&gt;&lt;pre&gt;function getEuler() {
   return Math.E
}&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;Because &lt;code&gt;E&lt;/code&gt; is a static property of
          &lt;code&gt;Math&lt;/code&gt;, you always use it as
          &lt;code&gt;Math.E&lt;/code&gt;, rather than as a property of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </property>
      
	  <property name="LN10" type="Number" scope="static" access="read-write">
        <description>The natural logarithm of 10, approximately 2.302.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>

        <example>
          &lt;h3&gt;Using &lt;code&gt;Math.LN10&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following function returns the natural log of
          10:&lt;/p&gt;&lt;pre&gt;function getNatLog10() {
   return Math.LN10
}&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;Because &lt;code&gt;LN10&lt;/code&gt; is a static property of
          &lt;code&gt;Math&lt;/code&gt;, you always use it as
          &lt;code&gt;Math.LN10&lt;/code&gt;, rather than as a property of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </property>
      
	  <property name="LN2" type="Number" scope="static" access="read-write">
        <description>The natural logarithm of 2, approximately 0.693.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;Math.LN2&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following function returns the natural log of
          2:&lt;/p&gt;&lt;pre&gt;function getNatLog2() {
   return Math.LN2
}&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;Because &lt;code&gt;LN2&lt;/code&gt; is a static property of
          &lt;code&gt;Math&lt;/code&gt;, you always use it as
          &lt;code&gt;Math.LN2&lt;/code&gt;, rather than as a property of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </property>
      
	  <property name="LOG10E" type="Number" scope="static" access="read-write">
        <description>The base 10 logarithm of E (approximately 0.434).</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;Math.LOG10E&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following function returns the base 10 logarithm
          of &lt;code&gt;E&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;function getLog10e() {
   return Math.LOG10E
} &lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;Because &lt;code&gt;LOG10E&lt;/code&gt; is a static property of
          &lt;code&gt;Math&lt;/code&gt;, you always use it as
          &lt;code&gt;Math.LOG10E&lt;/code&gt;, rather than as a property of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </property>
      
	  <property name="LOG2E" type="Number" scope="static" access="read-write">
        <description>The base 2 logarithm of E (approximately 1.442).</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;Math.LOG2E&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following function returns the base 2 logarithm of
          &lt;code&gt;E&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;function getLog2e() {
   return Math.LOG2E
}&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;Because &lt;code&gt;LOG2E&lt;/code&gt; is a static property of
          &lt;code&gt;Math&lt;/code&gt;, you always use it as
          &lt;code&gt;Math.LOG2E&lt;/code&gt;, rather than as a property of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </property>
      
	  <property name="PI" type="Number" scope="static" access="read-write">
        <description>
          The ratio of the circumference of a circle to its
          diameter, approximately 3.14159.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;PI&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following function returns the value of pi:&lt;/p&gt;&lt;pre&gt;function getPi() {
   return Math.PI
}&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;Because &lt;code&gt;PI&lt;/code&gt; is a static property of
          &lt;code&gt;Math&lt;/code&gt;, you always use it as
          &lt;code&gt;Math.PI&lt;/code&gt;, rather than as a property of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </property>
      
	  <property name="SQRT1_2" type="Number" scope="static" access="read-write">
        <description>
          The square root of 1/2; equivalently, 1 over the
          square root of 2, approximately 0.707.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;SQRT1_2&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following function returns 1 over the square root
          of 2:&lt;/p&gt;&lt;pre&gt;function getRoot1_2() {
   return Math.SQRT1_2
}&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;Because &lt;code&gt;SQRT1_2&lt;/code&gt; is a static property of
          &lt;code&gt;Math&lt;/code&gt;, you always use it as
          &lt;code&gt;Math.SQRT1_2&lt;/code&gt;, rather than as a property of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </property>
      
	  <property name="SQRT2" type="Number" scope="static" access="read-write">
        <description>The square root of 2, approximately 1.414.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;Math.SQRT2&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following function returns the square root of
          2:&lt;/p&gt;&lt;pre&gt;function getRoot2() {
   return Math.SQRT2
}&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;Because &lt;code&gt;SQRT2&lt;/code&gt; is a static property of
          &lt;code&gt;Math&lt;/code&gt;, you always use it as
          &lt;code&gt;Math.SQRT2&lt;/code&gt;, rather than as a property of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </property>
    </properties>
    
	<methods>
      <method name="abs" scope="static">
        <description>Returns the absolute value of a number.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the absolute value of a number.</return-description>
        <parameters>
          <parameter name="x" type="Number" usage="required">
            <description>A number.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;Math.abs&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following function returns the absolute value of
          the variable &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;function getAbs(x) {
   return Math.abs(x)
}&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;&lt;code&gt;abs&lt;/code&gt; is a static method of
          &lt;code&gt;Math&lt;/code&gt;, so you always use it as
          &lt;code&gt;Math.abs()&lt;/code&gt;, rather than as a method of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="acos" scope="static">
        <description>Returns the arccosine (in radians) of a number.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the arccosine (in radians) of a number.</return-description>
        <parameters>
          <parameter name="x" type="Number" usage="required">
            <description>A number.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;Math.acos&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following function returns the arccosine of the
          variable &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;function getAcos(x) {
   return Math.acos(x)
}&lt;/pre&gt;&lt;p&gt;If you pass -1 to &lt;code&gt;getAcos&lt;/code&gt;, it returns
          3.141592653589793; if you pass 2, it returns
          &lt;code&gt;NaN&lt;/code&gt; because 2 is out of range.&lt;/p&gt;
        </example>
        <references>
          <reference name="asin"/>
          <reference name="atan"/>
          <reference name="atan2"/>
          <reference name="cos"/>
          <reference name="sin"/>
          <reference name="tan"/>
        </references>
        <remarks>
          &lt;p&gt;The &lt;code&gt;acos&lt;/code&gt; method returns a numeric value
          between 0 and pi radians for x between -1 and 1. If the
          value of &lt;code&gt;number&lt;/code&gt; is outside this range, it
          returns &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;code&gt;acos&lt;/code&gt; is a static method of
          &lt;code&gt;Math&lt;/code&gt;, so you always use it as
          &lt;code&gt;Math.acos()&lt;/code&gt;, rather than as a method of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="asin" scope="static">
        <description>Returns the arcsine (in radians) of a number.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the arcsine (in radians) of a number.</return-description>
        <parameters>
          <parameter name="x" type="Number" usage="required">
            <description>A number.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;Math.asin&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following function returns the arcsine of the
          variable &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;function getAsin(x) {
   return Math.asin(x)
}&lt;/pre&gt;&lt;p&gt;If you pass &lt;code&gt;getAsin&lt;/code&gt; the value 1, it
          returns 1.570796326794897 (pi/2); if you pass it the
          value 2, it returns &lt;code&gt;NaN&lt;/code&gt; because 2 is out of
          range.&lt;/p&gt;
        </example>
        <references>
          <reference name="acos"/>
          <reference name="atan"/>
          <reference name="atan2"/>
          <reference name="cos"/>
          <reference name="sin"/>
          <reference name="tan"/>
        </references>
        <remarks>
          &lt;p&gt;The &lt;code&gt;asin&lt;/code&gt; method returns a numeric value
          between -pi/2 and pi/2 radians. If the value of
          &lt;code&gt;number&lt;/code&gt; is outside this range, it returns
          &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;code&gt;asin&lt;/code&gt; is a static method of
          &lt;code&gt;Math&lt;/code&gt;, so you always use it as
          &lt;code&gt;Math.asin()&lt;/code&gt;, rather than as a method of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="atan" scope="static">
        <description>Returns the arctangent (in radians) of a number.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the arctangent (in radians) of a number.</return-description>
        <parameters>
          <parameter name="x" type="Number" usage="required">
            <description>A number.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;Math.atan&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following function returns the arctangent of the
          variable &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;function getAtan(x) {
   return Math.atan(x)
}&lt;/pre&gt;&lt;p&gt;If you pass &lt;code&gt;getAtan&lt;/code&gt; the value 1, it
          returns 0.7853981633974483; if you pass it the value .5,
          it returns 0.4636476090008061.&lt;/p&gt;
        </example>
        <references>
          <reference name="acos"/>
          <reference name="asin"/>
          <reference name="atan2"/>
          <reference name="cos"/>
          <reference name="sin"/>
          <reference name="tan"/>
        </references>
        <remarks>
          &lt;p&gt;The &lt;code&gt;atan&lt;/code&gt; method returns a numeric value
          between -pi/2 and pi/2 radians.&lt;/p&gt;&lt;p&gt;&lt;code&gt;atan&lt;/code&gt; is a static method of
          &lt;code&gt;Math&lt;/code&gt;, so you always use it as
          &lt;code&gt;Math.atan()&lt;/code&gt;, rather than as a method of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="atan2" scope="static">
        <description>
          Returns the arctangent of the quotient of its
          arguments.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>
          Returns the arctangent of the quotient of its
          arguments.
        </return-description>
        <parameters>
          <parameter name="y" type="Object" usage="required">
            <description>Number.</description>
          </parameter>
          <parameter name="x" type="Object" usage="required">
            <description>Number.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;Math.atan2&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following function returns the angle of the polar
          coordinate:&lt;/p&gt;&lt;pre&gt;function getAtan2(x,y) {
   return Math.atan2(x,y)
}&lt;/pre&gt;&lt;p&gt;If you pass &lt;code&gt;getAtan2&lt;/code&gt; the values (90,15),
          it returns 1.4056476493802699; if you pass it the values
          (15,90), it returns 0.16514867741462683.&lt;/p&gt;
        </example>
        <references>
          <reference name="acos"/>
          <reference name="asin"/>
          <reference name="atan"/>
          <reference name="cos"/>
          <reference name="sin"/>
          <reference name="tan"/>
        </references>
        <remarks>
          &lt;p&gt;The &lt;code&gt;atan2&lt;/code&gt; method returns a numeric value
          between -pi and pi representing the angle theta of an
          (x,y) point. This is the counterclockwise angle, measured
          in radians, between the positive X axis, and the point
          (&lt;code&gt;x,y&lt;/code&gt;). Note that the arguments to this
          function pass the y-coordinate first and the x-coordinate
          second.&lt;/p&gt;&lt;p&gt;&lt;code&gt;atan2&lt;/code&gt; is passed separate &lt;code&gt;x&lt;/code&gt;
          and &lt;code&gt;y&lt;/code&gt; arguments, and &lt;code&gt;atan&lt;/code&gt; is
          passed the ratio of those two arguments.&lt;/p&gt;&lt;p&gt;Because &lt;code&gt;atan2&lt;/code&gt; is a static method of
          &lt;code&gt;Math&lt;/code&gt;, you always use it as
          &lt;code&gt;Math.atan2()&lt;/code&gt;, rather than as a method of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="ceil" scope="static">
        <description>
          Returns the smallest integer greater than or equal to
          a number.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>
          Returns the smallest integer greater than or equal to
          a number.
        </return-description>
        <parameters>
          <parameter name="x" type="Number" usage="required">
            <description>A number.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;Math.ceil&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following function returns the ceil value of the
          variable &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;function getCeil(x) {
   return Math.ceil(x)
}&lt;/pre&gt;&lt;p&gt;If you pass 45.95 to &lt;code&gt;getCeil&lt;/code&gt;, it returns
          46; if you pass -45.95, it returns -45.&lt;/p&gt;
        </example>
        <references>
          <reference name="floor"/>
        </references>
        <remarks>
          &lt;p&gt;Because &lt;code&gt;ceil&lt;/code&gt; is a static method of
          &lt;code&gt;Math&lt;/code&gt;, you always use it as
          &lt;code&gt;Math.ceil()&lt;/code&gt;, rather than as a method of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="cos" scope="static">
        <description>Returns the cosine of a number.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the cosine of a number.</return-description>
        <parameters>
          <parameter name="x" type="Number" usage="required">
            <description>A number.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;Math.cos&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following function returns the cosine of the
          variable &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;function getCos(x) {
   return Math.cos(x)
}&lt;/pre&gt;&lt;p&gt;If &lt;code&gt;x&lt;/code&gt; equals 2*&lt;code&gt;Math.PI&lt;/code&gt;,
          &lt;code&gt;getCos&lt;/code&gt; returns 1; if &lt;code&gt;x&lt;/code&gt; equals
          &lt;code&gt;Math.PI&lt;/code&gt;, the &lt;code&gt;getCos&lt;/code&gt; method
          returns -1.&lt;/p&gt;
        </example>
        <references>
          <reference name="acos"/>
          <reference name="asin"/>
          <reference name="atan"/>
          <reference name="atan2"/>
          <reference name="sin"/>
          <reference name="tan"/>
        </references>
        <remarks>
          &lt;p&gt;The &lt;code&gt;cos&lt;/code&gt; method returns a numeric value
          between -1 and 1, which represents the cosine of the
          angle.&lt;/p&gt;&lt;p&gt;Because &lt;code&gt;cos&lt;/code&gt; is a static method of
          &lt;code&gt;Math&lt;/code&gt;, you always use it as
          &lt;code&gt;Math.cos()&lt;/code&gt;, rather than as a method of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="exp" scope="static">
        <description>
          Returns Ex, where
          x is the argument, and E is
          Euler's constant, the base of the natural logarithms.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>
          Returns Ex, where x is the argument, and E is
          Euler's constant, the base of the natural logarithms.
        </return-description>
        <parameters>
          <parameter name="x" type="Number" usage="required">
            <description>A number.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;Math.exp&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following function returns the exponential value
          of the variable &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;function getExp(x) {
   return Math.exp(x)
}&lt;/pre&gt;&lt;p&gt;If you pass &lt;code&gt;getExp&lt;/code&gt; the value 1, it
          returns 2.718281828459045.&lt;/p&gt;
        </example>
        <references>
          <reference name="Math.E"/>
          <reference name="log"/>
          <reference name="pow"/>
        </references>
        <remarks>
          &lt;p&gt;Because &lt;code&gt;exp&lt;/code&gt; is a static method of
          &lt;code&gt;Math&lt;/code&gt;, you always use it as
          &lt;code&gt;Math.exp()&lt;/code&gt;, rather than as a method of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="floor" scope="static">
        <description>
          Returns the largest integer less than or equal to a
          number.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the largest integer less than or equal to a number.</return-description>
        <parameters>
          <parameter name="x" type="Number" usage="required">
            <description>A number.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;Math.floor&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following function returns the floor value of the
          variable &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;function getFloor(x) {
   return Math.floor(x)
}&lt;/pre&gt;&lt;p&gt;If you pass 45.95 to &lt;code&gt;getFloor&lt;/code&gt;, it returns
          45; if you pass -45.95, it returns -46.&lt;/p&gt;
        </example>
        <references>
          <reference name="ceil"/>
        </references>
        <remarks>
          &lt;p&gt;Because &lt;code&gt;floor&lt;/code&gt; is a static method of
          &lt;code&gt;Math&lt;/code&gt;, you always use it as
          &lt;code&gt;Math.floor()&lt;/code&gt;, rather than as a method of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="log" scope="static">
        <description>Returns the natural logarithm (base E) of a number.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the natural logarithm (base E) of a number.</return-description>
        <parameters>
          <parameter name="x" type="Number" usage="required">
            <description>A number.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;Math.log&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following function returns the natural log of the
          variable &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;function getLog(x) {
   return Math.log(x)
}&lt;/pre&gt;&lt;p&gt;If you pass &lt;code&gt;getLog&lt;/code&gt; the value 10, it
          returns 2.302585092994046; if you pass it the value 0, it
          returns &lt;code&gt;-Infinity&lt;/code&gt;; if you pass it the value
          -1, it returns &lt;code&gt;NaN&lt;/code&gt; because -1 is out of
          range.&lt;/p&gt;
        </example>
        <references>
          <reference name="exp"/>
          <reference name="pow"/>
        </references>
        <remarks>
          &lt;p&gt;If the value of &lt;code&gt;number&lt;/code&gt; is negative, the
          return value is always &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Because &lt;code&gt;log&lt;/code&gt; is a static method of
          &lt;code&gt;Math&lt;/code&gt;, you always use it as
          &lt;code&gt;Math.log()&lt;/code&gt;, rather than as a method of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="max" scope="static">
        <description>Returns the larger of two numbers.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the larger of two numbers.</return-description>
        <parameters>
          <parameter name="x" type="Number" usage="required">
            <description>Number.</description>
          </parameter>
          <parameter name="y" type="Number" usage="required">
            <description>Number.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
          <specification name="enhanced in ECMAScript v3"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;Math.max&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following function evaluates the variables
          &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;function getMax(x,y) {
   return Math.max(x,y)
}&lt;/pre&gt;&lt;p&gt;If you pass &lt;code&gt;getMax&lt;/code&gt; the values 10 and 20,
          it returns 20; if you pass it the values -10 and -20, it
          returns -10.&lt;/p&gt;
        </example>
        <references>
          <reference name="min"/>
        </references>
        <remarks>
          &lt;p&gt;Because &lt;code&gt;max&lt;/code&gt; is a static method of
          &lt;code&gt;Math&lt;/code&gt;, you always use it as
          &lt;code&gt;Math.max()&lt;/code&gt;, rather than as a method of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="min" scope="static">
        <description>Returns the smaller of two numbers.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the smaller of two numbers.</return-description>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
          <specification name="enhanced in ECMAScript v3"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;Math.min&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following function evaluates the variables
          &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;function getMin(x,y) {
   return Math.min(x,y)
}&lt;/pre&gt;&lt;p&gt;If you pass &lt;code&gt;getMin&lt;/code&gt; the values 10 and 20,
          it returns 10; if you pass it the values -10 and -20, it
          returns -20.&lt;/p&gt;
        </example>
        <references>
          <reference name="max"/>
        </references>
        <remarks>
          &lt;p&gt;Because &lt;code&gt;min&lt;/code&gt; is a static method of
          &lt;code&gt;Math&lt;/code&gt;, you always use it as
          &lt;code&gt;Math.min()&lt;/code&gt;, rather than as a method of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="pow" scope="static">
        <description>Returns base to the exponent power, that is, baseexponent.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns base to the exponent power, that is, baseexponent.</return-description>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;Math.pow&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;function raisePower(x,y) {
   return Math.pow(x,y)
}&lt;/pre&gt;&lt;p&gt;If &lt;code&gt;x&lt;/code&gt; is 7 and &lt;code&gt;y&lt;/code&gt; is 2,
          raisePower returns 49 (7 to the power of 2).&lt;/p&gt;
        </example>
        <references>
          <reference name="exp"/>
          <reference name="log"/>
        </references>
        <remarks>
          &lt;p&gt;Because &lt;code&gt;pow&lt;/code&gt; is a static method of
          &lt;code&gt;Math&lt;/code&gt;, you always use it as
          &lt;code&gt;Math.pow()&lt;/code&gt;, rather than as a method of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="random" scope="static">
        <description>
          Returns a pseudo-random number in the range [0,1)
          -- that is, between 0 (inclusive) and 1 (exclusive).
          The random number generator is seeded from the current
          time, as in Java.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a pseudo-random number in the range [0,1) -- that is, between 0 (inclusive) and 1 (exclusive).</return-description>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.1"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;Math.random&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;//Returns a random number between 0 (inclusive) and 1 (exclusive)
function getRandom() {
   return Math.random()
}&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;Because &lt;code&gt;random&lt;/code&gt; is a static method of
          &lt;code&gt;Math&lt;/code&gt;, you always use it as
          &lt;code&gt;Math.random()&lt;/code&gt;, rather than as a method of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="round" scope="static">
        <description>
          Returns the value of a number rounded to the nearest
          integer.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the value of a number rounded to the nearest integer.</return-description>
        <parameters>
          <parameter name="x" type="Number" usage="required">
            <description>A number.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;Math.round&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;//Returns the value 20
x=Math.round(20.49)

//Returns the value 21
x=Math.round(20.5)

//Returns the value -20
x=Math.round(-20.5)

//Returns the value -21
x=Math.round(-20.51)&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;If the fractional portion of &lt;code&gt;number&lt;/code&gt; is .5
          or greater, the argument is rounded to the next higher
          integer. If the fractional portion of &lt;code&gt;number&lt;/code&gt;
          is less than .5, the argument is rounded to the next
          lower integer.&lt;/p&gt;&lt;p&gt;Because &lt;code&gt;round&lt;/code&gt; is a static method of
          &lt;code&gt;Math&lt;/code&gt;, you always use it as
          &lt;code&gt;Math.round()&lt;/code&gt;, rather than as a method of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="sin" scope="static">
        <description>Returns the sine of a number.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the sine of a number.</return-description>
        <parameters>
          <parameter name="x" type="Number" usage="required">
            <description>A number.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;Math.sin&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following function returns the sine of the
          variable &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;function getSine(x) {
   return Math.sin(x)
}&lt;/pre&gt;&lt;p&gt;If you pass &lt;code&gt;getSine&lt;/code&gt; the value
          &lt;code&gt;Math.PI/2&lt;/code&gt;, it returns 1.&lt;/p&gt;
        </example>
        <references>
          <reference name="acos"/>
          <reference name="asin"/>
          <reference name="atan"/>
          <reference name="atan2"/>
          <reference name="cos"/>
          <reference name="tan"/>
        </references>
        <remarks>
          &lt;p&gt;The &lt;code&gt;sin&lt;/code&gt; method returns a numeric value
          between -1 and 1, which represents the sine of the
          argument.&lt;/p&gt;&lt;p&gt;Because &lt;code&gt;sin&lt;/code&gt; is a static method of
          &lt;code&gt;Math&lt;/code&gt;, you always use it as
          &lt;code&gt;Math.sin()&lt;/code&gt;, rather than as a method of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="sqrt" scope="static">
        <description>Returns the square root of a number.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the square root of a number.</return-description>
        <parameters>
          <parameter name="x" type="Number" usage="required">
            <description>A number.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;Math.sqrt&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following function returns the square root of the
          variable &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;function getRoot(x) {
   return Math.sqrt(x)
}&lt;/pre&gt;&lt;p&gt;If you pass &lt;code&gt;getRoot&lt;/code&gt; the value 9, it
          returns 3; if you pass it the value 2, it returns
          1.414213562373095.&lt;/p&gt;
        </example>
        <remarks>
          &lt;p&gt;If the value of &lt;code&gt;number&lt;/code&gt; is negative,
          &lt;code&gt;sqrt&lt;/code&gt; returns &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Because &lt;code&gt;sqrt&lt;/code&gt; is a static method of
          &lt;code&gt;Math&lt;/code&gt;, you always use it as
          &lt;code&gt;Math.sqrt()&lt;/code&gt;, rather than as a method of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="tan" scope="static">
        <description>Returns the tangent of a number.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the tangent of a number.</return-description>
        <parameters>
          <parameter name="x" type="Number" usage="required">
            <description>A number.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;Math.tan&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following function returns the tangent of the
          variable &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;function getTan(x) {
   return Math.tan(x)
}&lt;/pre&gt;
        </example>
        <references>
          <reference name="acos"/>
          <reference name="asin"/>
          <reference name="atan"/>
          <reference name="atan2"/>
          <reference name="cos"/>
          <reference name="sin"/>
        </references>
        <remarks>
          &lt;p&gt;The &lt;code&gt;tan&lt;/code&gt; method returns a numeric value
          that represents the tangent of the angle.&lt;/p&gt;&lt;p&gt;Because &lt;code&gt;tan&lt;/code&gt; is a static method of
          &lt;code&gt;Math&lt;/code&gt;, you always use it as
          &lt;code&gt;Math.tan()&lt;/code&gt;, rather than as a method of a
          &lt;code&gt;Math&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </method>
    </methods>
    <references>
      <reference name="Number"/>
    </references>
    <availability>
      <specification name="JavaScript 1.0"/>
      <specification name="JScript 1.0"/>
      <specification name="ECMAScript v1"/>
    </availability>
    <remarks>
      &lt;p&gt;All properties and methods of &lt;code&gt;Math&lt;/code&gt; are
      static. You refer to the constant pi as
      &lt;code&gt;Math.PI&lt;/code&gt; and you call the sine function as
      &lt;code&gt;Math.sin(x)&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is the
      method's argument. Constants are defined with the full
      precision of real numbers in JavaScript.&lt;/p&gt;&lt;p&gt;It is often convenient to use the with
      statement when a section of code uses several
      &lt;code&gt;Math&lt;/code&gt; constants and methods, so you don't
      have to type "Math" repeatedly. For example,&lt;/p&gt;&lt;pre&gt;with (Math) {
   a = PI * r*r
   y = r*sin(theta)
   x = r*cos(theta)
}&lt;/pre&gt;
    </remarks>
  </class>
  
  
  <class type="Number" superclass="Object">
    <description>
      Lets you work with numeric values. The
      Number object is an object wrapper for
      primitive numeric values.
    </description>
	<browsers>
		<browser platform="IE" version="3.0+"/>
		<browser platform="Mozilla" version="1.0+"/>
		<browser platform="Netscape" version="3.0+"/>
		<browser platform="Opera" version="7.0+" />
		<browser platform="Chrome" version="5.0+" />
		<browser platform="Safari" version="1.0+" />
	</browsers>
    <constructors>
      <constructor>
        <description>Creates a new instance of a Number.</description>
        <parameters>
          <parameter name="value" type="Number" usage="required">
            <description>The numeric value of the object being created.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
      </constructor>
    </constructors>
    <properties>
      
	  <property name="MAX_VALUE" type="Number" scope="static" access="read">
        <description>The maximum numeric value representable in JavaScript.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.1"/>
          <specification name="JScript 2.0, ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;MAX_VALUE&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following code multiplies two numeric values. If
          the result is less than or equal to
          &lt;code&gt;MAX_VALUE&lt;/code&gt;, the &lt;code&gt;func1&lt;/code&gt; function
          is called; otherwise, the &lt;code&gt;func2&lt;/code&gt; function is
          called.&lt;/p&gt;&lt;pre&gt;if (num1 * num2 &amp;lt;= Number.MAX_VALUE)
   func1();
else
   func2();&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;The &lt;code&gt;MAX_VALUE&lt;/code&gt; property has a value of
          approximately 1.79E+308. Values larger than
          &lt;code&gt;MAX_VALUE&lt;/code&gt; are represented as
          "&lt;code&gt;Infinity&lt;/code&gt;".&lt;/p&gt;&lt;p&gt;Because &lt;code&gt;MAX_VALUE&lt;/code&gt; is a static property of
          &lt;code&gt;Number&lt;/code&gt;, you always use it as
          &lt;code&gt;Number.MAX_VALUE&lt;/code&gt;, rather than as a property
          of a &lt;code&gt;Number&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </property>
      
	  <property name="MIN_VALUE" type="Number" scope="static" access="read">
        <description>
          The smallest positive numeric value representable in
          JavaScript.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.1"/>
          <specification name="JScript 2.0, ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;MIN_VALUE&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following code divides two numeric values. If the
          result is greater than or equal to
          &lt;code&gt;MIN_VALUE&lt;/code&gt;, the &lt;code&gt;func1&lt;/code&gt; function
          is called; otherwise, the &lt;code&gt;func2&lt;/code&gt; function is
          called.&lt;/p&gt;&lt;pre&gt;if (num1 / num2 &amp;gt;= Number.MIN_VALUE)
   func1()
else
   func2()&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;The &lt;code&gt;MIN_VALUE&lt;/code&gt; property is the number
          closest to 0, not the most negative number, that
          JavaScript can represent.&lt;/p&gt;&lt;p&gt;&lt;code&gt;MIN_VALUE&lt;/code&gt; has a value of approximately
          5e-324. Values smaller than &lt;code&gt;MIN_VALUE&lt;/code&gt;
          ("underflow values") are converted to 0.&lt;/p&gt;&lt;p&gt;Because &lt;code&gt;MIN_VALUE&lt;/code&gt; is a static property of
          &lt;code&gt;Number&lt;/code&gt;, you always use it as
          &lt;code&gt;Number.MIN_VALUE&lt;/code&gt;, rather than as a property
          of a &lt;code&gt;Number&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </property>
      
	  <property name="NaN" type="Number" scope="static" access="read">
        <description>A value representing Not-A-Number.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.1"/>
          <specification name="JScript 2.0, ECMAScript v1"/>
        </availability>
        <references>
          <reference name="isNaN"/>
          <reference name="Number.NaN"/>
          <reference name="parseFloat"/>
          <reference name="parseInt"/>
        </references>
        <example>
          &lt;h3&gt;Using &lt;code&gt;NaN&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;In the following example, if month has a value greater
          than 12, it is assigned &lt;code&gt;NaN&lt;/code&gt;, and a message
          is displayed indicating valid values.&lt;/p&gt;&lt;pre&gt;var month = 13
if (month &amp;lt; 1 || month &amp;gt; 12) {
   month = Number.NaN
   alert("Month must be between 1 and 12.")
}&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;The value of &lt;code&gt;Number.NaN&lt;/code&gt; is Not-A-Number,
          same as the value of global object's NaN
          property.&lt;/p&gt;&lt;p&gt;&lt;code&gt;NaN&lt;/code&gt; is always unequal to any other
          number, including &lt;code&gt;NaN&lt;/code&gt; itself; you cannot
          check for the not-a-number value by comparing to
          &lt;code&gt;Number.NaN&lt;/code&gt;. Use the &lt;code&gt;isNaN&lt;/code&gt;
          function instead.&lt;/p&gt;&lt;p&gt;Several JavaScript methods (such as the
          &lt;code&gt;Number&lt;/code&gt; constructor, &lt;code&gt;parseFloat&lt;/code&gt;,
          and &lt;code&gt;parseInt&lt;/code&gt;) return &lt;code&gt;NaN&lt;/code&gt; if the
          value specified in the parameter can not be parsed as a
          number.&lt;/p&gt;&lt;p&gt;You might use the &lt;code&gt;NaN&lt;/code&gt; property to
          indicate an error condition for your function that
          returns a number in case of success.&lt;/p&gt;&lt;p&gt;JavaScript prints the value &lt;code&gt;Number.NaN&lt;/code&gt; as
          &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt;
        </remarks>
      </property>
      
	  <property name="NEGATIVE_INFINITY" type="Number" scope="static" access="read">
        <description>Special value representing negative infinity; returned on overflow.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.1"/>
          <specification name="JScript 2.0, ECMAScript v1"/>
        </availability>
        <references>
          <reference name="Global.Infinity"/>
          <reference name="isFinite"/>
        </references>
      </property>
      
	  <property name="POSITIVE_INFINITY" type="Number" scope="static" access="read">
        <description>Special value representing infinity; returned on overflow.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.1"/>
          <specification name="JScript 2.0, ECMAScript v1"/>
        </availability>
        <references>
          <reference name="Global.Infinity"/>
          <reference name="isFinite"/>
        </references>
    </property>
    
     <property name="EPSILON" type="Number" scope="static" access="read">
        <description>The value of Number.EPSILON is the difference between 1 and the smallest value greater than 1 that is representable as a Number value, which is approximately 2.2204460492503130808472633361816 x 10-16.</description>
		<browsers>
		</browsers>
        <availability>
          <specification name="ECMAScript v6"/>
        </availability>
    </property>
    
    <property name="MAX_INTEGER" type="Number" scope="static" access="read">
        <description>The value of Number.MAX_INTEGER is the largest integer value that can be represented as a Number value without losing precision, which is 9007199254740991.</description>
		<browsers>
		</browsers>
        <availability>
          <specification name="ECMAScript v6"/>
        </availability>
    </property>
    
	<property name="constructor" type="Object">
		<availability>
			<specification name="JavaScript 1.1"/>
		</availability>
		<references>
			<reference name="Object.constructor"/>
		</references>
		<description>Specifies the function that creates the Number prototype.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
	</property>
	
	<property name="prototype" type="Number">
		<availability>
			<specification name="JavaScript 1.1"/>
		</availability>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
		<description>Reference to the Number prototype object.</description>
	</property>
</properties>

<methods>
	<method name="isFinite" scope="static">
        <description>Determine whether the type of and the passed value itself is a finite number.</description>
		<browsers>
			<browser platform="Mozilla" version="16.0+"/>
			<browser platform="Chrome" version="19.0+" />
			<browser platform="Node" version="0.8+" />
		</browsers>
        <return-description>Returns a boolean indicating if the argument is finite.</return-description>
        <parameters>
          <parameter name="testValue" type="Object" usage="required">
            <description>Possible number to check against positive and negative Infinity.</description>
          </parameter>
        </parameters>
        <references>
          <reference name="Number.isNaN"/>
          <reference name="Number.NaN"/>
        </references>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <availability>
          <specification name="ECMAScript v6"/>
        </availability>
      </method>
      <method name="isInteger" scope="static">
        <description>Determine whether the type of the passed value is "number" and the passed value is an integer.</description>
		<browsers>
			<browser platform="Mozilla" version="16.0+"/>
		</browsers>
        <return-description>Returns a boolean indicating if the argument is an integer.</return-description>
        <parameters>
          <parameter name="testValue" type="Object" usage="required">
            <description>Possible number to check if it is an Integer.</description>
          </parameter>
        </parameters>
        <references>
          <reference name="Number.isFinite"/>
          <reference name="Number.isNaN"/>
        </references>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <availability>
          <specification name="ECMAScript v6"/>
        </availability>
      </method>
	<method name="isNaN" scope="static">
        <description>Unlike all other possible values in JavaScript, it is not possible to rely on the equality operators (== and ===) to determine whether a value is NaN or not, because both NaN == NaN and NaN === NaN evaluate to false. Hence, the necessity of the Number.isNaN function.

In comparison to the globabl isNaN function, this method doesn't suffer the problem of forcefully converting the parameter to a number. This means it is safe to pass even values that would convert to NaN, but aren't actually the same value as NaN. This means only values of the type number, that are also NaN, return true.</description>
		<browsers>
			<browser platform="Mozilla" version="15.0+"/>
			<browser platform="Chrome" version="19.0+" />
			<browser platform="Node" version="0.8+" />
		</browsers>
        <return-description>Returns a boolean indicating if the argument is NaN.</return-description>
        <parameters>
          <parameter name="testValue" type="Object" usage="required">
            <description>Possible number to check against NaN.</description>
          </parameter>
        </parameters>
        <references>
          <reference name="Number.NaN"/>
        </references>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <availability>
          <specification name="ECMAScript v6"/>
        </availability>
        <example>Number.isNaN(NaN); // true
Number.isNaN(Number.NaN); // true
Number.isNaN(0 / 0) // true
 
// everything else: false
Number.isNaN(undefined);
Number.isNaN({});     
 
Number.isNaN(true);
Number.isNaN(null);
Number.isNaN(37);
 
Number.isNaN("37");
Number.isNaN("37.37");
Number.isNaN("");
Number.isNaN(" ");
Number.isNaN("NaN");
Number.isNaN("blabla"); // e.g. this would have been true with isNaN</example>
      </method>
      <method name="toExponential">
        <description>Returns a string representing the number in exponential notation.</description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="6.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a string representing the number in exponential notation.</return-description>
        <parameters>
          <parameter name="digits" type="Number" usage="optional">
            <description>Number of decimal places to appear after the decimal point.</description>
          </parameter>
        </parameters>
        <exceptions>
          <exception type="RangeError">
            <description>Throws RangeError if digits is too small or too large of a number.</description>
          </exception>
          <exception type="TypeError">
            <description>Throws TypeError if the method is invoked on an object that is not a Number.</description>
          </exception>
        </exceptions>
        <references>
          <reference name="Number.toFixed"/>
          <reference name="Number.toLocaleString"/>
          <reference name="Number.toPrecision"/>
          <reference name="Number.toString"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.5"/>
          <specification name="JScript 5.5, ECMAScript v3"/>
        </availability>
      </method>
      
	  <method name="toFixed">
        <description>Returns a string representing the number in fixed-point notation.</description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="6.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a string representing the number in fixed-point notation.</return-description>
        <parameters>
          <parameter name="digits" type="Number" usage="optional">
            <description>Number of decimal places to appear after the decimal point.</description>
          </parameter>
        </parameters>
        <exceptions>
          <exception type="RangeError">
            <description>Throws RangeError if digits is too small or too large of a number.</description>
          </exception>
          <exception type="TypeError">
            <description>Throws TypeError if the method is invoked on an object that is not a Number.</description>
          </exception>
        </exceptions>
        <references>
          <reference name="Number.toExponential"/>
          <reference name="Number.toLocaleString"/>
          <reference name="Number.toPrecision"/>
          <reference name="Number.toString"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.5"/>
          <specification name="JScript 5.5, ECMAScript v3"/>
        </availability>
      </method>
      <method name="toInteger" scope="static">
        <description>Evaluate the passed value and convert it to a integer (or Infinity).</description>
		<browsers>
			<browser platform="Mozilla" version="16.0+"/>
		</browsers>
        <return-description>Returns an Integer value (or Infinity).</return-description>
        <parameters>
          <parameter name="testValue" type="Object" usage="required">
            <description>Possible number to coerce to an Integer.</description>
          </parameter>
        </parameters>
        <references>
          <reference name="Number.isInteger"/>
        </references>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="ECMAScript v6"/>
        </availability>
      </method>
	  <method name="toLocaleString">
        <description>Returns a string representing the number that follows local formatting conventions.</description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="6.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a string representation of a number that follows local formatting conventions.</return-description>
        <exceptions>
          <exception type="TypeError">
            <description>Throws TypeError if the method is invoked on an object that is not a Number.</description>
          </exception>
        </exceptions>
        <references>
          <reference name="Number.toExponential"/>
          <reference name="Number.toFixed"/>
          <reference name="Number.toPrecision"/>
          <reference name="Number.toString"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.5"/>
          <specification name="JScript 5.5, ECMAScript v3"/>
        </availability>
      </method>
      
	  <method name="toPrecision">
        <description>Returns a string representing the number to a specified precision in fixed-point notation.</description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="6.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a string representing the number to a specified precision in fixed-point notation.</return-description>
        <parameters>
          <parameter name="precision" type="String" usage="optional">
            <description>The number of significant digits to use in the returned string.</description>
          </parameter>
        </parameters>
        <exceptions>
          <exception type="RangeError">
            <description>Throws RangeError if digits is too small or too large of a number.</description>
          </exception>
          <exception type="TypeError">
            <description>Throws TypeError if the method is invoked on an object that is not a Number.</description>
          </exception>
        </exceptions>
        <references>
          <reference name="Number.toExponential"/>
          <reference name="Number.toFixed"/>
          <reference name="Number.toLocaleString"/>
          <reference name="Number.toString"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.5"/>
          <specification name="JScript 5.5, ECMAScript v3"/>
        </availability>
      </method>
      
	  <method name="toSource">
		<return-types>
			<return-type type="Object"/>
		</return-types>
		<availability>
			<specification name=""/>
		</availability>
		<description>Returns an object literal representing the specified Number object; you can use this value to create a new object.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
		</browsers>
		<return-description>Returns an object literal representing the specified Number object; you can use this value to create a new object.</return-description>
	</method>
	
	<method name="toString">
        <description>Returns a string representing the specified object.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a string representing the specified object.</return-description>
        <parameters>
          <parameter name="radix" type="Number" usage="optional">
            <description>The radix (or base) between 2 and 36 to use to represent the number.</description>
          </parameter>
        </parameters>
        <exceptions>
          <exception type="TypeError">
            <description>Throws TypeError if the method is invoked on an object that is not a Number.</description>
          </exception>
        </exceptions>
        <references>
          <reference name="Number.toExponential"/>
          <reference name="Number.toFixed"/>
          <reference name="Number.toLocaleString"/>
          <reference name="Number.toPrecision"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.1"/>
          <specification name="JScript 2.0, ECMAScript v1"/>
        </availability>
      </method>
      
	  <method name="valueOf">
        <description>Returns the primitive value of the specified object.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the primitive value of the specified object.</return-description>
        <exceptions>
          <exception type="TypeError">
            <description>Throws TypeError if the method is invoked on an object that is not a Number.</description>
          </exception>
        </exceptions>
        <references>
          <reference name="Object.valueOf"/>
        </references>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.1"/>
          <specification name="JScript 2.0, ECMAScript v1"/>
        </availability>
      </method>
    </methods>
    
	<references>
      <reference name="Global.Infinity"/>
      <reference name="Math"/>
      <reference name="Global.NaN"/>
    </references>
    <availability>
      <specification name="JavaScript 1.1"/>
      <specification name="JScript 2.0"/>
      <specification name="ECMAScript v1"/>
    </availability>
    <example>
      &lt;h3&gt;Using the &lt;code&gt;Number&lt;/code&gt; object to
      assign values to numeric variables&lt;/h3&gt;&lt;p&gt;The following example uses the &lt;code&gt;Number&lt;/code&gt;
      object's properties to assign values to several numeric
      variables:&lt;/p&gt;&lt;pre&gt;biggestNum = Number.MAX_VALUE;
smallestNum = Number.MIN_VALUE;
infiniteNum = Number.POSITIVE_INFINITY;
negInfiniteNum = Number.NEGATIVE_INFINITY;
notANum = Number.NaN;&lt;/pre&gt;&lt;h3&gt;Using &lt;code&gt;Number&lt;/code&gt; object to modify
      all &lt;code&gt;Number&lt;/code&gt; objects&lt;/h3&gt;&lt;p&gt;The following example creates a Number object, myNum,
      then adds a description property to all Number objects.
      Then a value is assigned to the myNum object's
      description property.&lt;/p&gt;&lt;pre&gt;myNum = new Number(65);
Number.prototype.description = null;
myNum.description = "wind speed";&lt;/pre&gt;
    </example>
    <remarks>
      &lt;p&gt;The primary uses for the &lt;code&gt;Number&lt;/code&gt; object
      are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;To access its constant properties, which represent
      the largest and smallest representable numbers,
      positive and negative infinity, and the Not-a-Number
      value.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;To create numeric objects that you can add
      properties to. Most likely, you will rarely need to
      create a &lt;code&gt;Number&lt;/code&gt; object.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The properties of &lt;code&gt;Number&lt;/code&gt; are properties
      of the class itself, not of individual
      &lt;code&gt;Number&lt;/code&gt; objects.&lt;/p&gt;&lt;p&gt;&lt;b&gt;JavaScript 1.2&lt;/b&gt;: &lt;code&gt;Number(x)&lt;/code&gt; now
      produces &lt;code&gt;NaN&lt;/code&gt; rather than an error if
      &lt;code&gt;x&lt;/code&gt; is a string that does not contain a
      well-formed numeric literal. For example, the following
      prints &lt;code&gt;NaN&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;x=Number("three");
document.write(x + "&amp;lt;BR&amp;gt;");&lt;/pre&gt;&lt;p&gt;You can convert any object to a number using the
      top-level Number
      function.&lt;/p&gt;
    </remarks>
  </class>
  
  <class type="Object">
    <description>Object is the primitive JavaScript object type. All JavaScript objects are descended from Object. That is, all JavaScript objects have the methods defined for Object.</description>
	<browsers>
		<browser platform="IE" version="4.0+"/>
		<browser platform="Mozilla" version="1.0+"/>
		<browser platform="Netscape" version="2.0+"/>
		<browser platform="Opera" version="7.0+" />
		<browser platform="Chrome" version="5.0+" />
		<browser platform="Safari" version="1.0+" />
	</browsers>
    <constructors>
      <constructor>
        <description>Creates a new instance of an Object.</description>
        <parameters>
          <parameter name="value" type="String" usage="optional">
            <description>Specifies a JavaScript primitive type (String, Number, or Boolean) to be converted to a String, Number, or Boolean object.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
          <return-type type="Number"/>
          <return-type type="String"/>
          <return-type type="Boolean"/>
        </return-types>
      </constructor>
    </constructors>
    
	<properties>
      <property name="constructor" type="Function" access="read-write">
        <description>Specifies the function that creates a prototype of an object.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.1"/>
          <specification name="JScript 2.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <references>
          <reference name="Object.toString"/>
        </references>
      </property>
      
	  <property name="prototype" type="Object" access="read-write">
        <description>Represents the prototype for this class. You can use the prototype to add properties or methods to all instances of a class.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.1"/>
          <specification name="ECMA-262"/>
        </availability>
        <references>
          <reference name="Function.prototype"/>
        </references>
      </property>
    </properties>
    
	<methods>
      
	  <method name="eval">
			<parameters>
				<parameter name="string" type="string" usage="required">
					<description>Any string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables and properties of existing objects.</description>
				</parameter>
			</parameters>
			<references>
				<reference name="eval"/>
			</references>
			<return-types>
				<return-type type="Number"/>
				<return-type type="Object"/>
				<return-type type="String"/>
			</return-types>
			<availability>
				<specification name="JavaScript 1.1"/>
				<specification name="Deprecated as a method of objects; retained as a top-level function in JavaScript 1.2."/>
				<specification name="Removed as a method of objects in JavaScript 1.4"/>
			</availability>
			<remarks>&lt;p&gt;The &lt;code&gt;eval&lt;/code&gt; method is not longer available as a method of &lt;code&gt;Object&lt;/code&gt;.  Use the top-level &lt;code&gt;eval&lt;/code&gt; function.&lt;/p&gt;

&lt;h3&gt; Backward Compatibility &lt;/h3&gt;

&lt;h4&gt; JavaScript 1.2 and 1.3 &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;eval&lt;/code&gt; as a method of &lt;code&gt;Object&lt;/code&gt; and every object derived from &lt;code&gt;Object&lt;/code&gt; is deprecated (but still available).&lt;/p&gt;

&lt;h4&gt; JavaScript 1.1 &lt;/h4&gt;
&lt;p&gt;&lt;code&gt;eval&lt;/code&gt; is a method of &lt;code&gt;Object&lt;/code&gt; and every object derived from &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;</remarks>
			<description>Deprecated. Evaluates a string of JavaScript code in the context of an object.</description>
			<browsers>
				<browser platform="IE" version="4.0+"/>
				<browser platform="Mozilla" version="1.0+"/>
				<browser platform="Netscape" version="3.0+"/>
				<browser platform="Opera" version="7.0+" />
				<browser platform="Chrome" version="5.0+" />
				<browser platform="Safari" version="1.0+" />
			</browsers>
			<return-description>Returns the result of the evaluation.</return-description>
		</method>
		
		<method name="hasOwnProperty">
        <description>Checks whether a property is inherited.</description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="6.0+"/>
			<browser platform="Opera" version="7.0+" />
		</browsers>
        <return-description>Returns true if the object has a noninherited property that matches propname. Returns false if the object does not have a property that matches propname or if it inherits the property from its prototype object.</return-description>
        <parameters>
          <parameter name="propname" type="String" usage="required">
            <description>The name of the property to check for.</description>
          </parameter>
        </parameters>
        <references>
          <reference name="Function.prototype"/>
          <reference name="Object.propertyIsEnumerable"/>
        </references>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.5"/>
          <specification name="JScript 5.5"/>
          <specification name="ECMAScript v3"/>
        </availability>
      </method>
      
	  <method name="isPrototypeOf">
        <description>Returns true if the object is a prototype of another.</description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="6.0+"/>
			<browser platform="Opera" version="7.0+" />
		</browsers>
        <return-description>Returns true if the object is a prototype of another.</return-description>
        <parameters>
          <parameter name="object" type="Object" usage="required">
            <description>The object to compare the original object to.</description>
          </parameter>
        </parameters>
        <references>
          <reference name="Function.prototype"/>
          <reference name="Object.constructor"/>
        </references>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.5"/>
          <specification name="JScript 5.5"/>
          <specification name="ECMAScript v3"/>
        </availability>
      </method>
      
	  <method name="propertyIsEnumerable">
        <description>Returns true if the property can be enumerated in a for/in loop.</description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="6.0+"/>
			<browser platform="Opera" version="7.0+" />
		</browsers>
        <return-description>Returns true if the property can be enumerated in a for/in loop.</return-description>
        <parameters>
          <parameter name="property" type="String" usage="required">
            <description>Name of the property to check.</description>
          </parameter>
        </parameters>
        <references>
          <reference name="Function.prototype"/>
          <reference name="Object.hasOwnProperty"/>
        </references>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.5"/>
          <specification name="JScript 5.5"/>
          <specification name="ECMAScript v3"/>
        </availability>
      </method>
      
	  <method name="toLocaleString">
        <description>Returns a localized string representation of an object.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a localized string representation of an object.</return-description>
        <references>
          <reference name="Array.toLocaleString"/>
          <reference name="Date.toLocaleString"/>
          <reference name="Number.toLocaleString"/>
          <reference name="Object.toString"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.5"/>
          <specification name="JScript 5.5"/>
          <specification name="ECMAScript v3"/>
        </availability>
      </method>
      
	  <method name="toSource">
			<references>
				<reference name="toString"/>
			</references>
			<return-types>
				<return-type type="String"/>
			</return-types>
			<availability>
				<specification name="JavaScript 1.3"/>
			</availability>
			<example>
			&lt;h3&gt;Example: Using &lt;code&gt;toSource&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The following code defines the &lt;code&gt;Dog&lt;/code&gt; object type and creates &lt;code&gt;theDog&lt;/code&gt;, an object of type &lt;code&gt;Dog&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;function Dog(name,breed,color,sex) {
   this.name=name
   this.breed=breed
   this.color=color
   this.sex=sex
}
theDog = new Dog("Gabby","Lab","chocolate","girl")&lt;/pre&gt;

&lt;p&gt;Calling the &lt;code&gt;toSource&lt;/code&gt; method of &lt;code&gt;theDog&lt;/code&gt; displays the JavaScript source that defines the object:&lt;/p&gt;
&lt;pre&gt;theDog.toSource()
//returns ({name:"Gabby", breed:"Lab", color:"chocolate", sex:"girl"})&lt;/pre&gt;
			</example>
			<remarks>
			&lt;p&gt;The &lt;code&gt;toSource&lt;/code&gt; method returns the following values:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt; For the built-in &lt;code&gt;Object&lt;/code&gt; object, &lt;code&gt;toSource&lt;/code&gt; returns the following string indicating that the source code is not available:&lt;/li&gt;&lt;/ul&gt;
&lt;pre&gt;function Object() {
   [native code]
}
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;For instances of &lt;code&gt;Object&lt;/code&gt;, &lt;code&gt;toSource&lt;/code&gt; returns a string representing the source code.&lt;/li&gt;
&lt;li&gt;For custom objects, &lt;code&gt;toSource&lt;/code&gt; returns the JavaScript source that defines the object as a string.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;This method is usually called internally by JavaScript and not explicitly in code. You can call &lt;code&gt;toSource&lt;/code&gt; while debugging to examine the contents of an object.&lt;/p&gt;
			</remarks>
			<description>Returns a string representing the source code of the object.</description>
			<browsers>
				<browser platform="Mozilla" version="1.0+"/>
				<browser platform="Netscape" version="4.06+"/>
			</browsers>
			<return-description>Returns a string representing the source code of the object.</return-description>
	</method>
	
	<method name="toString">
        <description>Returns a string representing the specified object.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a string representing the specified object.</return-description>
        <references>
          <reference name="Object.constructor"/>
          <reference name="Object.toLocaleString"/>
          <reference name="Object.valueOf"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 2.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;p&gt;The following example prints the string equivalent of the current location.
          &lt;/p&gt;
          &lt;pre&gt;document.write(&quot;location.toString() is &quot; + location.toString() + &quot;&lt;BR&gt;&quot;)&lt;/pre&gt;
          &lt;p&gt;The output is as follows:
          &lt;/p&gt;
          &lt;pre&gt;location.toString() is file:///C|/TEMP/myprog.htmll&lt;/pre&gt;
          &lt;p&gt;Assume you have an &lt;code&gt;Image&lt;/code&gt; object named &lt;code&gt;sealife&lt;/code&gt; defined as follows:
          &lt;/p&gt;
          &lt;pre&gt;&amp;lt;IMG NAME=&quot;sealife&quot; SRC=&quot;images\seaotter.gif&quot; ALIGN=&quot;left&quot; VSPACE=&quot;10&quot;&amp;gt;&lt;/pre&gt;
          &lt;p&gt;Because the &lt;code&gt;Image&lt;/code&gt; object itself has no special &lt;code&gt;toString&lt;/code&gt; method, &lt;code&gt;sealife.toString()&lt;/code&gt; returns the following:
          &lt;/p&gt;
          &lt;pre&gt;object Image&lt;/pre&gt;
          &lt;p&gt;The following example prints the string equivalents of the numbers 0 through 9 in decimal and binary.
          &lt;/p&gt;
          &lt;pre&gt;for (x = 0; x &lt; 10; x++) {
   document.write(&quot;Decimal: &quot;, x.toString(10), &quot; Binary: &quot;,
      x.toString(2), &quot;&lt;BR&gt;&quot;)
}&lt;/pre&gt;
          &lt;p&gt;The preceding example produces the following output:
          &lt;/p&gt;
          &lt;pre&gt;Decimal: 0 Binary: 0
Decimal: 1 Binary: 1
Decimal: 2 Binary: 10
Decimal: 3 Binary: 11
Decimal: 4 Binary: 100
Decimal: 5 Binary: 101
Decimal: 6 Binary: 110
Decimal: 7 Binary: 111
Decimal: 8 Binary: 1000
Decimal: 9 Binary: 1001&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;Every object has a &lt;code&gt;toString&lt;/code&gt; method that is automatically called when it is to be represented as a text value or when an object is referred to in a string concatenation. For example, the following examples require &lt;code&gt;theDog&lt;/code&gt; to be represented as a string:
          &lt;/p&gt;
          &lt;pre&gt;document.write(theDog)
document.write(&quot;The dog is &quot; + theDog)&lt;/pre&gt;
          &lt;p&gt;By default, the &lt;code&gt;toString&lt;/code&gt; method is inherited by every object descended from &lt;code&gt;Object&lt;/code&gt;. You can override this method for custom objects that you create. If you do not override &lt;code&gt;toString&lt;/code&gt; in a custom object, &lt;code&gt;toString&lt;/code&gt; returns &lt;code&gt;[object &lt;i&gt;type&lt;/i&gt;]&lt;/code&gt;, where &lt;code&gt;&lt;i&gt;type&lt;/i&gt;&lt;/code&gt; is the object type or the name of the constructor function that created the object.
          &lt;/p&gt;&lt;p&gt;For example:
          &lt;/p&gt;
          &lt;pre&gt;var o = new Object()
o.toString // returns [object Object]&lt;/pre&gt;
        </remarks>
      </method>
      
	  <method name="unwatch">
		<parameters>
			<parameter name="prop" type="String" usage="required">
				<description>The name of a property of the object.</description>
			</parameter>
		</parameters>
		<references>
			<reference name="watch"/>
		</references>
		<return-types>
			<return-type type="Object"/>
		</return-types>
		<availability>
			<specification name="JavaScript 1.2"/>
		</availability>
		<remarks>&lt;p&gt;By default, this method is inherited by every object descended from &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;</remarks>
		<description>Removes a watchpoint set with the watch method.</description>
		<browsers>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
		</browsers>
		<return-description>Returns the object with the watchpoint removed.</return-description>
	</method>
	
	<method name="valueOf">
        <description>Returns the primitive value of the specified object </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the primitive value of the specified object</return-description>
        <references>
          <reference name="Object.toString"/>
        </references>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.1"/>
          <specification name="JScript 2.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <remarks>
          &lt;p&gt;JavaScript calls the &lt;code&gt;valueOf&lt;/code&gt; method to convert an object to a primitive value. You rarely need to invoke the &lt;code&gt;valueOf&lt;/code&gt; method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected.
          &lt;/p&gt;&lt;p&gt;By default, the &lt;code&gt;valueOf&lt;/code&gt; method is inherited by every object descended from &lt;code&gt;Object&lt;/code&gt;. Every built-in core object overrides this method to return an appropriate value. If an object has no primitive value, &lt;code&gt;valueOf&lt;/code&gt; returns the object itself, which is displayed as:
          &lt;/p&gt;
          &lt;pre&gt;object Object]&lt;/pre&gt;
          &lt;p&gt;You can use &lt;code&gt;valueOf&lt;/code&gt; within your own code to convert a built-in object into a primitive value. When you create a custom object, you can override &lt;code&gt;Object.valueOf&lt;/code&gt; to call a custom method instead of the default &lt;code&gt;Object&lt;/code&gt; method.
          &lt;/p&gt;
          &lt;h3&gt; Overriding &lt;code&gt;valueOf&lt;/code&gt; for custom objects &lt;/h3&gt;
          &lt;p&gt;You can create a function to be called in place of the default &lt;code&gt;valueOf&lt;/code&gt; method. Your function must take no arguments.
          &lt;/p&gt;&lt;p&gt;Suppose you have an object type &lt;code&gt;myNumberType&lt;/code&gt; and you want to create a &lt;code&gt;valueOf&lt;/code&gt; method for it. The following code assigns a user-defined function to the object's &lt;code&gt;valueOf&lt;/code&gt; method:
          &lt;/p&gt;
          &lt;pre&gt;myNumberType.prototype.valueOf = new Function(functionText);&lt;/pre&gt;
          &lt;p&gt;With the preceding code in place, any time an object of type &lt;code&gt;myNumberType&lt;/code&gt; is used in a context where it is to be represented as a primitive value, JavaScript automatically calls the function defined in the preceding code.
          &lt;/p&gt;&lt;p&gt;An object's &lt;code&gt;valueOf&lt;/code&gt; method is usually invoked by JavaScript, but you can invoke it yourself as follows:
          &lt;/p&gt;
          &lt;pre&gt;myNumber.valueOf(); &lt;/pre&gt;
          &lt;h3&gt; Note &lt;/h3&gt;
          &lt;p&gt;Objects in string contexts convert via the &lt;code&gt;toString&lt;/code&gt; method, which is different from &lt;code&gt;String&lt;/code&gt; objects converting to string primitives using &lt;code&gt;valueOf&lt;/code&gt;. All string objects have a string conversion, if only "&lt;code&gt;[object &lt;i&gt;type&lt;/i&gt;]&lt;/code&gt;". But many objects do not convert to number, boolean, or function.
          &lt;/p&gt;

        </remarks>
    </method>
    
	<method name="watch">
		<parameters>
			<parameter name="prop" type="String" usage="required">
				<description>Name of the property to set.</description>
			</parameter>
			<parameter name="handler" type="String" usage="required">
				<description>Name of the function to call.</description>
			</parameter>
		</parameters>
		<references>
			<reference name="unwatch"/>
		</references>
		<return-types>
			<return-type type="Object"/>
		</return-types>
		<availability>
			<specification name="JavaScript 1.2"/>
		</availability>
		<example>&lt;h3&gt;Example: Using &lt;code&gt;watch&lt;/code&gt; and &lt;code&gt;unwatch&lt;/code&gt; &lt;/h3&gt;

&lt;pre&gt;&lt;script language="JavaScript"&gt;

var o = {p:1};
o.watch("p",
   function (id,oldval,newval) {
      document.writeln("o." + id + " changed from "
         + oldval + " to " + newval);
      return newval;
   });

o.p = 2;
o.p = 3;
delete o.p;
o.p = 4;

o.unwatch('p');
o.p = 5;

&lt;/script&gt;
&lt;/pre&gt;
&lt;p&gt;This script displays the following:&lt;/p&gt;
&lt;pre&gt;o.p changed from 1 to 2
o.p changed from 2 to 3
o.p changed from undefined to 4&lt;/pre&gt;</example>
		<remarks>
		&lt;p&gt;Watches for assignment to a property named &lt;code&gt;prop&lt;/code&gt; in this object, calling &lt;code&gt;handler(prop, oldval, newval)&lt;/code&gt; whenever &lt;code&gt;prop&lt;/code&gt; is set and storing the return value in that property. A watchpoint can filter (or nullify) the value assignment, by returning a modified &lt;code&gt;newval&lt;/code&gt; (or &lt;code&gt;oldval&lt;/code&gt;).

&lt;/p&gt;&lt;p&gt;If you delete a property for which a watchpoint has been set, that watchpoint does not disappear. If you later recreate the property, the watchpoint is still in effect.&lt;/p&gt;

&lt;p&gt;To remove a watchpoint, use the &lt;code&gt;unwatch&lt;/code&gt; method. By default, the &lt;code&gt;watch&lt;/code&gt; method is inherited by every object descended from &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The JavaScript debugger has functionality similar to that provided by this method, as well as other debugging options. For information on the debugger, see Venkman.&lt;/p&gt;

&lt;p&gt;In NES 3.0 and 4.x, &lt;code&gt;handler&lt;/code&gt; is called from assignments in script as well as native code.  In Firefox, &lt;code&gt;handler&lt;/code&gt; is only called from assignments in script, not from native code.  For example, &lt;code&gt;window.watch('location', myHandler)&lt;/code&gt; will not call &lt;code&gt;myHandler&lt;/code&gt; if the user clicks a link to an anchor within the current document.  However, the following code will call &lt;code&gt;myHandler&lt;/code&gt;: &lt;code&gt;window.location += '#myAnchor';&lt;/code&gt;.&lt;/p&gt;
		</remarks>
		<description>Watches for a property to be assigned a value and runs a function when that occurs.</description>
		<browsers>
			<browser platform="Netscape" version="6.0+"/>
			<browser platform="Opera" version="7.0+" />
		</browsers>
		<return-description>Returns an object with the watch property set.</return-description>
	</method>
	
	<method name="create" scope="static">
		<parameters>
			<parameter name="o" type="Object" usage="required">
				<description>The prototype of the object created.</description>
			</parameter>
			<parameter name="properties" type="Object" usage="optional">
				<description>Name of the function to call.</description>
			</parameter>
		</parameters>
		<references>
			<reference name="defineProperties"/>
		</references>
		<return-types>
			<return-type type="Object"/>
		</return-types>
		<availability>
			<specification name="ECMAScript v5.1"/>
		</availability>
		<example>function User(){}
User.prototype.name = "Anonymous";
User.prototype.url = "http://google.com/";
var john = Object.create(new User(), {
  name: { value: "John", writable: false },
  url: { value: "http://google.com/" }
});

print( john.name );
// John

john.name = "Ted"; // Exception if in strict mode </example>
		<description>The create function creates a new object with a specified prototype.</description>
		<browsers>
			<browser platform="IE" version="9.0+"/>
			<browser platform="Mozilla" version="4.0+"/>
			<browser platform="Opera" version="12.0+" />
			<browser platform="Safari" version="5.0+"/>
			<browser platform="Chrome" version="5.0+"/>
		</browsers>
	</method>
	
	<method name="defineProperty" scope="static">
		<parameters>
			<parameter name="o" type="Object" usage="required">
				<description>The object to define the property on.</description>
			</parameter>
			<parameter name="p" type="String" usage="required">
				<description>The name of the property.</description>
			</parameter>
			<parameter name="attributes" type="Object" usage="required">
				<description>The property descriptor.</description>
			</parameter>
		</parameters>
		<references>
			<reference name="defineProperties"/>
		</references>
		<return-types>
			<return-type type="Object"/>
		</return-types>
		<availability>
			<specification name="ECMAScript v5.1"/>
		</availability>
		<example>var obj = {};
Object.defineProperty( obj, "value", {
  value: true,
  writable: false,
  enumerable: true,
  configurable: true
});

(function(){
  var name = "John";
  
  Object.defineProperty( obj, "name", {
    get: function(){ return name; },
    set: function(value){ name = value; }
  });
})();

print( obj.value )
// true

print( obj.name );
// John

obj.name = "Ted";
print( obj.name );
// Ted

for ( var prop in obj ) {
  print( prop );
}
// value
// name

obj.value = false; // Exception if in strict mode

Object.defineProperty( obj, "value", {
  writable: true,
  configurable: false
});

obj.value = false;
print( obj.value );
// false

delete obj.value; // Exception </example>
		<description>The defineProperty function is used to add an own property and/or update the attributes of an existing own property of an object.</description>
		<browsers>
			<browser platform="IE" version="8.0+"/>
			<browser platform="Mozilla" version="4.0+"/>
			<browser platform="Opera" version="12.0+" />
			<browser platform="Safari" version="5.0+"/>
			<browser platform="Chrome" version="5.0+"/>
		</browsers>
		<return-description>The object passed in as the first argument is returned.</return-description>
	</method>
	
	<method name="defineProperties" scope="static">
		<parameters>
			<parameter name="obj" type="Object" usage="required">
				<description>The object to define the properties on.</description>
			</parameter>
			<parameter name="props" type="String" usage="required">
				<description>The set of property descriptors.</description>
			</parameter>
		</parameters>
		<references>
			<reference name="defineProperty"/>
			<reference name="create"/>
		</references>
		<return-types>
			<return-type type="Object"/>
		</return-types>
		<availability>
			<specification name="ECMAScript v5.1"/>
		</availability>
		<example>var obj = {};
Object.defineProperties(obj, {
  "value": {
    value: true,
    writable: false
  },
  "name": {
    value: "John",
    writable: false
  }
});</example>
		<description>The defineProperties function is used to add own properties and/or update the attributes of existing own properties of an object.</description>
		<browsers>
			<browser platform="IE" version="9.0+"/>
			<browser platform="Mozilla" version="4.0+"/>
			<browser platform="Opera" version="12.0+" />
			<browser platform="Safari" version="5.0+"/>
			<browser platform="Chrome" version="5.0+"/>
		</browsers>
		<return-description>The object passed in as the first argument is returned.</return-description>
	</method>
	
	<method name="seal" scope="static">
		<parameters>
			<parameter name="obj" type="Object" usage="required">
				<description>The object to seal from changes to it's properties.</description>
			</parameter>
		</parameters>
		<references>
			<reference name="freeze"/>
			<reference name="isSealed"/>
		</references>
		<return-types>
			<return-type type="Object"/>
		</return-types>
		<availability>
			<specification name="ECMAScript v5.1"/>
		</availability>
		<description>Sealing an object prevents other code from deleting, or changing the descriptors of, any of the object's properties - and from adding new properties.</description>
		<remarks>You would seal an object if you want its existing properties to stay intact, without allowing for new additions, but while still allowing the user to write to or edit the properties.</remarks>
		<browsers>
			<browser platform="IE" version="9.0+"/>
			<browser platform="Mozilla" version="4.0+"/>
			<browser platform="Opera" version="12.0+" />
			<browser platform="Safari" version="5.1+"/>
			<browser platform="Chrome" version="6.0+"/>
		</browsers>
		<return-description>The object passed in as the first argument is returned.</return-description>
	</method>
	
	<method name="isSealed" scope="static">
		<parameters>
			<parameter name="obj" type="Object" usage="required">
				<description>The object to check if it is sealed from changes to it's properties.</description>
			</parameter>
		</parameters>
		<references>
			<reference name="seal"/>
			<reference name="isFrozen"/>
		</references>
		<return-types>
			<return-type type="Boolean"/>
		</return-types>
		<availability>
			<specification name="ECMAScript v5.1"/>
		</availability>
		<description>Sealing an object prevents other code from deleting, or changing the descriptors of, any of the object's properties - and from adding new properties.</description>
		<remarks>You would seal an object if you want its existing properties to stay intact, without allowing for new additions, but while still allowing the user to write to or edit the properties.</remarks>
		<browsers>
			<browser platform="IE" version="9.0+"/>
			<browser platform="Mozilla" version="4.0+"/>
			<browser platform="Opera" version="12.0+" />
			<browser platform="Safari" version="5.1+"/>
			<browser platform="Chrome" version="6.0+"/>
		</browsers>
		<return-description>The object passed in as the first argument is returned.</return-description>
	</method>
	
	<method name="freeze" scope="static">
		<parameters>
			<parameter name="obj" type="Object" usage="required">
				<description>The object to freeze from changes/edits to it's properties.</description>
			</parameter>
		</parameters>
		<references>
			<reference name="seal"/>
			<reference name="isFrozen"/>
		</references>
		<return-types>
			<return-type type="Object"/>
		</return-types>
		<availability>
			<specification name="ECMAScript v5.1"/>
		</availability>
		<description>Freezing an object is nearly identical to sealing it but with the addition of making the properties un-editable.</description>
		<remarks>Freezing an object is the ultimate form of lock-down. Once an object has been frozen it cannot be unfrozen - nor can it be tampered in any manner. This is the best way to make sure that your objects will stay exactly as you left them, indefinitely.</remarks>
		<browsers>
			<browser platform="IE" version="9.0+"/>
			<browser platform="Mozilla" version="4.0+"/>
			<browser platform="Opera" version="12.0+" />
			<browser platform="Safari" version="5.1+"/>
			<browser platform="Chrome" version="6.0+"/>
		</browsers>
		<return-description>The object passed in as the first argument is returned.</return-description>
	</method>
	
	<method name="isFrozen" scope="static">
		<parameters>
			<parameter name="obj" type="Object" usage="required">
				<description>The object to check if it is frozen from changes/edits to it's properties.</description>
			</parameter>
		</parameters>
		<references>
			<reference name="freeze"/>
			<reference name="isFrozen"/>
		</references>
		<return-types>
			<return-type type="Boolean"/>
		</return-types>
		<availability>
			<specification name="ECMAScript v5.1"/>
		</availability>
		<description>Freezing an object is nearly identical to sealing it but with the addition of making the properties un-editable.</description>
		<remarks>Freezing an object is the ultimate form of lock-down. Once an object has been frozen it cannot be unfrozen - nor can it be tampered in any manner. This is the best way to make sure that your objects will stay exactly as you left them, indefinitely.</remarks>
		<browsers>
			<browser platform="IE" version="9.0+"/>
			<browser platform="Mozilla" version="4.0+"/>
			<browser platform="Opera" version="12.0+" />
			<browser platform="Safari" version="5.1+"/>
			<browser platform="Chrome" version="6.0+"/>
		</browsers>
		<return-description>The object passed in as the first argument is returned.</return-description>
	</method>
	
	<method name="preventExtensions" scope="static">
		<parameters>
			<parameter name="obj" type="Object" usage="required">
				<description>The object to prevent from having new properties added.</description>
			</parameter>
		</parameters>
		<references>
			<reference name="isExtensible"/>
		</references>
		<return-types>
			<return-type type="Object"/>
		</return-types>
		<availability>
			<specification name="ECMAScript v5.1"/>
		</availability>
		<example>var obj = {};
obj.name = "John";
print( obj.name );
// John

print( Object.isExtensible( obj ) );
// true

Object.preventExtensions( obj );

obj.url = "http://ejohn.org/"; // Exception in strict mode

print( Object.isExtensible( obj ) );
// false </example>
		<description>preventExtensions locks down an object and prevents and future property additions from occurring.</description>
		<browsers>
			<browser platform="IE" version="9.0+"/>
			<browser platform="Mozilla" version="4.0+"/>
			<browser platform="Opera" version="12.0+" />
			<browser platform="Safari" version="5.1+"/>
			<browser platform="Chrome" version="6.0+"/>
		</browsers>
		<return-description>The object passed in as the first argument is returned.</return-description>
	</method>
	
	<method name="isExtensible" scope="static">
		<parameters>
			<parameter name="obj" type="Object" usage="required">
				<description>The object to check if it is prevented from having new properties added.</description>
			</parameter>
		</parameters>
		<references>
			<reference name="preventExtensions"/>
		</references>
		<return-types>
			<return-type type="Boolean"/>
		</return-types>
		<availability>
			<specification name="ECMAScript v5.1"/>
		</availability>
		<example>var obj = {};
obj.name = "John";
print( obj.name );
// John

print( Object.isExtensible( obj ) );
// true

Object.preventExtensions( obj );

obj.url = "http://ejohn.org/"; // Exception in strict mode

print( Object.isExtensible( obj ) );
// false </example>
		<description>isExtensible is a way to determine the current extensibility of an object.</description>
		<browsers>
			<browser platform="IE" version="9.0+"/>
			<browser platform="Mozilla" version="4.0+"/>
			<browser platform="Opera" version="12.0+" />
			<browser platform="Safari" version="5.1+"/>
			<browser platform="Chrome" version="6.0+"/>
		</browsers>
		<return-description>The object passed in as the first argument is returned.</return-description>
	</method>
	
	<method name="keys" scope="static">
		<parameters>
			<parameter name="obj" type="Object" usage="required">
				<description>The object to freeze from changes/edits to it's properties.</description>
			</parameter>
		</parameters>
		<references>
			<reference name="seal"/>
			<reference name="isFrozen"/>
		</references>
		<return-types>
			<return-type type="String[]"/>
		</return-types>
		<availability>
			<specification name="ECMAScript v5.1"/>
		</availability>
		<example>var obj = { name: "John", url: "http://ejohn.org/" };
print( Object.keys(obj).join(", ") );
// name, url </example>
		<description>Returns an array of strings representing all the enumerable property names of the object. This is identical to the method included in Prototype.js.</description>
		<browsers>
			<browser platform="IE" version="9.0+"/>
			<browser platform="Mozilla" version="4.0+"/>
			<browser platform="Opera" version="12.0+" />
			<browser platform="Safari" version="5.0+"/>
			<browser platform="Chrome" version="6.0+"/>
		</browsers>
		<return-description>An array of the property names of the passed in object.</return-description>
	</method>
	
	<method name="getPrototypeOf" scope="static">
		<parameters>
			<parameter name="obj" type="Object" usage="required">
				<description>The object on which we get the prototype property.</description>
			</parameter>
		</parameters>
		<return-types>
			<return-type type="Object"/>
		</return-types>
		<availability>
			<specification name="ECMAScript v5.1"/>
		</availability>
		<example>function Person(){}
Person.prototype.kick = function(type){
  alert(type + " kick!");
}

function Norris(){}

// Inherit properties from Person
Norris.prototype = new Person();

Norris.prototype.kick = function(){
  Object.getPrototypeOf(this).kick("Roundhouse");
};</example>
		<description>Returns the prototype internal property of the passed in object.</description>
		<browsers>
			<browser platform="IE" version="9.0+"/>
			<browser platform="Mozilla" version="3.5+"/>
			<browser platform="Opera" version="12.0+" />
			<browser platform="Safari" version="5.0+"/>
			<browser platform="Chrome" version="5.0+"/>
		</browsers>
	</method>
	
	<method name="getOwnPropertyDescriptor" scope="static">
		<parameters>
			<parameter name="obj" type="Object" usage="required">
				<description>The object on which we get the prototype descriptor.</description>
			</parameter>
			<parameter name="prop" type="String" usage="required">
				<description>The name of the property we're accessing the descriptor for.</description>
			</parameter>
		</parameters>
		<return-types>
			<return-type type="Object"/>
		</return-types>
		<availability>
			<specification name="ECMAScript v5.1"/>
		</availability>
		<example>var obj = { foo: "test" };
print(JSON.stringify( 
  Object.getOwnPropertyDescriptor( obj, "foo" )
));
// {"value": "test", "writable": true, 
//  "enumerable": true, "configurable": true} 
 </example>
		<description>This method allows you to access the descriptor of a property. This method is the only way to get at this information (it is, otherwise, not available to the user - these don't exist as visible properties on the property, they're stored internally in the ECMAScript engine).</description>
		<browsers>
			<browser platform="IE" version="8.0+"/>
			<browser platform="Mozilla" version="3.5+"/>
			<browser platform="Opera" version="12.0+" />
			<browser platform="Safari" version="5.0+"/>
			<browser platform="Chrome" version="5.0+"/>
		</browsers>
	</method>
	
	<method name="getOwnPropertyNames" scope="static">
		<parameters>
			<parameter name="obj" type="Object" usage="required">
				<description>The object on which we get the list of property names.</description>
			</parameter>
		</parameters>
		<references>
			<reference name="keys"/>
		</references>
		<return-types>
			<return-type type="String[]"/>
		</return-types>
		<availability>
			<specification name="ECMAScript v5.1"/>
		</availability>
		<example>var obj = { name: "John", surname: "Doe" };
print( Object.getOwnPropertyNames(obj).join(", ") ); // surname, name </example>
		<description>Nearly identical to Object.keys but returns all property names of the object (not just the enumerable ones).

An implementation isn't possible with regular ECMAScript since non-enumerable properties can't be enumerated. The output and usage is otherwise identical to Object.keys.</description>
		<browsers>
			<browser platform="IE" version="9.0+"/>
			<browser platform="Mozilla" version="3.5+"/>
			<browser platform="Opera" version="12.0+" />
			<browser platform="Safari" version="5.0+"/>
			<browser platform="Chrome" version="5.0+"/>
		</browsers>
	</method>
</methods>
    <references>
      <reference name="Array"/>
      <reference name="Boolean"/>
      <reference name="Function"/>
      <reference name="Function.prototype"/>
      <reference name="Number"/>
      <reference name="String"/>
    </references>
    <availability>
      <specification name="JavaScript objectsJavaScript 1.0"/>
      <specification name="JScript 1.0"/>
      <specification name="ECMAScript v1"/>
    </availability>
  </class>
  
  <class type="RangeError" superclass="Error">
    <description>Thrown when a number is out of its appropriate range.</description>
	<browsers>
		<browser platform="IE" version="5.0+"/>
		<browser platform="Mozilla" version="1.0+"/>
		<browser platform="Netscape" version="6.0+"/>
	</browsers>
    <constructors>
      <constructor>
        <description>Creates a new instance of RangeError.</description>
        <parameters>
          <parameter name="message" type="String" usage="optional">
            <description>An error message associated with the RangeError.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="RangeError"/>
        </return-types>
      </constructor>
    </constructors>
    <properties>
      <property name="message" type="String" access="read-write">
        <description>An error message associated with the RangeError.</description>
		<browsers>
			<browser platform="IE" version="5.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="6.0+"/>
		</browsers>
    </property>
      
	<property name="name" type="String" access="read-write">
        <description>Specifies the type of exception.</description>
		<browsers>
			<browser platform="IE" version="5.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="6.0+"/>
		</browsers>
      </property>
    </properties>
    <references>
      <reference name="Error"/>
      <reference name="Error.message"/>
      <reference name="Error.name"/>
    </references>
    <availability>
      <specification name="JavaScript 1.5"/>
      <specification name="JScript 5.5"/>
      <specification name="ECMAScript v3"/>
    </availability>
  </class>
  
  <class type="ReferenceError" superclass="Error">
    <description>Thrown if reading a variable that does not exist.</description>
	<browsers>
		<browser platform="IE" version="5.0+"/>
		<browser platform="Mozilla" version="1.0+"/>
		<browser platform="Netscape" version="6.0+"/>
	</browsers>
    <constructors>
      <constructor>
        <description>Creates a new instance of ReferenceError.</description>
        <parameters>
          <parameter name="message" type="String" usage="optional">
            <description>An error message associated with the ReferenceError.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="ReferenceError"/>
        </return-types>
      </constructor>
    </constructors>
    <properties>
      <property name="message" type="String" access="read-write">
        <description>An error message associated with the ReferenceError.</description>
		<browsers>
			<browser platform="IE" version="5.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="6.0+"/>
		</browsers>
      </property>
      
	  <property name="name" type="String" access="read-write">
        <description>Specifies the type of exception.</description>
		<browsers>
			<browser platform="IE" version="5.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="6.0+"/>
		</browsers>
      </property>
    </properties>
    <references>
      <reference name="Error"/>
      <reference name="Error.message"/>
      <reference name="Error.name"/>
    </references>
    <availability>
      <specification name="JavaScript 1.5"/>
      <specification name="JScript 5.5"/>
      <specification name="ECMAScript v3"/>
    </availability>
  </class>
  
  <class type="RegExp" superclass="Object">
    <description>Pattern for a regular expression.</description>
	<browsers>
		<browser platform="IE" version="4.0+"/>
		<browser platform="Mozilla" version="1.0+"/>
		<browser platform="Netscape" version="4.0+"/>
		<browser platform="Opera" version="7.0+" />
		<browser platform="Chrome" version="5.0+" />
		<browser platform="Safari" version="1.0+" />
	</browsers>
    <constructors>
      <constructor>
        <description>Creates a new instance of RegExp.</description>
        <parameters>
          <parameter name="pattern" type="String" usage="optional">
            <description>The text of the regular expression.</description>
          </parameter>
          <parameter name="flags" type="String" usage="optional">
            <description>If specified, flags can have any combination of the following values: g - global match, i - ignore case, m - match over multiple lines.</description>
          </parameter>
        </parameters>
        <exceptions>
          <exception type="SyntaxError">
            <description>Throws SyntaxError if pattern is not a legal regular expression or if flags contains characters other than g, i, or m.</description>
          </exception>
          <exception type="TypeError">
            <description>Throws TypeError if pattern is a regular expression object and the flags argument is present.</description>
          </exception>
        </exceptions>
        <return-types>
          <return-type type="RegExp"/>
        </return-types>
      </constructor>
    </constructors>
    <properties>
      
	  <property name="$n" type="String" access="read">
		<availability>
			<specification name="JavaScript 1.2"/>
			<specification name="JScript 3.0"/>
		</availability>
		<description>String corresponding to the (nth) expression of a match.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
		</browsers>
	</property>
	
	<property name="constructor" type="Object">
		<availability>
			<specification name="JavaScript 1.2"/>
			<specification name="JScript 3.0"/>
			<specification name="ECMAScript v3"/>
		</availability>
		<references>
			<reference name="Object.constructor"/>
		</references>
		<description>Specifies the function that creates the RegExp prototype.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
	</property>
	
	<property name="global" type="Boolean" access="read">
        <description>
          Whether or not the "g" flag is used with
          the regular expression.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 5.5"/>
          <specification name="ECMAScript v3"/>
        </availability>
        <remarks>
          &lt;p&gt;&lt;code&gt;global&lt;/code&gt; is a property of an individual
          regular expression object.&lt;/p&gt;&lt;p&gt;The value of &lt;code&gt;global&lt;/code&gt; is true if the
          "&lt;code&gt;g&lt;/code&gt;" flag was used; otherwise,
          &lt;code&gt;false&lt;/code&gt;. The "&lt;code&gt;g&lt;/code&gt;" flag indicates
          that the regular expression should be tested against all
          possible matches in a string.&lt;/p&gt;&lt;p&gt;You cannot change this property directly.&lt;/p&gt;
        </remarks>
      </property>
      
	  <property name="ignoreCase" type="Boolean" access="read">
        <description>
          Whether or not the "i" flag is used with
          the regular expression.
        </description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 5.5"/>
          <specification name="ECMAScript v3"/>
        </availability>
        <remarks>
          &lt;p&gt;&lt;code&gt;ignoreCase&lt;/code&gt; is a property of an individual
          regular expression object.&lt;/p&gt;&lt;p&gt;The value of &lt;code&gt;ignoreCase&lt;/code&gt; is true if the
          "&lt;code&gt;i&lt;/code&gt;" flag was used; otherwise, false. The
          "&lt;code&gt;i&lt;/code&gt;" flag indicates that case should be
          ignored while attempting a match in a string.&lt;/p&gt;&lt;p&gt;You cannot change this property directly.&lt;/p&gt;
        </remarks>
      </property>
      
	  <property name="index" type="Number" access="read">
		<availability>
			<specification name="JScript 3.0"/>
		</availability>
		<description>Character position of the start of the first match.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
		</browsers>
	</property>
	
	<property name="input" type="String" access="read">
		<availability>
			<specification name="JavaScript 1.2"/>
			<specification name="JScript 3.0"/>
		</availability>
		<description>String containing the most recently found regular expression match.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
		</browsers>
	</property>
	
	<property name="lastIndex" type="Number" access="read-write">
        <description>
          A read/write integer property that specifies the index
          at which to start the next match.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 5.5"/>
          <specification name="ECMAScript v3"/>
        </availability>
        <references>
          <reference name="RegExp.exec"/>
          <reference name="RegExp.test"/>
        </references>
        <remarks>
          &lt;p&gt;&lt;code&gt;lastIndex&lt;/code&gt; is a property of an individual
          regular expression object.&lt;/p&gt;&lt;p&gt;This property is set only if the regular expression
          used the "&lt;code&gt;g&lt;/code&gt;" flag to indicate a global
          search. The following rules apply:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If &lt;code&gt;lastIndex&lt;/code&gt; is greater than the
          length of the string, &lt;code&gt;regexp.test&lt;/code&gt; and
          &lt;code&gt;regexp.exec&lt;/code&gt; fail, and
          &lt;code&gt;lastIndex&lt;/code&gt; is set to 0.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If &lt;code&gt;lastIndex&lt;/code&gt; is equal to the length of
          the string and if the regular expression matches the
          empty string, then the regular expression matches input
          starting at &lt;code&gt;lastIndex&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If &lt;code&gt;lastIndex&lt;/code&gt; is equal to the length of
          the string and if the regular expression does not match
          the empty string, then the regular expression
          mismatches input, and &lt;code&gt;lastIndex&lt;/code&gt; is reset
          to 0.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Otherwise, &lt;code&gt;lastIndex&lt;/code&gt; is set to the
          next position following the most recent match.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For example, consider the following sequence of
          statements:&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;code&gt;re = /(hi)?/g&lt;/code&gt; &lt;/dt&gt;&lt;dd&gt;Matches the empty string.&lt;/dd&gt;&lt;/dl&gt;&lt;dl&gt;&lt;dt&gt;&lt;code&gt;re("hi")&lt;/code&gt; &lt;/dt&gt;&lt;dd&gt;Returns &lt;code&gt;["hi", "hi"]&lt;/code&gt; with
          &lt;code&gt;lastIndex&lt;/code&gt; equal to 2.&lt;/dd&gt;&lt;/dl&gt;&lt;dl&gt;&lt;dt&gt;&lt;code&gt;re("hi")&lt;/code&gt; &lt;/dt&gt;&lt;dd&gt;Returns &lt;code&gt;[""]&lt;/code&gt;, an empty array whose
          zeroth element is the match string. In this case, the
          empty string because &lt;code&gt;lastIndex&lt;/code&gt; was 2 (and
          still is 2) and "&lt;code&gt;hi&lt;/code&gt;" has length 2.&lt;/dd&gt;&lt;/dl&gt;
        </remarks>
    </property>
      
	<property name="lastMatch" type="String" access="read">
		<availability>
			<specification name="JavaScript 1.2"/>
			<specification name="JScript 5.5"/>
		</availability>
		<description>String containing the last characters of the last regular expression match.</description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
		</browsers>
	</property>
	
	<property name="lastParen" type="String" access="read">
		<availability>
			<specification name="JavaScript 1.2"/>
			<specification name="JScript 5.5"/>
		</availability>
		<description>String containing the most recent parenthesized match.</description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
		</browsers>
	</property>
	
	<property name="leftContext" type="String" access="read">
		<availability>
			<specification name="JavaScript 1.2"/>
			<specification name="JScript 5.5"/>
		</availability>
		<description>String containing the characters before the most recently found regular expression match.</description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
		</browsers>
	</property>
	
	<property name="multiline" type="Boolean" access="read">
		<availability>
			<specification name="JavaScript 1.2"/>
			<specification name="JScript 5.5"/>
			<specification name="ECMAScript v3"/>
		</availability>
		<remarks>
		&lt;p&gt;&lt;code&gt;multiline&lt;/code&gt; is a property of an individual regular expression object.&lt;/p&gt;

&lt;p&gt;The value of &lt;code&gt;multiline&lt;/code&gt; is true if the "&lt;code&gt;m&lt;/code&gt;" flag was used; otherwise, false. The "&lt;code&gt;m&lt;/code&gt;" flag indicates that a multiline input string should be treated as multiple lines. For example, if "&lt;code&gt;m&lt;/code&gt;" is used, "&lt;code&gt;^&lt;/code&gt;" and "&lt;code&gt;$&lt;/code&gt;" change from matching at the start or end of any line within the string to only the start or end of the entire string.&lt;/p&gt;

&lt;p&gt;You cannot change this property directly.&lt;/p&gt;
		</remarks>
		<description>Whether or not the "m" (multiline) flag is used with the regular expression.</description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
	</property>
	
	<property name="prototype" type="RegExp" access="read-write">
		<availability>
			<specification name="JavaScript 1.2"/>
			<specification name="JScript 3.0"/>
			<specification name="ECMAScript v3"/>
		</availability>
		<description>Reference to the RegExp prototype object.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
	</property>
	
	<property name="rightContext" type="String" access="read">
		<availability>
			<specification name="JavaScript 1.2"/>
			<specification name="JScript 5.5"/>
			<specification name="ECMAScript v3"/>
		</availability>
		<description>String containing the characters following the most recently found regular expression match.</description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
		</browsers>
	</property>
	
	<property name="source" type="String" access="read">
        <description>
          A read-only property that contains the text of the
          pattern, excluding the forward slashes.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v3"/>
        </availability>
        <remarks>
          &lt;p&gt;&lt;code&gt;source&lt;/code&gt; is a property of an individual
          regular expression object.&lt;/p&gt;&lt;p&gt;You cannot change this property directly.&lt;/p&gt;
        </remarks>
      </property>
    </properties>
   
    <methods>
      <method name="compile">
		<parameters>
			<parameter name="expr" type="Object" usage="required">
				<description>The regular expression to be compiled.</description>
			</parameter>
			<parameter name="flags" type="Object" usage="required">
				<description>The flags to be compiled with the regular expression.</description>
			</parameter>
		</parameters>
		<return-types>
				<return-type type="RegExp"/>
		</return-types>
		<availability>
			<specification name="JavaScript 1.2"/>
			<specification name="JScript 3.0"/>
			<specification name="ECMAScript v3"/>
		</availability>
		<description>Creates a new regular expression by compiling the specified regular expression with the specified flags.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
		</browsers>
		<return-description>Returns a new regular expression created by compiling the specified regular expression with the specified flags.</return-description>
	</method>
	
	<method name="exec">
        <description>
          Executes the search for a match in a specified string.
          Returns a result array.
        </description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a result array.</return-description>
        <parameters>
          <parameter name="str" type="String" usage="required">
            <description>The string against which to match the regular expression.</description>
          </parameter>
        </parameters>
        <exceptions>
          <exception type="TypeError">
            <description>Throws TypeError if the method is invoked on an object that is not a RegExp.</description>
          </exception>
        </exceptions>
        <references>
          <reference name="RegExp.lastIndex"/>
          <reference name="RegExp.test"/>
          <reference name="String.match"/>
          <reference name="String.replace"/>
          <reference name="String.search"/>
        </references>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v3"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;exec&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;In the following example, the user enters a name and
          the script executes a match against the input. It then
          cycles through the array to see if other names match the
          user's name.&lt;/p&gt;&lt;p&gt;This script assumes that first names of registered
          party attendees are preloaded into the array
          &lt;code&gt;A&lt;/code&gt;, perhaps by gathering them from a party
          database.&lt;/p&gt;&lt;pre&gt;
A = ["Frank", "Emily", "Jane", "Harry", "Nick", "Beth", "Rick",
      "Terrence", "Carol", "Ann", "Terry", "Frank", "Alice", "Rick",
      "Bill", "Tom", "Fiona", "Jane", "William", "Joan", "Beth"]

function lookup() {
   firstName = /\w+/i();
   if (!firstName)
      window.alert (RegExp.input + " isn't a name!");
   else {
      count = 0;
      for (i=0; i&amp;lt;A.length; i++)
         if (firstName[0].toLowerCase() == A[i].toLowerCase()) count++;
      if (count ==1)
         midstring = " other has ";
      else
         midstring = " others have ";
      window.alert ("Thanks, " + count + midstring + "the same name!")
   }
}

&amp;lt;p&amp;gt;Enter your first name and then press Enter.&amp;lt;/p&amp;gt;

&amp;lt;FORM&amp;gt; &amp;lt;INPUT TYPE:"TEXT" NAME="FirstName" onChange="lookup(this);"&amp;gt; &amp;lt;/ FORM&amp;gt;

&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;As shown in the syntax description, a regular
          expression's exec method can be called either directly,
          (with &lt;code&gt;regexp.exec(str)&lt;/code&gt;) or indirectly (with
          &lt;code&gt;regexp(str)&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;If you are executing a match simply to find true or
          false, use the &lt;code&gt;test&lt;/code&gt;
          method or the &lt;code&gt;String&lt;/code&gt;&lt;code&gt;search&lt;/code&gt;
          method.&lt;/p&gt;&lt;p&gt;If the match succeeds, the &lt;code&gt;exec&lt;/code&gt; method
          returns an array and updates properties of the regular
          expression object. If the match fails, the
          &lt;code&gt;exec&lt;/code&gt; method returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Consider the following example:&lt;/p&gt;&lt;pre&gt;
//Match one d followed by one or more b's followed by one d
//Remember matched b's and the following d
//Ignore case
myRe=/d(b+)(d)/ig;
myArray = myRe.exec("cdbBdbsbz");
&lt;/pre&gt;&lt;p&gt;The following table shows the results for this
          script:&lt;/p&gt;&lt;table class="fullwidth-table"&gt;&lt;tr&gt;&lt;td class="header"&gt;Object&lt;/td&gt;&lt;td class="header"&gt;Property/Index&lt;/td&gt;&lt;td class="header"&gt;Description&lt;/td&gt;&lt;td class="header"&gt;Example&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td rowspan="5"&gt;&lt;code&gt;myArray&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt; &lt;/code&gt;&lt;/td&gt;&lt;td&gt;The content of &lt;code&gt;myArray&lt;/code&gt;.&lt;/td&gt;&lt;td&gt;&lt;code&gt;["dbBd", "bB", "d"]&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;index&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The 0-based index of the match in the
          string.&lt;/td&gt;&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;input&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The original string.&lt;/td&gt;&lt;td&gt;&lt;code&gt;cdbBdbsbz&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;[0]&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The last matched characters&lt;/td&gt;&lt;td&gt;&lt;code&gt;dbBd&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;[1], ...[&lt;i&gt;n&lt;/i&gt;]&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The parenthesized substring matches, if any. The
          number of possible parenthesized substrings is
          unlimited.&lt;/td&gt;&lt;td&gt;&lt;code&gt;[1] = bB&lt;br /&gt;
          [2] = d&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td rowspan="5"&gt;&lt;code&gt;myRe&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The index at which to start the next match.&lt;/td&gt;&lt;td&gt;&lt;code&gt;5&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;ignoreCase&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Indicates if the "&lt;code&gt;i&lt;/code&gt;" flag was used
          to ignore case.&lt;/td&gt;&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;global&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Indicates if the "&lt;code&gt;g&lt;/code&gt;" flag was used
          for a global match.&lt;/td&gt;&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;multiline&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Indicates if the "&lt;code&gt;m&lt;/code&gt;" flag was used
          for a global match.&lt;/td&gt;&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;source&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The text of the pattern.&lt;/td&gt;&lt;td&gt;&lt;code&gt;d(b+)(d)&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;If your regular expression uses the "&lt;code&gt;g&lt;/code&gt;"
          flag, you can use the &lt;code&gt;exec&lt;/code&gt; method multiple
          times to find successive matches in the same string. When
          you do so, the search starts at the substring of
          &lt;code&gt;str&lt;/code&gt; specified by the regular expression's
          &lt;code&gt;lastIndex&lt;/code&gt; property. For example, assume you
          have this script:&lt;/p&gt;&lt;pre&gt;
myRe=/ab*/g;
str = "abbcdefabh";
myArray = myRe.exec(str);
document.writeln("Found " + myArray[0] +
   ". Next match starts at " + myRe.lastIndex)
mySecondArray = myRe.exec(str);
document.writeln("Found " + mySecondArray[0] +
   ". Next match starts at " + myRe.lastIndex)
&lt;/pre&gt;&lt;p&gt;This script displays the following text:&lt;/p&gt;&lt;pre&gt;Found abb. Next match starts at 3
Found ab. Next match starts at 9. &lt;/pre&gt;
        </remarks>
      </method>
      
	  <method name="test">
        <description>Executes the search for a match between a regular expression and a specified string.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns true if there is a match.</return-description>
        <parameters>
          <parameter name="regexp" type="String" usage="required">
            <description>The name of the regular expression. It can be a variable name or a literal.</description>
          </parameter>
          <parameter name="str" type="String" usage="required">
            <description>The string against which to match the regular expression.</description>
          </parameter>
        </parameters>
        <exceptions>
          <exception type="TypeError">
            <description>Throws TypeError if the method is invoked on an object that is not a RegExp.</description>
          </exception>
        </exceptions>
        <references>
          <reference name="RegExp.exec"/>
          <reference name="RegExp.lastIndex"/>
          <reference name="String.match"/>
          <reference name="String.replace"/>
          <reference name="String.substring"/>
        </references>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v3"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;test&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following example prints a message which depends
          on the success of the test:&lt;/p&gt;&lt;pre&gt;function testinput(re, str){
   if (re.test(str))
      midstring = " contains ";
   else
      midstring = " does not contain ";
   document.write (str + midstring + re.source);
}&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;When you want to know whether a pattern is found in a
          string use the &lt;code&gt;test&lt;/code&gt; method (similar to the
          &lt;code&gt;String.search&lt;/code&gt;
          method); for more information (but slower execution) use
          the &lt;code&gt;exec&lt;/code&gt;
          method (similar to the &lt;code&gt;String.match&lt;/code&gt;
          method).&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="toSource">
		<references>
			<reference name="Object.toSource"/>
		</references>
		<return-types>
			<return-type type="String"/>
		</return-types>
		<availability>
			<specification name=""/>
		</availability>
		<remarks>&lt;p&gt;The &lt;code&gt;toSource&lt;/code&gt; method returns the following values:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt; For the built-in &lt;code&gt;RegExp&lt;/code&gt; object, &lt;code&gt;toSource&lt;/code&gt; returns the following string indicating that the source code is not available/&lt;/li&gt;&lt;/ul&gt;
&lt;pre&gt;function Boolean() {
   [native code]
}
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt; For instances of &lt;code&gt;RegExp&lt;/code&gt;, &lt;code&gt;toSource&lt;/code&gt; returns a string representing the source code.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;This method is usually called internally by JavaScript and not explicitly in code.&lt;/p&gt;
</remarks>
	<description>Returns a string representing the source code of the object.</description>
	<browsers>
		<browser platform="IE" version="4.0+"/>
		<browser platform="Mozilla" version="1.0+"/>
		<browser platform="Netscape" version="4.0+"/>
	</browsers>
	<return-description>Returns a string representing the source code of the object.</return-description>
	</method>
	
	<method name="toString">
        <description>Returns a string representing the specified object.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a string representing the specified object.</return-description>
        <exceptions>
          <exception type="TypeError">
            <description>Throws TypeError if the method is invoked on an object that is not a RegExp.</description>
          </exception>
        </exceptions>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v3"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;toString&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following example displays the string value of a
          &lt;code&gt;RegExp&lt;/code&gt; object:&lt;/p&gt;&lt;pre&gt;myExp = new RegExp("a+b+c");
alert(myExp.toString())         displays "/a+b+c/"&lt;/pre&gt;
        </example>
        <references>
          <reference name="Object.toString"/>
        </references>
        <remarks>
          &lt;p&gt;The &lt;code&gt;RegExp&lt;/code&gt; object overrides the
          &lt;code&gt;toString&lt;/code&gt; method of the &lt;code&gt;Object&lt;/code&gt;
          object; it does not inherit &lt;code&gt;Object.toString&lt;/code&gt;.
          For &lt;code&gt;RegExp&lt;/code&gt; objects, the
          &lt;code&gt;toString&lt;/code&gt; method returns a string
          representation of the object.&lt;/p&gt;
        </remarks>
      </method>
    </methods>
    <availability>
      <specification name="JavaScript 1.2"/>
      <specification name="JScript 3.0"/>
      <specification name="ECMAScript v3"/>
    </availability>
    <example>
      &lt;h3&gt;Using the &lt;code&gt;replace&lt;/code&gt; method&lt;/h3&gt;&lt;p&gt;The following script uses the &lt;code&gt;replace&lt;/code&gt;
      method to switch the words in the string. In the
      replacement text, the script uses "&lt;code&gt;$1&lt;/code&gt;" and
      "&lt;code&gt;$2&lt;/code&gt;" to indicate the results of the
      corresponding matching parentheses in the regular
      expression pattern.&lt;/p&gt;&lt;pre&gt;var re = /(\w+)\s(\w+)/;
var str = "John Smith";
var newstr = str.replace(re, "$2, $1");
document.write(newstr);&lt;/pre&gt;&lt;p&gt;This displays "Smith, John".&lt;/p&gt;&lt;h3&gt;Using &lt;code&gt;input&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;In the following example, &lt;code&gt;RegExp.input&lt;/code&gt; is
      set by the Change event. In the &lt;code&gt;getInfo&lt;/code&gt;
      function, the &lt;code&gt;exec&lt;/code&gt; method uses the value of
      &lt;code&gt;RegExp.input&lt;/code&gt; as its argument.&lt;/p&gt;&lt;pre&gt;
function getInfo() {
   var re = /(\w+)\s(\d+)/;
   var m = re.exec();
   window.alert(m[0] + ", your age is " + m[2]);
}

Enter your first name and your age, and then press Enter.

&amp;lt;form&amp;gt;
&amp;lt;input type="text" name="NameAge" onchange="getInfo(this);"/&amp;gt;
&amp;lt;/form&amp;gt;&lt;/pre&gt;
    </example>
    <remarks>
      &lt;p&gt;When using the constructor function, the normal string
      escape rules (preceding special characters with \ when
      included in a string) are necessary. For example, the
      following are equivalent:&lt;/p&gt;&lt;pre&gt;re = new RegExp("\\w+")
re = /\w+/&lt;/pre&gt;&lt;h3&gt;Special characters in regular expressions&lt;/h3&gt;&lt;table class="fullwidth-table"&gt;&lt;tr&gt;&lt;td class="header"&gt;Character&lt;/td&gt;&lt;td class="header"&gt;Meaning&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;\&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;For characters that are usually treated
      literally, indicates that the next character is
      special and not to be interpreted literally.&lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;/b/&lt;/code&gt; matches the
      character 'b'. By placing a backslash in front of
      b, that is by using &lt;code&gt;/\b/&lt;/code&gt;, the
      character becomes special to mean match a word
      boundary.&lt;/p&gt;&lt;p&gt;-or-&lt;/p&gt;&lt;p&gt;For characters that are usually treated
      specially, indicates that the next character is not
      special and should be interpreted literally.&lt;/p&gt;&lt;p&gt;For example, * is a special character that means
      0 or more occurrences of the preceding character
      should be matched; for example, &lt;code&gt;/a*/&lt;/code&gt;
      means match 0 or more a's. To match &lt;code&gt;*&lt;/code&gt;
      literally, precede the it with a backslash; for
      example, &lt;code&gt;/a\*/&lt;/code&gt; matches 'a*'.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches beginning of input. If the multiline
      flag is set to true, also matches immediately after
      a line break character.&lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;/^A/&lt;/code&gt; does not match
      the 'A' in "an A", but does match the first 'A' in
      "An A."&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches end of input. If the multiline flag is
      set to true, also matches immediately before a line
      break character.&lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;/t$/&lt;/code&gt; does not match
      the 't' in "eater", but does match it in "eat".&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches the preceding item 0 or more times.&lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;/bo*/&lt;/code&gt; matches 'boooo'
      in "A ghost booooed" and 'b' in "A bird warbled",
      but nothing in "A goat grunted".&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches the preceding item 1 or more times.
      Equivalent to &lt;code&gt;{1,}&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;/a+/&lt;/code&gt; matches the 'a'
      in "candy" and all the a's in "caaaaaaandy".&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches the preceding item 0 or 1 time.&lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;/e?le?/&lt;/code&gt; matches the
      'el' in "angel" and the 'le' in "angle."&lt;/p&gt;&lt;p&gt;If used immediately after any of the quantifiers
      &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, or
      &lt;code&gt;{}&lt;/code&gt;, makes the quantifier non-greedy
      (matching the minimum number of times), as opposed
      to the default, which is greedy (matching the
      maximum number of times).&lt;/p&gt;&lt;p&gt;Also used in lookahead assertions, described
      under &lt;code&gt;(?=)&lt;/code&gt;, &lt;code&gt;(?!)&lt;/code&gt;, and
      &lt;code&gt;(?:)&lt;/code&gt; in this table.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;.&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;(The decimal point) matches any single character
      except the newline character.&lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;/.n/&lt;/code&gt; matches 'an' and
      'on' in "nay, an apple is on the tree", but not
      'nay'.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;(x)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches 'x' and remembers the match. These are
      called capturing parentheses.&lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;/(foo)/&lt;/code&gt; matches and
      remembers 'foo' in "foo bar." The matched substring
      can be recalled from the resulting array's elements
      &lt;code&gt;[1], ..., [n]&lt;/code&gt; or from the predefined
      &lt;code&gt;RegExp&lt;/code&gt; object's properties &lt;code&gt;$1,
      ..., $9&lt;/code&gt;.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?:x)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches 'x' but does not remember the match.
      These are called non-capturing parentheses. The
      matched substring can not be recalled from the
      resulting array's elements &lt;code&gt;[1], ...,
      [n]&lt;/code&gt; or from the predefined
      &lt;code&gt;RegExp&lt;/code&gt; object's properties &lt;code&gt;$1,
      ..., $9&lt;/code&gt;.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;x(?=y)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches 'x' only if 'x' is followed by 'y'. For
      example, &lt;code&gt;/Jack(?=Sprat)/&lt;/code&gt; matches
      'Jack' only if it is followed by 'Sprat'.
      &lt;code&gt;/Jack(?=Sprat|Frost)/&lt;/code&gt; matches 'Jack'
      only if it is followed by 'Sprat' or 'Frost'.
      However, neither 'Sprat' nor 'Frost' is part of the
      match results.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;x(?!y)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches 'x' only if 'x' is not followed by 'y'.
      For example, &lt;code&gt;/\d+(?!\.)/&lt;/code&gt; matches a
      number only if it is not followed by a decimal
      point.&lt;/p&gt;&lt;p&gt;&lt;code&gt;/\d+(?!\.)/.exec("3.141")&lt;/code&gt; matches
      141 but not 3.141.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;x|y&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches either 'x' or 'y'.&lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;/green|red/&lt;/code&gt; matches
      'green' in "green apple" and 'red' in "red
      apple."&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;{n}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Where &lt;code&gt;n&lt;/code&gt; is a positive integer.
      Matches exactly &lt;code&gt;n&lt;/code&gt; occurrences of the
      preceding item.&lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;/a{2}/&lt;/code&gt; doesn't match
      the 'a' in "candy," but it matches all of the a's
      in "caandy," and the first two a's in
      "caaandy."&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;{n,}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Where &lt;code&gt;n&lt;/code&gt; is a positive integer.
      Matches at least &lt;code&gt;n&lt;/code&gt; occurrences of the
      preceding item.&lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;/a{2,}&lt;/code&gt; doesn't match
      the 'a' in "candy", but matches all of the a's in
      "caandy" and in "caaaaaaandy."&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;{n,m}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Where &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;m&lt;/code&gt; are
      positive integers. Matches at least &lt;code&gt;n&lt;/code&gt;
      and at most &lt;code&gt;m&lt;/code&gt; occurrences of the
      preceding item.&lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;/a{1,3}/&lt;/code&gt; matches
      nothing in "cndy", the 'a' in "candy," the first
      two a's in "caandy," and the first three a's in
      "caaaaaaandy". Notice that when matching
      "caaaaaaandy", the match is "aaa", even though the
      original string had more a's in it.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;[xyz]&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;A character set. Matches any one of the enclosed
      characters. You can specify a range of characters
      by using a hyphen.&lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;[abcd]&lt;/code&gt; is the same as
      &lt;code&gt;[a-c]&lt;/code&gt;. They match the 'b' in "brisket"
      and the 'c' in "ache".&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;[^xyz]&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;A negated or complemented character set. That
      is, it matches anything that is not enclosed in the
      brackets. You can specify a range of characters by
      using a hyphen.&lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;[^abc]&lt;/code&gt; is the same as
      &lt;code&gt;[^a-c]&lt;/code&gt;. They initially match 'r' in
      "brisket" and 'h' in "chop."&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;[\b]&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches a backspace. (Not to be confused with
      &lt;code&gt;\b&lt;/code&gt;.)&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;\b&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches a word boundary, such as a space. (Not
      to be confused with &lt;code&gt;[\b]&lt;/code&gt;.)&lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;/\bn\w/&lt;/code&gt; matches the
      'no' in "noonday"; &lt;code&gt;/\wy\b/&lt;/code&gt; matches the
      'ly' in "possibly yesterday."&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;\B&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches a non-word boundary.&lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;/\w\Bn/&lt;/code&gt; matches 'on'
      in "noonday", and &lt;code&gt;/y\B\w/&lt;/code&gt; matches 'ye'
      in "possibly yesterday."&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;\cX&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Where &lt;code&gt;X&lt;/code&gt; is a letter from A - Z.
      Matches a control character in a string.&lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;/\cM/&lt;/code&gt; matches
      control-M in a string.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;\d&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches a digit character. Equivalent to
      &lt;code&gt;[0-9]&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;/\d/&lt;/code&gt; or
      &lt;code&gt;/[0-9]/&lt;/code&gt; matches '2' in "B2 is the
      suite number."&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;\D&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches any non-digit character. Equivalent to
      &lt;code&gt;[^0-9]&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;/\D/&lt;/code&gt; or
      &lt;code&gt;/[^0-9]/&lt;/code&gt; matches 'B' in "B2 is the
      suite number."&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;\f&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches a form-feed.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;\n&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches a linefeed.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;\r&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches a carriage return.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;\s&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches a single white space character,
      including space, tab, form feed, line feed.
      Equivalent to &lt;code&gt;[
      \f\n\r\t\u00A0\u2028\u2029]&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;/\s\w*/&lt;/code&gt; matches ' bar'
      in "foo bar."&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;\S&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches a single character other than white
      space. Equivalent to &lt;code&gt;[^
      \f\n\r\t\u00A0\u2028\u2029]&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;/\S/\w*&lt;/code&gt; matches 'foo'
      in "foo bar."&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;\t&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches a tab.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;\v&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches a vertical tab.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;\w&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches any alphanumeric character including the
      underscore. Equivalent to
      &lt;code&gt;[A-Za-z0-9_]&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;/\w/&lt;/code&gt; matches 'a' in
      "apple," '5' in "$5.28," and '3' in "3D."&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;\W&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches any non-word character. Equivalent to
      &lt;code&gt;[^A-Za-z0-9_]&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;/\W/&lt;/code&gt; or
      &lt;code&gt;/[^$A-Za-z0-9_]/&lt;/code&gt; matches '%' in
      "50%."&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;\n&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Where &lt;code&gt;n&lt;/code&gt; is a positive integer. A
      back reference to the last substring matching the n
      parenthetical in the regular expression (counting
      left parentheses).&lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;/apple(,)\sorange\1/&lt;/code&gt;
      matches 'apple, orange,' in "apple, orange, cherry,
      peach." A more complete example follows this
      table.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;\0&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches a NUL character. Do not follow this with
      another digit.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;\xhh&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches the character with the code hh (two
      hexadecimal digits)&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;\uhhhh&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Matches the character with code hhhh (four
      hexadecimal digits).&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The literal notation provides compilation of the
      regular expression when the expression is evaluated. Use
      literal notation when the regular expression will remain
      constant. For example, if you use literal notation to
      construct a regular expression used in a loop, the
      regular expression won't be recompiled on each
      iteration.&lt;/p&gt;&lt;p&gt;The constructor of the regular expression object, for
      example, &lt;code&gt;new RegExp("ab+c")&lt;/code&gt;, provides
      runtime compilation of the regular expression. Use the
      constructor function when you know the regular expression
      pattern will be changing, or you don't know the pattern
      and are getting it from another source, such as user
      input.&lt;/p&gt;&lt;p&gt;A separate predefined &lt;code&gt;RegExp&lt;/code&gt; object is
      available in each window; that is, each separate thread
      of JavaScript execution gets its own &lt;code&gt;RegExp&lt;/code&gt;
      object. Because each script runs to completion without
      interruption in a thread, this assures that different
      scripts do not overwrite values of the
      &lt;code&gt;RegExp&lt;/code&gt; object.&lt;/p&gt;
    </remarks>
  </class>
  
  <class type="String" superclass="Object">
    <description>Represents the characters of a string.</description>
	<browsers>
		<browser platform="IE" version="3.0+"/>
		<browser platform="Mozilla" version="1.0+"/>
		<browser platform="Netscape" version="2.0+"/>
		<browser platform="Opera" version="7.0+" />
		<browser platform="Chrome" version="5.0+" />
		<browser platform="Safari" version="1.0+" />
	</browsers>
    <constructors>
      <constructor>
        <description>Constructs an instance of a String.</description>
        <parameters>
          <parameter name="string" type="String" usage="required">
            <description>Any string.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
      </constructor>
    </constructors>
    <properties>
      
	<property name="constructor" type="Object">
		<availability>
			<specification name="JavaScript 1.1"/>
			<specification name="JScript 2.0"/>
			<specification name="ECMAScript v1"/>
		</availability>
		<references>
			<reference name="constructor"/>
		</references>
		<description>Specifies the function that creates the String prototype.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
	</property>
	
	<property name="length" type="Number" access="read-write">
        <description>Number of characters in the string.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0"/>
		  <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;p&gt;The following example displays 8 in an Alert dialog
          box:&lt;/p&gt;&lt;pre&gt;var x = "Netscape";
alert("The string length is " + x.length);&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;This property returns the number of characters in the
          string. For an empty string, &lt;code&gt;length&lt;/code&gt; is
          0.&lt;/p&gt;
        </remarks>
      	</property>
    	
		<property name="prototype" type="String">
			<availability>
				<specification name="JavaScript 1.1"/>
				<specification name="JScript 2.0"/>
				<specification name="ECMAScript v1"/>
			</availability>
			<description>Reference to the String prototype object.</description>
			<browsers>
				<browser platform="IE" version="4.0+"/>
				<browser platform="Mozilla" version="1.0+"/>
				<browser platform="Netscape" version="3.0+"/>
				<browser platform="Opera" version="7.0+" />
				<browser platform="Chrome" version="5.0+" />
				<browser platform="Safari" version="1.0+" />
			</browsers>
		</property>
		
	</properties>
    
	<methods>
      
	  <method name="anchor">
		<parameters>
			<parameter name="name" type="String" usage="required">
				<description>String to be copied into an HTML anchor.</description>
			</parameter>
		</parameters>
		<references>
			<reference name="link"/>
		</references>
		<return-types>
			<return-type type="String"/>
		</return-types>
		<availability>
			<specification name="JavaScript 1.0"/>
			<specification name="JScript 1.0"/>
			<specification name="ECMAScript v1"/>
		</availability>
		<example>&lt;h3&gt;Example: Using &lt;code&gt;anchor&lt;/code&gt; &lt;/h3&gt;
&lt;p&gt;The following example code within an HTML &lt;code&gt;script&lt;/code&gt; element:&lt;/p&gt;
&lt;pre&gt;var myString = "Table of Contents";
document.writeln(myString.anchor("contents_anchor"));
&lt;/pre&gt;
&lt;p&gt;will output the following HTML:&lt;/p&gt;
&lt;pre&gt;&amp;lt;A NAME="contents_anchor"&amp;gt;Table of Contents&amp;lt;/A&amp;gt;&lt;/pre&gt;
</example>
		<remarks>&lt;p&gt;Use the &lt;code&gt;anchor&lt;/code&gt; method with the &lt;code&gt;document.write&lt;/code&gt; or &lt;code&gt;document.writeln&lt;/code&gt; methods to programmatically create and display an anchor in a document. Create the anchor with the &lt;code&gt;anchor&lt;/code&gt; method, and then call &lt;code&gt;write&lt;/code&gt; or &lt;code&gt;writeln&lt;/code&gt; to display the anchor in a document. In server-side JavaScript, use the &lt;code&gt;write&lt;/code&gt; function to display the anchor.&lt;/p&gt;

&lt;p&gt;In the syntax, the text string represents the literal text that you want the user to see. The &lt;code&gt;nameAttribute&lt;/code&gt; string represents the &lt;code&gt;NAME&lt;/code&gt; attribute of the A tag.&lt;/p&gt;

&lt;p&gt;Anchors created with the &lt;code&gt;anchor&lt;/code&gt; method become elements in the &lt;code&gt;document.anchors&lt;/code&gt; array.&lt;/p&gt;
</remarks>
		<description>Returns a copy of a string as an HTML anchor. (e.g &amp;lt;a name="name"&amp;gt;</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
		<return-description>Returns a copy of a string as an HTML anchor. (e.g &amp;lt;a name="name"&amp;gt;</return-description>
	</method>
	
	<method name="big">
		<references>
			<reference name="fontsize"/>
			<reference name="small"/>
		</references>
		<return-types>
			<return-type type="String"/>
		</return-types>
		<availability>
			<specification name="JavaScript 1.0"/>
			<specification name="JScript 1.0"/>
		</availability>
		<example>
		&lt;h3&gt;Example: Using &lt;code&gt;big&lt;/code&gt; &lt;/h3&gt;
&lt;p&gt;The following example uses &lt;code&gt;string&lt;/code&gt; methods to change the size of a string:&lt;/p&gt;
&lt;pre&gt;var worldString="Hello, world"

document.write(worldString.small())
document.write("&amp;lt;P&amp;gt;" + worldString.big())
document.write("&amp;lt;P&amp;gt;" + worldString.fontsize(7))

&lt;/pre&gt;
&lt;p&gt;This example produces the same output as the following HTML:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;P&amp;gt;&amp;lt;SMALL&amp;gt;Hello, world&amp;lt;/SMALL&amp;gt;
&amp;lt;P&amp;gt;&amp;lt;BIG&amp;gt;Hello, world&amp;lt;/BIG&amp;gt;
&amp;lt;P&amp;gt;&amp;lt;FONTSIZE=7&amp;gt;Hello, world&amp;lt;/FONTSIZE&amp;gt;&lt;/pre&gt;
		</example>
		<remarks>
		&lt;p&gt;Use the &lt;code&gt;big&lt;/code&gt; method with the &lt;code&gt;write&lt;/code&gt; or &lt;code&gt;writeln&lt;/code&gt; methods to format and display a string in a document. In server-side JavaScript, use the &lt;code&gt;write&lt;/code&gt; function to display the string.
&lt;/p&gt;
		</remarks>
		<description>Returns a copy of a string surrounded by &amp;lt;big&amp;gt;&amp;lt;/big&amp;gt; HTML tags.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
		</browsers>
		<return-description>Returns a copy of a string surrounded by &amp;lt;big&amp;gt;&amp;lt;/big&amp;gt; HTML tags.</return-description>
	</method>
	
	<method name="blink">
		<references>
			<reference name="bold"/>
			<reference name="italics"/>
			<reference name="strike"/>
		</references>
		<return-types>
			<return-type type="String"/>
		</return-types>
		<availability>
			<specification name="JavaScript 1.0"/>
			<specification name="JScript 1.0"/>
		</availability>
		<example>&lt;h3&gt;Example: Using &lt;code&gt;string&lt;/code&gt; methods to change the formatting of a string &lt;/h3&gt;
&lt;p&gt;The following example uses &lt;code&gt;string&lt;/code&gt; methods to change the formatting of a string:&lt;/p&gt;
&lt;pre&gt;var worldString="Hello, world"

document.write(worldString.blink())
document.write("&amp;lt;P&amp;gt;" + worldString.bold())
document.write("&amp;lt;P&amp;gt;" + worldString.italics())
document.write("&amp;lt;P&amp;gt;" + worldString.strike())

&lt;/pre&gt;
&lt;p&gt;This example produces the same output as the following HTML:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;P&amp;gt;&amp;lt;BLINK&amp;gt;Hello, world&amp;lt;/BLINK&amp;gt;
&amp;lt;P&amp;gt;&amp;lt;B&amp;gt;Hello, world&amp;lt;/B&amp;gt;
&amp;lt;P&amp;gt;&amp;lt;I&amp;gt;Hello, world&amp;lt;/I&amp;gt;
&amp;lt;P&amp;gt;&amp;lt;STRIKE&amp;gt;Hello, world&amp;lt;/STRIKE&amp;gt;&lt;/pre&gt;
</example>
		<remarks>&lt;p&gt;Use the &lt;code&gt;blink&lt;/code&gt; method with the &lt;code&gt;write&lt;/code&gt; or &lt;code&gt;writeln&lt;/code&gt; methods to format and display a string in a document. In server-side JavaScript, use the &lt;code&gt;write&lt;/code&gt; function to display the string.&lt;/p&gt;</remarks>
		<description>Returns a copy of a string surrounded by &amp;lt;blink&gt;&amp;lt;/blink&gt; HTML tags.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
		<return-description>Returns a copy of a string surrounded by &amp;lt;blink&gt;&amp;lt;/blink&gt; HTML tags.</return-description>
	</method>
	
	<method name="bold">
		<references>
			<reference name="blink"/>
			<reference name="italics"/>
			<reference name="strike"/>
		</references>
		<return-types>
			<return-type type="String"/>
		</return-types>
		<availability>
			<specification name="JavaScript 1.0"/>
			<specification name="JScript 1.0"/>
		</availability>
		<example>
		&lt;h3&gt;Example: Using &lt;code&gt;string&lt;/code&gt; methods to change the formatting of a string &lt;/h3&gt;
&lt;p&gt;The following example uses &lt;code&gt;string&lt;/code&gt; methods to change the formatting of a string:&lt;/p&gt;
&lt;pre&gt;var worldString="Hello, world"

document.write(worldString.blink())
document.write("&amp;lt;P&amp;gt;" + worldString.bold())
document.write("&amp;lt;P&amp;gt;" + worldString.italics())
document.write("&amp;lt;P&amp;gt;" + worldString.strike())

&lt;/pre&gt;
&lt;p&gt;This example produces the same output as the following HTML:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;P&amp;gt;&amp;lt;BLINK&amp;gt;Hello, world&amp;lt;/BLINK&amp;gt;
&amp;lt;P&amp;gt;&amp;lt;B&gt;Hello, world&amp;lt;/B&amp;gt;
&amp;lt;P&amp;gt;&amp;lt;I&gt;Hello, world&amp;lt;/I&amp;gt;
&amp;lt;P&amp;gt;&amp;lt;STRIKE&amp;gt;Hello, world&amp;lt;/STRIKE&amp;gt;&lt;/pre&gt;
		</example>
		<remarks>
		&lt;p&gt;Use the &lt;code&gt;bold&lt;/code&gt; method with the &lt;code&gt;write&lt;/code&gt; or &lt;code&gt;writeln&lt;/code&gt; methods to format and display a string in a document. In server-side JavaScript, use the &lt;code&gt;write&lt;/code&gt; function to display the string.
&lt;/p&gt;
		</remarks>
		<description>Returns a copy of a string surrounded by &amp;lt;bold&amp;gt;&amp;lt;/bold&amp;gt; HTML tags.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
		<return-description>Returns a copy of a string surrounded by &amp;lt;bold&amp;gt;&amp;lt;/bold&amp;gt; HTML tags.</return-description>
	</method>
	
	<method name="charAt">
        <description>Returns the specified character from a string.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the specified character from a string.</return-description>
        <parameters>
          <parameter name="index" type="String" usage="required">
            <description>An integer between 0 and 1 less than the length of the string.</description>
          </parameter>
        </parameters>
        <references>
          <reference name="String.charCodeAt"/>
          <reference name="String.indexOf"/>
          <reference name="String.lastIndexOf"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0, ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Displaying characters at different locations
          in a string&lt;/h3&gt;&lt;p&gt;The following example displays characters at different
          locations in the string "&lt;code&gt;Brave new
          world&lt;/code&gt;":&lt;/p&gt;&lt;pre&gt;var anyString="Brave new world"

document.writeln("The character at index 0 is " + anyString.charAt(0))
document.writeln("The character at index 1 is " + anyString.charAt(1))
document.writeln("The character at index 2 is " + anyString.charAt(2))
document.writeln("The character at index 3 is " + anyString.charAt(3))
document.writeln("The character at index 4 is " + anyString.charAt(4))&lt;/pre&gt;&lt;p&gt;These lines display the following:&lt;/p&gt;&lt;pre&gt;The character at index 0 is B
The character at index 1 is r
The character at index 2 is a
The character at index 3 is v
The character at index 4 is e &lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;Characters in a string are indexed from left to right.
          The index of the first character is 0, and the index of
          the last character in a string called
          &lt;code&gt;stringName&lt;/code&gt; is &lt;code&gt;stringName.length -
          1&lt;/code&gt;. If the &lt;code&gt;index&lt;/code&gt; you supply is out of
          range, JavaScript returns an empty string.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="charCodeAt" scope="static">
        <description>Returns the the Unicode value of the character at the specified index.</description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the the Unicode value of the character at the specified index.</return-description>
        <parameters>
          <parameter name="index" type="Object" usage="required">
            <description>An integer between 0 and 1 less than the length of the string. The default value is 0.</description>
          </parameter>
        </parameters>
        <references>
          <reference name="String.charAt"/>
          <reference name="String.fromCharCode"/>
        </references>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 5.5"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;charCodeAt&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following example returns 65, the Unicode value
          for A.&lt;/p&gt;&lt;pre&gt;"ABC".charCodeAt(0) // returns 65&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;Unicode values range from 0 to 65,535. The first 128
          Unicode values are a direct match of the ASCII character
          set.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="concat">
        <description> Combines the text of two or more strings and returns a new string.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a new string.</return-description>
        <parameters>
          <parameter name="string2...stringN" type="String" usage="one-or-more">
            <description>Strings to concatenate to this string.</description>
          </parameter>
        </parameters>
        <references>
          <reference name="Array.concat"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v3"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;concat&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following example combines strings into a new
          string.&lt;/p&gt;&lt;pre&gt;s1="Oh "
s2="what a beautiful "
s3="mornin'."
s4=s1.concat(s2,s3) // returns "Oh what a beautiful mornin'."&lt;/pre&gt;
        </example>
        <remarks>&lt;code&gt;concat&lt;/code&gt; combines the text from one or more
          strings and returns a new string. Changes to the text in
          one string do not affect the other string.</remarks>
      </method>
      
      <method name="contains">
		<references>
			<reference name="indexOf"/>
		</references>
		<parameters>
			<parameter name="searchString" type="String" usage="required">
            	<description>A string to be searched for within this string.</description>
          	</parameter>
          	<parameter name="position" type="Number" usage="optional">
            	<description>The position in this string at which to begin searching for searchString; defaults to 0.</description>
          	</parameter>
		</parameters>
		<return-types>
			<return-type type="Boolean"/>
		</return-types>
		<availability>
			<specification name="ECMAScript v6"/>
		</availability>
		<example>var str = "To be, or not to be, that is the question.";
 
print(str.contains("To be"));    // true
print(str.contains("question")); // true
print(str.contains("To be", 1)); // false</example>
		<description>This method lets you determine whether or not a string contains another string.</description>
		<browsers>
			<browser platform="Mozilla" version="17.0+"/>
		</browsers>
	</method>
      
      <method name="endsWith">
		<references>
			<reference name="startsWith"/>
		</references>
		<parameters>
			<parameter name="searchString" type="String" usage="required">
            	<description>The characters to be searched for at the end of this string.</description>
          	</parameter>
          	<parameter name="position" type="Number" usage="optional">
            	<description>Search within this string as if this string were only this long; defaults to this string's actual length, clamped within the range established by this string's length.</description>
          	</parameter>
		</parameters>
		<return-types>
			<return-type type="Boolean"/>
		</return-types>
		<availability>
			<specification name="ECMAScript v6"/>
		</availability>
		<example>var str = "To be, or not to be, that is the question.";
 
print( str.endsWith("question") );  // true
print( str.endsWith("to be") );     // false
print( str.endsWith("to be", 19) ); // true</example>
		<description>Determines whether a string ends with the characters of another string, returning true or false as appropriate.</description>
		<browsers>
			<browser platform="Mozilla" version="17.0+"/>
		</browsers>
	</method>
      
	  <method name="fixed">
		<availability>
			<specification name="JavaScript 1.0"/>
			<specification name="JScript 1.0"/>
		</availability>
		<example>&lt;h3&gt;Example: Using &lt;code&gt;fixed&lt;/code&gt; to change the formatting of a string &lt;/h3&gt;
&lt;p&gt;The following example uses the &lt;code&gt;fixed&lt;/code&gt; method to change the formatting of a string:&lt;/p&gt;
&lt;pre&gt;var worldString="Hello, world"
document.write(worldString.fixed())
&lt;/pre&gt;
&lt;p&gt;This example produces the same output as the following HTML:&lt;/p&gt;

&lt;pre&gt;&amp;lt;TT&amp;gt;Hello, world&amp;lt;/TT&amp;gt;&lt;/pre&gt;</example>
		<remarks>Use the &lt;code&gt;fixed&lt;/code&gt; method with the &lt;code&gt;write&lt;/code&gt; or &lt;code&gt;writeln&lt;/code&gt; methods to format and display a string in a document. In server-side JavaScript, use the &lt;code&gt;write&lt;/code&gt; function to display the string.</remarks>
		<description>Returns a copy of a string surrounded by &amp;lt;tt&amp;gt;&amp;lt;/tt&amp;gt; tags.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
		<return-description>Returns a copy of a string surrounded by &amp;lt;tt&amp;gt;&amp;lt;/tt&amp;gt; tags.</return-description>
	</method>
	
	<method name="fontcolor">
		<parameters>
			<parameter name="color" type="String" usage="required">
				<description>A string expressing the color as either a hexadecimal RGB triplet or as a string literal.</description>
			</parameter>
		</parameters>
		<return-types>
			<return-type type="String"/>
		</return-types>
		<availability>
			<specification name="JavaScript 1.0"/>
			<specification name="JScript 1.0"/>
		</availability>
		<example>
		&lt;h3&gt;Example: Using &lt;code&gt;fontcolor&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The following example uses the &lt;code&gt;fontcolor&lt;/code&gt; method to change the color of a string:&lt;/p&gt;
&lt;pre&gt;var worldString="Hello, world"

document.write(worldString.fontcolor("maroon") +  " is maroon in this line")
document.write("&amp;lt;P&amp;gt;" + worldString.fontcolor("salmon") + " is salmon in this line")
document.write("&amp;lt;P&amp;gt;" + worldString.fontcolor("red") + " is red in this line")
document.write("&amp;lt;P&amp;gt;" + worldString.fontcolor("8000") + " is maroon in hexadecimal in this line")
document.write("&amp;lt;P&amp;gt;" + worldString.fontcolor("FA8072") + " is salmon in hexadecimal in this line")
document.write("&amp;lt;P&amp;gt;" + worldString.fontcolor("FF00") + " is red in hexadecimal in this line")
&lt;/pre&gt;
&lt;p&gt;The previous example produces the same output as the following HTML:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;P&amp;gt;&amp;lt;FONT COLOR="maroon"&amp;gt;Hello, world&amp;lt;/FONT&amp;gt; is maroon in this line
&amp;lt;P&amp;gt;&amp;lt;FONT COLOR="salmon"&amp;gt;Hello, world&amp;lt;/FONT&amp;gt; is salmon in this line
&amp;lt;P&amp;gt;&amp;lt;FONT COLOR="red"&amp;gt;Hello, world&amp;lt;/FONT&amp;gt; is red in this line
&amp;lt;P&amp;gt;&amp;lt;FONT COLOR="8000"&amp;gt;Hello, world&amp;lt;/FONT&amp;gt; is maroon in hexadecimal in this line
&amp;lt;P&amp;gt;&amp;lt;FONT COLOR="FA8072"&amp;gt;Hello, world&amp;lt;/FONT&amp;gt; is salmon in hexadecimal in this line
&amp;lt;P&amp;gt;&amp;lt;FONT COLOR="FF00"&amp;gt;Hello, world&amp;lt;/FONT&amp;gt; is red in hexadecimal in this line
&lt;/pre&gt;

		</example>
		<remarks>
		&lt;p&gt;Use the &lt;code&gt;fontcolor&lt;/code&gt; method with the &lt;code&gt;write&lt;/code&gt; or &lt;code&gt;writeln&lt;/code&gt; methods to format and display a string in a document. In server-side JavaScript, use the &lt;code&gt;write&lt;/code&gt; function to display the string.&lt;/p&gt;

&lt;p&gt;If you express color as a hexadecimal RGB triplet, you must use the format &lt;code&gt;rrggbb&lt;/code&gt;. For example, the hexadecimal RGB values for salmon are red=FA, green=80, and blue=72, so the RGB triplet for salmon is "&lt;code&gt;FA8072&lt;/code&gt;".&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;fontcolor&lt;/code&gt; method overrides a value set in the &lt;code&gt;fgColor&lt;/code&gt; property.&lt;/p&gt;
		</remarks>
		<description>Returns a copy of a string surrounded by &amp;lt;font color = "color"&amp;gt;&amp;lt;/font&amp;gt; tags.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
		<return-description>Returns a copy of a string surrounded by &amp;lt;font color = "color"&amp;gt;&amp;lt;/font&amp;gt; tags.</return-description>
	</method>
	
	<method name="fontsize">
		<parameters>
			<parameter name="size" type="Number" usage="required">
				<description>An integer between 1 and 7, or a string representing a signed integer between 1 and 7, specifiying what the font size should be set to.</description>
			</parameter>
		</parameters>
		<references>
			<reference name="big"/>
			<reference name="small"/>
		</references>
		<return-types>
			<return-type type="String"/>
		</return-types>
		<availability>
			<specification name="JavaScript 1.0"/>
			<specification name="JScript 1.0"/>
		</availability>
		<example>
		&lt;h3&gt;Example: Using &lt;code&gt;string&lt;/code&gt; methods to change the size of a string &lt;/h3&gt;
&lt;p&gt;The following example uses &lt;code&gt;string&lt;/code&gt; methods to change the size of a string:&lt;/p&gt;
&lt;pre&gt;var worldString="Hello, world"

document.write(worldString.small())
document.write("&amp;lt;P&amp;gt;" + worldString.big())
document.write("&amp;lt;P&amp;gt;" + worldString.fontsize(7))

&lt;/pre&gt;
&lt;p&gt;This example produces the same output as the following HTML:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;P&amp;gt;&amp;lt;SMALL&amp;gt;Hello, world&amp;lt;/SMALL&amp;gt;
&amp;lt;P&amp;gt;&amp;lt;BIG&amp;gt;Hello, world&amp;lt;/BIG&amp;gt;
&amp;lt;P&amp;gt;&amp;lt;FONT SIZE="7"&amp;gt;Hello, world&amp;lt;/FONT&amp;gt;
&lt;/pre&gt;

		</example>
		<remarks>
		&lt;p&gt;Use the &lt;code&gt;fontsize&lt;/code&gt; method with the &lt;code&gt;write&lt;/code&gt; or &lt;code&gt;writeln&lt;/code&gt; methods to format and display a string in a document. In server-side JavaScript, use the &lt;code&gt;write&lt;/code&gt; function to display the string.&lt;/p&gt;

&lt;p&gt;When you specify size as an integer, you set the size of &lt;code&gt;stringName&lt;/code&gt; to one of the 7 defined sizes. When you specify &lt;code&gt;size&lt;/code&gt; as a string such as "-2", you adjust the font size of &lt;code&gt;stringName&lt;/code&gt; relative to the size set in the &lt;code&gt;BASEFONT&lt;/code&gt; tag.&lt;/p&gt;
		</remarks>
		<description>Returns a copy of a string surrounded by &amp;lt;font size="size"&amp;gt;&amp;lt;/font&amp;gt; tags.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
		<return-description>Returns a copy of a string surrounded by &amp;lt;font size="size"&amp;gt;&amp;lt;/font&amp;gt; tags.</return-description>
	</method>
	
	<method name="fromCharCode">
        <description> Returns a string created by using the specified sequence of Unicode values.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description> Returns a string created by using the specified sequence of Unicode values.</return-description>
        <parameters>
          <parameter name="num1, ..., numN" type="String" usage="one-or-more">
            <description>A sequence of numbers that are Unicode values.</description>
          </parameter>
        </parameters>
        <references>
          <reference name="String.charCodeAt"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;fromCharCode&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following example returns the string "ABC".&lt;/p&gt;&lt;pre&gt;String.fromCharCode(65,66,67)&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;This method returns a string and not a
          &lt;code&gt;String&lt;/code&gt; object.&lt;/p&gt;&lt;p&gt;Because &lt;code&gt;fromCharCode&lt;/code&gt; is a static method
          of &lt;code&gt;String&lt;/code&gt;, you always use it as
          &lt;code&gt;String.fromCharCode()&lt;/code&gt;, rather than as a
          method of a &lt;code&gt;String&lt;/code&gt; object you created.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="indexOf">
        <description>Returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex, or -1 if the value is not found.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>
          Returns the index within the calling
          String object of the first occurrence of the
          specified value, starting the search at
          fromIndex, or -1 if the value is not
          found.
        </return-description>
        <parameters>
          <parameter name="searchValue" type="String" usage="required">
            <description>A string representing the value to search for.</description>
          </parameter>
          <parameter name="fromIndex" type="String" usage="optional">
            <description>The location within the calling string to start the search from. It can be any integer between 0 and the length of the string. The default value is 0.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0, ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;indexOf&lt;/code&gt; and
          &lt;code&gt;lastIndexOf&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following example uses &lt;code&gt;indexOf&lt;/code&gt; and
          &lt;code&gt;lastIndexOf&lt;/code&gt; to locate values in the string
          "&lt;code&gt;Brave new world&lt;/code&gt;".&lt;/p&gt;&lt;pre&gt;var anyString="Brave new world"

// Displays 8
document.write("&amp;lt;P&amp;gt;The index of the first w from the beginning is " +
   anyString.indexOf("w"))

// Displays 10
document.write("&amp;lt;P&amp;gt;The index of the first w from the end is " +
   anyString.lastIndexOf("w"))

// Displays 6
document.write("&amp;lt;P&amp;gt;The index of 'new' from the beginning is " +
   anyString.indexOf("new"))

// Displays 6
document.write("&amp;lt;P&amp;gt;The index of 'new' from the end is " +
   anyString.lastIndexOf("new"))&lt;/pre&gt;&lt;h3&gt;&lt;code&gt;indexOf&lt;/code&gt; and
          case-sensitivity&lt;/h3&gt;&lt;p&gt;The following example defines two string variables.
          The variables contain the same string except that the
          second string contains uppercase letters. The first
          &lt;code&gt;writeln&lt;/code&gt; method displays 19. But because the
          &lt;code&gt;indexOf&lt;/code&gt; method is case sensitive, the string
          "&lt;code&gt;cheddar&lt;/code&gt;" is not found in
          &lt;code&gt;myCapString&lt;/code&gt;, so the second
          &lt;code&gt;writeln&lt;/code&gt; method displays -1.&lt;/p&gt;&lt;pre&gt;myString="brie, pepper jack, cheddar"
myCapString="Brie, Pepper Jack, Cheddar"

document.writeln('myString.indexOf("cheddar") is ' +
   myString.indexOf("cheddar"))

document.writeln('&amp;lt;P&amp;gt;myCapString.indexOf("cheddar") is ' +
   myCapString.indexOf("cheddar"));&lt;/pre&gt;&lt;h3&gt;Using &lt;code&gt;indexOf&lt;/code&gt; to count
          occurrences of a letter in a string&lt;/h3&gt;&lt;p&gt;The following example sets &lt;code&gt;count&lt;/code&gt; to the
          number of occurrences of the letter &lt;code&gt;x&lt;/code&gt; in the
          string &lt;code&gt;str&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;count = 0;
pos = str.indexOf("x");
while ( pos != -1 ) {
   count++;
   pos = str.indexOf("x", pos+1);
}&lt;/pre&gt;
        </example>
        <references>
          <reference name="charAt"/>
          <reference name="lastIndexOf"/>
          <reference name="split"/>
        </references>
        <remarks>
          &lt;p&gt;Characters in a string are indexed from left to right.
          The index of the first character is 0, and the index of
          the last character of a string called
          &lt;code&gt;stringName&lt;/code&gt; is &lt;code&gt;stringName.length -
          1&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;"Blue Whale".indexOf("Blue")    // returns 0
"Blue Whale".indexOf("Blute")   // returns -1
"Blue Whale".indexOf("Whale",0) // returns 5
"Blue Whale".indexOf("Whale",5) // returns 5
"Blue Whale".indexOf("",9)      // returns 9
"Blue Whale".indexOf("",10)     // returns 10
"Blue Whale".indexOf("",11)     // returns 10&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;indexOf&lt;/code&gt; method is case sensitive. For
          example, the following expression returns -1:&lt;/p&gt;&lt;pre&gt;"Blue Whale".indexOf("blue")&lt;/pre&gt;
        </remarks>
    </method>
	  
    <method name="italics">
		<references>
			<reference name="bold"/>
			<reference name="italics"/>
			<reference name="strike"/>
		</references>
		<return-types>
			<return-type type="String"/>
		</return-types>
		<availability>
			<specification name="JavaScript 1.0"/>
			<specification name="JScript 1.0"/>
		</availability>
		<example>
		&lt;h3&gt;Example: Using &lt;code&gt;string&lt;/code&gt; methods to change the formatting of a string &lt;/h3&gt;
&lt;p&gt;The following example uses &lt;code&gt;string&lt;/code&gt; methods to change the formatting of a string:&lt;/p&gt;
&lt;pre&gt;var worldString="Hello, world"

document.write(worldString.blink())
document.write("&amp;lt;P&amp;gt;" + worldString.bold())
document.write("&amp;lt;P&amp;gt;" + worldString.italics())
document.write("&amp;lt;P&amp;gt;" + worldString.strike())

&lt;/pre&gt;
&lt;p&gt;This example produces the same output as the following HTML:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;P&amp;gt;&amp;lt;BLINK&amp;gt;Hello, world&amp;lt;/BLINK&amp;gt;
&amp;lt;P&amp;gt;&amp;lt;B&gt;Hello, world&amp;lt;/B&amp;gt;
&amp;lt;P&amp;gt;&amp;lt;I&gt;Hello, world&amp;lt;/I&amp;gt;
&amp;lt;P&amp;gt;&amp;lt;STRIKE&amp;gt;Hello, world&amp;lt;/STRIKE&amp;gt;&lt;/pre&gt;
		</example>
		<remarks>
		&lt;p&gt;Use the &lt;code&gt;italics&lt;/code&gt; method with the &lt;code&gt;write&lt;/code&gt; or &lt;code&gt;writeln&lt;/code&gt; methods to format and display a string in a document. In server-side JavaScript, use the &lt;code&gt;write&lt;/code&gt; function to display the string.&lt;/p&gt;
		</remarks>
		<description>Returns a copy of a string surrounded by &amp;lt;i&amp;gt;&amp;lt;/i&amp;gt; tags.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
		<return-description>Returns a copy of a string surrounded by &amp;lt;i&amp;gt;&amp;lt;/i&amp;gt; tags.</return-description>
	</method>
	
	<method name="lastIndexOf">
        <description>
          Returns the index within the calling
          String object of the last occurrence of the
          specified value, or -1 if not found. The calling string
          is searched backward, starting at
          fromIndex.
        </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>
          Returns the index within the calling
          String object of the last occurrence of the
          specified value, or -1 if not found. The calling string
          is searched backward, starting at
          fromIndex.
        </return-description>
        <parameters>
          <parameter name="searchValue" type="String" usage="required">
            <description>A string representing the value to search for.</description>
          </parameter>
          <parameter name="fromIndex" type="String" usage="optional">
            <description>The location within the calling string to start the search from. It can be any integer between 0 and the length of the string. The default value is the length of the string.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0, ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;indexOf&lt;/code&gt; and
          &lt;code&gt;lastIndexOf&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following example uses &lt;code&gt;indexOf&lt;/code&gt; and
          &lt;code&gt;lastIndexOf&lt;/code&gt; to locate values in the string
          "&lt;code&gt;Brave new world&lt;/code&gt;".&lt;/p&gt;&lt;pre&gt;var anyString="Brave new world"

// Displays 8
document.write("&amp;lt;P&amp;gt;The index of the first w from the beginning is " +
   anyString.indexOf("w"))
// Displays 10
document.write("&amp;lt;P&amp;gt;The index of the first w from the end is " +
   anyString.lastIndexOf("w"))
// Displays 6
document.write("&amp;lt;P&amp;gt;The index of 'new' from the beginning is " +
   anyString.indexOf("new"))
// Displays 6
document.write("&amp;lt;P&amp;gt;The index of 'new' from the end is " +
   anyString.lastIndexOf("new"))&lt;/pre&gt;
        </example>
        <references>
          <reference name="charAt"/>
          <reference name="indexOf"/>
          <reference name="split"/>
        </references>
        <remarks>
          &lt;p&gt;Characters in a string are indexed from left to right.
          The index of the first character is 0, and the index of
          the last character is &lt;code&gt;stringName.length -
          1&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;"canal".lastIndexOf("a")   // returns 3
"canal".lastIndexOf("a",2) // returns 1
"canal".lastIndexOf("a",0) // returns -1
"canal".lastIndexOf("x")   // returns -1&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;lastIndexOf&lt;/code&gt; method is case sensitive.
          For example, the following expression returns -1:&lt;/p&gt;&lt;pre&gt;"Blue Whale, Killer Whale".lastIndexOf("blue") &lt;/pre&gt;
        </remarks>
     </method>
     
	 <method name="link">
		<parameters>
			<parameter name="href" type="String" usage="required">
				<description>String specifying the URL for the link.</description>
			</parameter>
		</parameters>
		<return-types>
			<return-type type="String"/>
		</return-types>
		<availability>
			<specification name="JavaScript 1.0"/>
			<specification name="JScript 1.0"/>
		</availability>
		<example>&lt;h3&gt;Example: Using &lt;code&gt;link&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The following example displays the word "Netscape" as a hypertext link that returns the user to the Netscape home page:&lt;/p&gt;

&lt;pre&gt;var hotText="Netscape"
var URL="http://home.netscape.com"

document.write("Click to return to " + hotText.link(URL))
&lt;/pre&gt;
&lt;p&gt;This example produces the same output as the following HTML:
&lt;/p&gt;
&lt;pre&gt;Click to return to &amp;lt;A HREF="http://home.netscape.com"&amp;gt;Netscape&amp;lt;/A&amp;gt;&lt;/pre&gt;
		</example>
		<remarks>
		&lt;p&gt;Use the &lt;code&gt;link&lt;/code&gt; method to programmatically create a hypertext link, and then call &lt;code&gt;write&lt;/code&gt; or &lt;code&gt;writeln&lt;/code&gt; to display the link in a document. In server-side JavaScript, use the &lt;code&gt;write&lt;/code&gt; function to display the link.&lt;/p&gt;

&lt;p&gt;Links created with the &lt;code&gt;link&lt;/code&gt; method become elements in the &lt;code&gt;links&lt;/code&gt; array of the &lt;code&gt;document&lt;/code&gt; object. See &lt;code&gt;document.links&lt;/code&gt;.&lt;/p&gt;
		</remarks>
		<description>Returns a copy of a string surrounded by &amp;lt;a href="href"&amp;gt;&amp;lt;/a&amp;gt; tags.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
		<return-description>Returns a copy of a string surrounded by &amp;lt;a href="href"&amp;gt;&amp;lt;/a&amp;gt; tags.</return-description>
	</method>
		
	<method name="localeCompare">
        <description>Uses locale-specific ordering to compare two strings.</description>
		<browsers>
			<browser platform="IE" version="5.5+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a number less than zero if the string object is less than target. Returns a number greater than zero if the string object is greater than the target. Returns 0 if the string object is equal to the target.</return-description>
        <parameters>
          <parameter name="target" type="String" usage="required">
            <description>A string to be compared locale-wise to the string object.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.5"/>
          <specification name="JScript 5.5"/>
          <specification name="ECMAScript v3"/>
        </availability>
      </method>
      
	  <method name="match">
        <description>Used to match a regular expression against a string.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>If the regular expression does not include the g flag, returns the same result that RegExp.exec would return on the regular expression and string. If the regular expression includes the g flag, returns an array of all the matches of the regular expression in the string.</return-description>
        <parameters>
          <parameter name="regexp" type="Object" usage="required">
            <description>Name of the regular expression. It can be a variable name or a literal.</description>
          </parameter>
        </parameters>
        <references>
          <reference name="RegExp"/>
          <reference name="RegExp.exec"/>
          <reference name="RegExp.test"/>
          <reference name="String.replace"/>
          <reference name="String.search"/>
        </references>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v3"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;match&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;In the following example, &lt;code&gt;match&lt;/code&gt; is used
          to find "&lt;code&gt;Chapter&lt;/code&gt;" followed by 1 or more
          numeric characters followed by a decimal point and
          numeric character 0 or more times. The regular expression
          includes the &lt;code&gt;i&lt;/code&gt; flag so that case will be
          ignored.&lt;/p&gt;&lt;pre&gt;
str = "For more information, see Chapter 3.4.5.1";
re = /(chapter \d+(\.\d)*)/i;
found = str.match(re);
document.write(found);
&lt;/pre&gt;&lt;p&gt;This returns the array containing Chapter
          3.4.5.1,Chapter 3.4.5.1,.1&lt;/p&gt;&lt;p&gt;"&lt;code&gt;Chapter 3.4.5.1&lt;/code&gt;" is the first match and
          the first value remembered from &lt;code&gt;(Chapter
          \d+(\.\d)*)&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;"&lt;code&gt;.1&lt;/code&gt;" is the second value remembered from
          &lt;code&gt;(\.\d)&lt;/code&gt;.&lt;/p&gt;&lt;h3&gt;Using global and ignore case flags with
          &lt;code&gt;match&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following example demonstrates the use of the
          global and ignore case flags with &lt;code&gt;match&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;
str = "abcDdcba";
newArray = str.match(/d/gi);
document.write(newArray);
&lt;/pre&gt;&lt;p&gt;The returned array contains D, d.&lt;/p&gt;
        </example>
        <remarks>
          &lt;p&gt;If the regular expression does not include the
          &lt;code&gt;g&lt;/code&gt; flag, returns the same result that
          &lt;code&gt;RegExp.exec&lt;/code&gt;
          would return on the regular expression and string. If the
          regular expression includes the &lt;code&gt;g&lt;/code&gt; flag,
          returns an array of all the matches of the regular
          expression in the string.&lt;/p&gt;&lt;h3&gt;Note&lt;/h3&gt;&lt;p&gt;If you execute a match simply to find true or false,
          use &lt;code&gt;String.search&lt;/code&gt;
          or the regular expression &lt;code&gt;test&lt;/code&gt;
          method.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="replace">
        <description>Finds a match between a regular expression and a string, and replaces the matched substring with a new substring.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a new string with the specified replacements.</return-description>
        <parameters>
          <parameter name="regexp" type="String" usage="required">
            <description>The name of the regular expression. It can be a variable name or a literal.</description>
          </parameter>
          <parameter name="newSubStr" type="String" usage="required">
            <description>The string to put in place of the string found with regexp.</description>
          </parameter>
          <parameter name="function" type="String" usage="required">
            <description>A function to be invoked after the match has been performed.</description>
          </parameter>
        </parameters>
        <references>
          <reference name="RegExp"/>
          <reference name="RegExp.exec"/>
          <reference name="RegExp.test"/>
          <reference name="String.match"/>
          <reference name="String.search"/>
        </references>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v3"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;global&lt;/code&gt; and
          &lt;code&gt;ignore&lt;/code&gt; with &lt;code&gt;replace&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;In the following example, the regular expression
          includes the global and ignore case flags which permits
          &lt;code&gt;replace&lt;/code&gt; to replace each occurrence of
          'apples' in the string with 'oranges'.&lt;/p&gt;&lt;pre&gt;
re = /apples/gi;
str = "Apples are round, and apples are juicy.";
newstr=str.replace(re, "oranges");
document.write(newstr)
&lt;/pre&gt;&lt;p&gt;This prints "oranges are round, and oranges are
          juicy."&lt;/p&gt;&lt;h3&gt;Defining the regular expression in
          &lt;code&gt;replace&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;In the following example, the regular expression is
          defined in &lt;code&gt;replace&lt;/code&gt; and includes the ignore
          case flag.&lt;/p&gt;&lt;pre&gt;
str = "Twas the night before Xmas...";
newstr=str.replace(/xmas/i, "Christmas");
document.write(newstr)
&lt;/pre&gt;&lt;p&gt;This prints "Twas the night before Christmas..."&lt;/p&gt;&lt;h3&gt;Switching words in a string&lt;/h3&gt;&lt;p&gt;The following script switches the words in the string.
          For the replacement text, the script uses the
          &lt;code&gt;$1&lt;/code&gt; and &lt;code&gt;$2&lt;/code&gt; replacement
          patterns.&lt;/p&gt;&lt;pre&gt;
re = /(\w+)\s(\w+)/;
str = "John Smith";
newstr = str.replace(re, "$2, $1");
document.write(newstr)
&lt;/pre&gt;&lt;p&gt;This prints "Smith, John".&lt;/p&gt;&lt;h3&gt;Replacing a Fahrenheit degree with its
          Celcius equivalent&lt;/h3&gt;&lt;p&gt;The following example replaces a Fahrenheit degree
          with its equivalent Celsius degree. The Fahrenheit degree
          should be a number ending with F. The function returns
          the Celsius number ending with C. For example, if the
          input number is 212F, the function returns 100C. If the
          number is 0F, the function returns
          -17.77777777777778C.&lt;/p&gt;&lt;p&gt;The regular expression &lt;code&gt;test&lt;/code&gt; checks for
          any number that ends with F. The number of Fahrenheit
          degree is accessible to your function through the
          parameter &lt;code&gt;$1&lt;/code&gt;. The function sets the Celsius
          number based on the Fahrenheit degree passed in a string
          to the &lt;code&gt;f2c&lt;/code&gt; function. &lt;code&gt;f2c&lt;/code&gt; then
          returns the Celsius number. This function approximates
          Perl's s///e flag.&lt;/p&gt;&lt;pre&gt;function f2c(x) {
   var s = String(x)
   var test = /(\d+(?:\.\d*)?)F\b/g
   return s.replace
      (test,
         function (str,p1,offset,s) {
            return ((p1-32) * 5/9) + "C";
         }
      )
}&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;This method does not change the &lt;code&gt;String&lt;/code&gt;
          object it is called on. It simply returns a new
          string.&lt;/p&gt;&lt;p&gt;If you want to execute a global search and replace,
          include the &lt;code&gt;g&lt;/code&gt; flag in the regular
          expression.&lt;/p&gt;&lt;h3&gt;Specifying a string as a parameter&lt;/h3&gt;&lt;p&gt;The replacement string can include the following
          special replacement patterns:&lt;/p&gt;&lt;table class="fullwidth-table"&gt;&lt;tr&gt;&lt;td class="header"&gt;Pattern&lt;/td&gt;&lt;td class="header"&gt;Inserts&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;$$&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Inserts a "$".&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;$&amp;amp;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Inserts the matched substring.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;$`&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Inserts the portion of the string that precedes
          the matched substring.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;$Â´&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Inserts the portion of the string that follows
          the matched substring.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;$&lt;i&gt;n&lt;/i&gt;&lt;/code&gt; or
          &lt;code&gt;$&lt;i&gt;nn&lt;/i&gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Where &lt;code&gt;&lt;i&gt;n&lt;/i&gt;&lt;/code&gt; or
          &lt;code&gt;&lt;i&gt;nn&lt;/i&gt;&lt;/code&gt; are decimal digits, inserts
          the &lt;i&gt;n&lt;/i&gt;th parenthesized submatch string.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;h3&gt;Specifying a function as a parameter&lt;/h3&gt;&lt;p&gt;When you specify a function as the second parameter,
          the function is invoked after the match has been
          performed. (The use of a function in this manner is often
          called a lambda expression.)&lt;/p&gt;&lt;p&gt;In your function, you can dynamically generate the
          string that replaces the matched substring. The result of
          the function call is used as the replacement value.&lt;/p&gt;&lt;p&gt;The nested function can use the matched substrings to
          determine the new string (&lt;code&gt;newSubStr&lt;/code&gt;) that
          replaces the found substring. You get the matched
          substrings through the parameters of your function. The
          first parameter of your function holds the complete
          matched substring. The following &lt;i&gt;n&lt;/i&gt; parameters can
          be used for parenthetical matches, remembered submatch
          strings, where &lt;i&gt;n&lt;/i&gt; is the number of submatch strings
          in the regular expression. Finally, the last two
          parameters are the offset within the string where the
          match occurred and the string itself. For example, the
          following &lt;code&gt;replace&lt;/code&gt; method returns XX.zzzz -
          XX , zzzz.&lt;/p&gt;&lt;pre&gt;"XXzzzz".replace(/(X*)(z*)/,
                   function (str, p1, p2, offset, s) {
                      return str + " - " + p1 + " , " + p2;
                   }
                )&lt;/pre&gt;
        </remarks>
      </method>
      
	  <method name="search">
        <description>Executes the search for a match between a regular expression and this String object.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="4.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the index of the regular expression inside the string. If no match is found, returns -1.</return-description>
        <parameters>
          <parameter name="regexp" type="String" usage="required">
            <description>Name of the regular expression. It can be a variable name or a literal.</description>
          </parameter>
        </parameters>
        <references>
          <reference name="RegExp"/>
          <reference name="RegExp.exec"/>
          <reference name="RegExp.test"/>
          <reference name="String.match"/>
          <reference name="String.replace"/>
        </references>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v3"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;search&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following example prints a message which depends
          on the success of the test.&lt;/p&gt;&lt;pre&gt;function testinput(re, str){
   if (str.search(re) != -1)
      midstring = " contains ";
   else
      midstring = " does not contain ";
   document.write (str + midstring + re.source);
}&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;If successful, search returns the index of the regular
          expression inside the string. Otherwise, it returns
          -1.&lt;/p&gt;&lt;p&gt;When you want to know whether a pattern is found in a
          string use &lt;code&gt;search&lt;/code&gt; (similar to the regular
          expression &lt;code&gt;test&lt;/code&gt;
          method); for more information (but slower execution) use
          &lt;code&gt;match&lt;/code&gt;
          (similar to the regular expression &lt;code&gt;exec&lt;/code&gt;
          method).&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="slice">
        <description>Extracts a section of a string and returns a new string.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a new string containing the specified slice.</return-description>
        <parameters>
          <parameter name="beginSlice" type="String" usage="required">
            <description>The zero-based index at which to begin extraction.</description>
          </parameter>
          <parameter name="endSlice" type="String" usage="required">
            <description>The zero-based index at which to end extraction. If omitted, slice extracts to the end of the string.</description>
          </parameter>
        </parameters>
        <references>
          <reference name="Array.slice"/>
          <reference name="String.substring"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v3"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;slice&lt;/code&gt; to create a new
          string&lt;/h3&gt;&lt;p&gt;The following example uses &lt;code&gt;slice&lt;/code&gt; to
          create a new string.&lt;/p&gt;&lt;pre&gt;
str1="The morning is upon us. "
str2=str1.slice(3,-5)
document.write(str2)
&lt;/pre&gt;&lt;p&gt;This writes:&lt;/p&gt;&lt;pre&gt;morning is upon&lt;/pre&gt;
        </example>
        <remarks>
          &lt;p&gt;&lt;code&gt;slice&lt;/code&gt; extracts the text from one string
          and returns a new string. Changes to the text in one
          string do not affect the other string.&lt;/p&gt;&lt;p&gt;&lt;code&gt;slice&lt;/code&gt; extracts up to but not including
          &lt;code&gt;endSlice&lt;/code&gt;. &lt;code&gt;string.slice(1,4)&lt;/code&gt;
          extracts the second character through the fourth
          character (characters indexed 1, 2, and 3).&lt;/p&gt;&lt;p&gt;As a negative index, endSlice indicates an offset from
          the end of the string. string.slice(2,-1) extracts the
          third character through the second to last character in
          the string.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="small">
		<references>
			<reference name="big"/>
			<reference name="fontsize"/>
		</references>
		<return-types>
			<return-type type="String"/>
		</return-types>
		<availability>
			<specification name="JavaScript 1.0"/>
			<specification name="JScript 1.0"/>
		</availability>
		<example>
		&lt;h3&gt;Example: Using &lt;code&gt;string&lt;/code&gt; methods to change the size of a string &lt;/h3&gt;

&lt;pre&gt;var worldString="Hello, world"

document.write(worldString.small())
document.write("&amp;lt;P&amp;gt;" + worldString.big())
document.write("&amp;lt;P&amp;gt;" + worldString.fontsize(7))
&lt;/pre&gt;
&lt;p&gt;This example produces the same output as the following HTML:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;P&gt;&amp;lt;SMALL&amp;gt;Hello, world&amp;lt;/SMALL&amp;gt;
&amp;lt;P&gt;&amp;lt;BIG&amp;gt;Hello, world&amp;lt;/BIG&amp;gt;
&amp;lt;P&gt;&amp;lt;FONTSIZE=7&amp;gt;Hello, world&amp;lt;/FONTSIZE&amp;gt;&lt;/pre&gt;

		</example>
		<remarks>Use the &lt;code&gt;small&lt;/code&gt; method with the &lt;code&gt;write&lt;/code&gt; or &lt;code&gt;writeln&lt;/code&gt; methods to format and display a string in a document. In server-side JavaScript, use the &lt;code&gt;write&lt;/code&gt; function to display the string.</remarks>
		<description>Returns a copy of a string surrounded by &amp;lt;small&amp;gt;&amp;lt;/small&amp;gt; tags.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
		<return-description>Returns a copy of a string surrounded by &amp;lt;small&amp;gt;&amp;lt;/small&amp;gt; tags.</return-description>
	</method>
	
	<method name="split">
        <description>Splits a String object into an array of strings by separating the string into substrings.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="3.0+"/>
			<browser platform="Opera" version="7.0+" />
		</browsers>
        <return-description>Returns a new array.</return-description>
        <parameters>
          <parameter name="separator" type="String" usage="required">
            <description>Specifies the character to use for separating the string. The separator is treated as a string or a regular expression. If separator is omitted, the array returned contains one element consisting of the entire string.</description>
          </parameter>
          <parameter name="limit" type="String" usage="optional">
            <description>Integer specifying a limit on the number of splits to be found.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.1"/>
          <specification name="JScript 3.0"/>
          <specification name="ECMAScript v1"/>
          <specification name="enhanced in ECMAScript v3"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;split&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following example defines a function that splits a
          string into an array of strings using the specified
          separator. After splitting the string, the function
          displays messages indicating the original string (before
          the split), the separator used, the number of elements in
          the array, and the individual array elements.&lt;/p&gt;&lt;pre&gt;function splitString (stringToSplit,separator) {
   arrayOfStrings = stringToSplit.split(separator)
   document.write ('&amp;lt;P&amp;gt;The original string is: "' + stringToSplit + '"')
   document.write ('&amp;lt;BR&amp;gt;The separator is: "' + separator + '"')
   document.write ("&amp;lt;BR&amp;gt;The array has " + arrayOfStrings.length + " elements: ")

   for (var i=0; i &amp;lt; arrayOfStrings.length; i++) {
      document.write (arrayOfStrings[i] + " / ")
   }
}

var tempestString="Oh brave new world that has such people in it."
var monthString="Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec"

var space=" "
var comma=","

splitString(tempestString,space)
splitString(tempestString)
splitString(monthString,comma)&lt;/pre&gt;&lt;p&gt;This example produces the following output:&lt;/p&gt;&lt;pre&gt;The original string is: "Oh brave new world that has such people in it."
The separator is: " "
The array has 10 elements: Oh / brave / new / world / that / has / such / people / in / it. /

The original string is: "Oh brave new world that has such people in it."
The separator is: "undefined"
The array has 1 elements: Oh brave new world that has such people in it. /

The original string is: "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec"
The separator is: ","
The array has 12 elements: Jan / Feb / Mar / Apr / May / Jun / Jul / Aug / Sep / Oct / Nov / Dec /&lt;/pre&gt;&lt;h3&gt;The difference between &lt;code&gt;split&lt;/code&gt; in
          JavaScript 1.2 and other versions&lt;/h3&gt;&lt;p&gt;Consider the following script:&lt;/p&gt;&lt;pre&gt;
str="She sells seashells \nby the\n seashore"
document.write(str + "&amp;lt;BR&amp;gt;")
a=str.split(" ")
document.write(a)
&lt;/pre&gt;&lt;p&gt;Using &lt;code&gt;LANGUAGE="JavaScript1.2"&lt;/code&gt;, this
          script produces:&lt;/p&gt;&lt;pre&gt;"She", "sells", "seashells", "by", "the", "seashore"&lt;/pre&gt;&lt;p&gt;Without &lt;code&gt;LANGUAGE="JavaScript1.2"&lt;/code&gt;, this
          script splits only on single space characters,
          producing:&lt;/p&gt;&lt;pre&gt;"She", "sells", "seashells", "\nby", "the\n", "seashore"&lt;/pre&gt;&lt;h3&gt;Removing spaces from a string&lt;/h3&gt;&lt;p&gt;In the following example, &lt;code&gt;split&lt;/code&gt; looks for
          1 or more spaces followed by a semicolon followed by 1 or
          more spaces and, when found, removes the spaces from the
          string. &lt;code&gt;nameList&lt;/code&gt; is the array returned as a
          result of &lt;code&gt;split&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;
names = "Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand ";
document.write (names + "&amp;lt;BR&amp;gt;" + "&amp;lt;BR&amp;gt;");
re = /\s+;\s+/;
nameList = names.split (re);
document.write(nameList);
&lt;/pre&gt;&lt;p&gt;This prints two lines; the first line prints the
          original string, and the second line prints the resulting
          array.&lt;/p&gt;&lt;pre&gt;Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand
Harry Trump,Fred Barney,Helen Rigby,Bill Abel,Chris Hand&lt;/pre&gt;&lt;h3&gt;Returning a limited number of splits&lt;/h3&gt;&lt;p&gt;In the following example, &lt;code&gt;split&lt;/code&gt; looks for
          0 or more spaces in a string and returns the first 3
          splits that it finds.&lt;/p&gt;&lt;pre&gt;
myVar = " Hello World. How are you doing? ";
splits = myVar.split(" ", 3);
document.write(splits)
&lt;/pre&gt;&lt;p&gt;This script displays the following:&lt;/p&gt;&lt;pre&gt;["Hello", "World.", "How"&lt;/pre&gt;
        </example>
        <references>
          <reference name="charAt"/>
          <reference name="indexOf"/>
          <reference name="lastIndexOf"/>
        </references>
        <remarks>
          &lt;p&gt;The &lt;code&gt;split&lt;/code&gt; method returns the new
          array.&lt;/p&gt;&lt;p&gt;When found, &lt;code&gt;separator&lt;/code&gt; is removed from the
          string and the substrings are returned in an array. If
          &lt;code&gt;separator&lt;/code&gt; is omitted, the array contains one
          element consisting of the entire string.&lt;/p&gt;&lt;p&gt;In JavaScript 1.2 or later, &lt;code&gt;split&lt;/code&gt; has the
          following additions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;It can take a regular expression argument, as well
          as a fixed string, by which to split the object string.
          If &lt;code&gt;separator&lt;/code&gt; is a regular expression, any
          included parenthesis cause submatches to be included in
          the returned array.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;It can take a limit count so that the resulting
          array does not include trailing elements.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If you specify
          &lt;code&gt;LANGUAGE="JavaScript1.2"&lt;/code&gt; in the
          &lt;code&gt;script&lt;/code&gt; tag, &lt;code&gt;string.split(" ")&lt;/code&gt;
          splits on any run of 1 or more white space characters
          including spaces, tabs, line feeds, and carriage
          returns.&lt;/li&gt;&lt;/ul&gt;
        </remarks>
      </method>
      
      <method name="startsWith">
		<references>
			<reference name="endsWith"/>
		</references>
		<parameters>
			<parameter name="searchString" type="String" usage="required">
            	<description>The characters to be searched for at the start of this string.</description>
          	</parameter>
          	<parameter name="position" type="Number" usage="optional">
            	<description>The position in this string at which to begin searching for searchString; defaults to 0.</description>
          	</parameter>
		</parameters>
		<return-types>
			<return-type type="Boolean"/>
		</return-types>
		<availability>
			<specification name="ECMAScript v6"/>
		</availability>
		<example>var str = "To be, or not to be, that is the question.";
 
print(str.startsWith("To be"));         // true
print(str.startsWith("not to be"));     // false
print(str.startsWith("not to be", 10)); // true</example>
		<description>This method lets you determine whether or not a string begins with another string.</description>
		<browsers>
			<browser platform="Mozilla" version="17.0+"/>
		</browsers>
	</method>
      
	  <method name="strike">
		<references>
			<reference name="blink"/>
			<reference name="bold"/>
			<reference name="italics"/>
		</references>
		<return-types>
			<return-type type="String"/>
		</return-types>
		<availability>
			<specification name="JavaScript 1.0"/>
			<specification name="JScript 1.0"/>
		</availability>
		<example>
		&lt;h3&gt;Example: Using &lt;code&gt;string&lt;/code&gt; methods to change the formatting of a string &lt;/h3&gt;
&lt;p&gt;The following example uses &lt;code&gt;string&lt;/code&gt; methods to change the formatting of a string:&lt;/p&gt;
&lt;pre&gt;var worldString="Hello, world"

document.write(worldString.blink())
document.write("&amp;lt;P&amp;gt;" + worldString.bold())
document.write("&amp;lt;P&amp;gt;" + worldString.italics())
document.write("&amp;lt;P&amp;gt;" + worldString.strike())

&lt;/pre&gt;
&lt;p&gt;This example produces the same output as the following HTML:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;P&amp;gt;&amp;lt;BLINK&amp;gt;Hello, world&amp;lt;/BLINK&amp;gt;
&amp;lt;P&amp;gt;&amp;lt;B&gt;Hello, world&amp;lt;/B&amp;gt;
&amp;lt;P&amp;gt;&amp;lt;I&gt;Hello, world&amp;lt;/I&amp;gt;
&amp;lt;P&amp;gt;&amp;lt;STRIKE&amp;gt;Hello, world&amp;lt;/STRIKE&amp;gt;&lt;/pre&gt;
		</example>
		<remarks>
		&lt;p&gt;Use the &lt;code&gt;strike&lt;/code&gt; method with the &lt;code&gt;write&lt;/code&gt; or &lt;code&gt;writeln&lt;/code&gt; methods to format and display a string in a document. In server-side JavaScript, use the &lt;code&gt;write&lt;/code&gt; function to display the string.&lt;/p&gt;
		</remarks>
		<description>Returns a copy of a string surrounded by &lt;strike&gt;&lt;/strike&gt; tags.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
		<return-description>Returns a copy of a string surrounded by &lt;strike&gt;&lt;/strike&gt; tags.</return-description>
	</method>
	
	<method name="sub">
		<references>
			<reference name="sup"/>
		</references>
		<return-types>
			<return-type type="String" />
		</return-types>
		<availability>
			<specification name="JavaScript 1.0"/>
			<specification name="JScript 1.0"/>
		</availability>
		<example>
		&lt;h3&gt;Example: Using &lt;code&gt;sub&lt;/code&gt; and &lt;code&gt;sup&lt;/code&gt; methods to format a string &lt;/h3&gt;
&lt;p&gt;The following example uses the &lt;code&gt;sub&lt;/code&gt; and &lt;code&gt;sup&lt;/code&gt; methods to format a string:&lt;/p&gt;

&lt;pre&gt;var superText="superscript"
var subText="subscript"

document.write("&amp;lt;P&amp;gt;This is what a " + superText.sup() + " looks like.")
document.write("&amp;lt;P&amp;gt;This is what a " + subText.sub() + " looks like.")
&lt;/pre&gt;
&lt;p&gt;This example produces the same output as the following HTML:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;P&amp;gt;This is what a &amp;lt;SUP&amp;gt;superscript&amp;lt;/SUP&amp;gt; looks like.
&amp;lt;P&amp;gt;This is what a &amp;lt;SUB&amp;gt;subscript&amp;lt;/SUB&amp;gt; looks like.&lt;/pre&gt;
		</example>
		<remarks>
		&lt;p&gt;Use the &lt;code&gt;sub&lt;/code&gt; method with the &lt;code&gt;write&lt;/code&gt; or &lt;code&gt;writeln&lt;/code&gt; methods to format and display a string in a document. In server-side JavaScript, use the &lt;code&gt;write&lt;/code&gt; function to generate the HTML.&lt;/p&gt;

		</remarks>
		<description>Returns a copy of a string surrounded by &amp;lt;sub&amp;gt;&amp;lt;/sub&amp;gt; tags.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
		<return-description>Returns a copy of a string surrounded by &amp;lt;sub&amp;gt;&amp;lt;/sub&amp;gt; tags.</return-description>
	</method>
	
	<method name="substr">
        <description>Returns the characters in a string beginning at the specified location through the specified number of characters.</description>
		<browsers>
			<browser platform="IE" version="4.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>
          Returns the characters in a string beginning at the
          specified location through the specified number of
          characters.
        </return-description>
        <parameters>
          <parameter name="start" type="Number" usage="required">
            <description>Location at which to begin extracting characters (an integer between 0 and one less than the length of the string).</description>
          </parameter>
          <parameter name="length" type="Number" usage="required">
            <description>The number of characters to extract.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.2"/>
          <specification name="JScript 3.0"/>
          <specification name="deprecated"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;substr&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Consider the following script:&lt;/p&gt;&lt;pre&gt;str = "abcdefghij";
document.writeln("(1,2): ", str.substr(1,2));
document.writeln("(-2,2): ", str.substr(-2,2));
document.writeln("(1): ", str.substr(1));
document.writeln("(-20, 2): ", str.substr(1,20));
document.writeln("(20, 2): ", str.substr(20,2));&lt;/pre&gt;&lt;p&gt;This script displays:&lt;/p&gt;&lt;pre&gt;(1,2): bc
(-2,2): ij
(1): bcdefghij
(-20, 2): bcdefghij
(20, 2):&lt;/pre&gt;
        </example>
        <references>
          <reference name="substring"/>
          <reference name="String.slice"/>
        </references>
        <remarks>
          &lt;p&gt;&lt;code&gt;start&lt;/code&gt; is a character index. The index of
          the first character is 0, and the index of the last
          character is 1 less than the length of the string.
          &lt;code&gt;substr&lt;/code&gt; begins extracting characters at
          &lt;code&gt;start&lt;/code&gt; and collects &lt;code&gt;length&lt;/code&gt;
          number of characters.&lt;/p&gt;&lt;p&gt;If &lt;code&gt;start&lt;/code&gt; is positive and is the length of
          the string or longer, &lt;code&gt;substr&lt;/code&gt; returns no
          characters.&lt;/p&gt;&lt;p&gt;If &lt;code&gt;start&lt;/code&gt; is negative, &lt;code&gt;substr&lt;/code&gt;
          uses it as a character index from the end of the string.
          If &lt;code&gt;start&lt;/code&gt; is negative and
          &lt;code&gt;abs(start)&lt;/code&gt; is larger than the length of the
          string, &lt;code&gt;substr&lt;/code&gt; uses 0 is the start
          index.&lt;/p&gt;&lt;p&gt;If &lt;code&gt;length&lt;/code&gt; is 0 or negative,
          &lt;code&gt;substr&lt;/code&gt; returns no characters. If
          &lt;code&gt;length&lt;/code&gt; is omitted, &lt;code&gt;start&lt;/code&gt;
          extracts characters to the end of the string.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="substring">
        <description>Returns a subset of a String object.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a subset of a String object.</return-description>
        <parameters>
          <parameter name="indexA" type="Number" usage="required">
            <description>An integer between 0 and one less than the length of the string.</description>
          </parameter>
          <parameter name="indexB" type="Number" usage="optional">
            <description>An integer between 0 and the length of the string.</description>
          </parameter>
        </parameters>
        <references>
          <reference name="String.charAt"/>
          <reference name="String.indexOf"/>
          <reference name="String.lastIndexOf"/>
          <reference name="String.slice"/>
          <reference name="String.substr"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0, ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;substring&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following example uses &lt;code&gt;substring&lt;/code&gt; to
          display characters from the string
          "&lt;code&gt;Mozilla&lt;/code&gt;":&lt;/p&gt;&lt;pre&gt;var anyString = "Mozilla";

// Displays "Moz"
document.write(anyString.substring(0,3));
document.write(anyString.substring(3,0));
// Displays "lla"
document.write(anyString.substring(4,7));
document.write(anyString.substring(7,4));
// Displays "Mozill"
document.write(anyString.substring(0,6));
// Displays "Mozilla"
document.write(anyString.substring(0,7));
document.write(anyString.substring(0,10));&lt;/pre&gt;&lt;h3&gt;Replacing a substring within a string&lt;/h3&gt;&lt;p&gt;The following example replaces a substring within a
          string. It will replace both individual characters and
          substrings. The function call at the end of the example
          changes the string "&lt;code&gt;Brave New World&lt;/code&gt;" into
          "&lt;code&gt;Brave New Web&lt;/code&gt;".&lt;/p&gt;&lt;pre&gt;function replaceString(oldS, newS, fullS) {
// Replaces oldS with newS in the string fullS
   for (var i = 0; i &amp;lt; fullS.length; i++) {
      if (fullS.substring(i, i + oldS.length) == oldS) {
         fullS = fullS.substring(0, i) + newS + fullS.substring(i + oldS.length, fullS.length);
      }
   }
   return fullS;
}

replaceString("World", "Web", "Brave New World");&lt;/pre&gt;&lt;h3&gt;JavaScript 1.2 "Out of Memory" error&lt;/h3&gt;&lt;p&gt;In JavaScript 1.2, using
          &lt;code&gt;LANGUAGE="JavaScript1.2"&lt;/code&gt;, the following
          script produces a runtime error (out of memory).&lt;/p&gt;&lt;pre&gt;
var str = "Mozilla";
document.write(str.substring(0,3));
document.write(str.substring(3,0));
&lt;/pre&gt;&lt;p&gt;Without &lt;code&gt;LANGUAGE="JavaScript1.2"&lt;/code&gt;, the
          above script prints the following:&lt;/p&gt;&lt;pre&gt;Moz Moz&lt;/pre&gt;&lt;p&gt;In the second write, the index numbers are
          swapped.&lt;/p&gt;
        </example>
        <remarks>
          &lt;p&gt;&lt;code&gt;substring&lt;/code&gt; extracts characters from
          &lt;code&gt;indexA&lt;/code&gt; up to but not including
          &lt;code&gt;indexB&lt;/code&gt;. In particular:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If &lt;code&gt;indexA&lt;/code&gt; is less than 0,
          &lt;code&gt;indexA&lt;/code&gt; is treated as if it were 0.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If &lt;code&gt;indexB&lt;/code&gt; is greater than
          &lt;code&gt;stringName.length&lt;/code&gt;, &lt;code&gt;indexB&lt;/code&gt; is
          treated as if it were
          &lt;code&gt;stringName.length&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If &lt;code&gt;indexA&lt;/code&gt; equals &lt;code&gt;indexB&lt;/code&gt;,
          &lt;code&gt;substring&lt;/code&gt; returns an empty string.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If &lt;code&gt;indexB&lt;/code&gt; is omitted,
          &lt;code&gt;substring&lt;/code&gt; extracts characters to the end
          of the string.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;In JavaScript 1.2&lt;/h3&gt;&lt;p&gt;Using &lt;code&gt;LANGUAGE="JavaScript1.2"&lt;/code&gt; in the
          &lt;code&gt;script&lt;/code&gt; tag,&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If &lt;code&gt;indexA&lt;/code&gt; is greater than
          &lt;code&gt;indexB&lt;/code&gt;, JavaScript produces a runtime
          error (out of memory).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Without &lt;code&gt;LANGUAGE="JavaScript1.2"&lt;/code&gt; in the
          &lt;code&gt;script&lt;/code&gt; tag,&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If &lt;code&gt;indexA&lt;/code&gt; is greater than
          &lt;code&gt;indexB&lt;/code&gt;, JavaScript returns
          &lt;code&gt;substring(indexB, indexA)&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;
        </remarks>
      </method>
      
	  <method name="sup">
		<references>
			<reference name="sub"/>
		</references>
		<return-types>
			<return-type type="String"/>
		</return-types>
		<availability>
			<specification name="JavaScript 1.0"/>
			<specification name="JScript 1.0"/>
		</availability>
		<example>
		&lt;h3&gt;Example: Using &lt;code&gt;sub&lt;/code&gt; and &lt;code&gt;sup&lt;/code&gt; methods to format a string &lt;/h3&gt;
&lt;p&gt;The following example uses the &lt;code&gt;sub&lt;/code&gt; and &lt;code&gt;sup&lt;/code&gt; methods to format a string:&lt;/p&gt;

&lt;pre&gt;var superText="superscript"
var subText="subscript"

document.write("&amp;lt;P&amp;gt;This is what a " + superText.sup() + " looks like.")
document.write("&amp;lt;P&amp;gt;This is what a " + subText.sub() + " looks like.")
&lt;/pre&gt;
&lt;p&gt;This example produces the same output as the following HTML:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;P&amp;gt;This is what a &amp;lt;SUP&amp;gt;superscript&amp;lt;/SUP&amp;gt; looks like.
&amp;lt;P&amp;gt;This is what a &amp;lt;SUB&amp;gt;subscript&amp;lt;/SUB&amp;gt; looks like.&lt;/pre&gt;
		</example>
		<remarks>
		&lt;p&gt;Use the &lt;code&gt;sup&lt;/code&gt; method with the &lt;code&gt;write&lt;/code&gt; or &lt;code&gt;writeln&lt;/code&gt; methods to format and display a string in a document. In server-side JavaScript, use the &lt;code&gt;write&lt;/code&gt; function to generate the HTML.&lt;/p&gt;
		</remarks>
		<description>Returns a copy of a string surrounded by &amp;lt;sup&amp;gt;&amp;lt;/sup&amp;gt; tags.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
		<return-description>Returns a copy of a string surrounded by &amp;lt;sup&amp;gt;&amp;lt;/sup&amp;gt; tags.</return-description>
	</method>
	
	<method name="toLocaleLowerCase">
        <description>Returns a copy of a string in lowercase letters in a locale-specific format.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
		</browsers>
        <return-description>Returns a copy of a string in lowercase letters in a locale-specific format.</return-description>
        <references>
          <reference name="String.toLocaleUpperCase"/>
          <reference name="String.toLowerCase"/>
          <reference name="String.toUpperCase"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.5"/>
          <specification name="JScript 5.5, ECMAScript v3"/>
        </availability>
      </method>
	      
	  <method name="toLocaleUpperCase">
        <description>Returns a copy of a string in uppercase letters in a locale-specific format.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
		</browsers>
        <return-description>Returns a copy of a string in uppercase letters in a locale-specific format.</return-description>
        <references>
          <reference name="String.toLocaleLowerCase"/>
          <reference name="String.toLowerCase"/>
          <reference name="String.toUpperCase"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.5"/>
          <specification name="JScript 5.5, ECMAScript v3"/>
        </availability>
      </method>
      
	  <method name="toLowerCase">
        <description>Returns the string value converted to lowercase. </description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns the calling string value converted to lowercase.</return-description>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0, ECMAScript v1"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;toLowerCase&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following example displays the lowercase string
          "&lt;code&gt;alphabet&lt;/code&gt;":&lt;/p&gt;&lt;pre&gt;var upperText="ALPHABET"
document.write(upperText.toLowerCase())&lt;/pre&gt;
        </example>
        <references>
          <reference name="toUpperCase"/>
        </references>
        <remarks>
          &lt;p&gt;The &lt;code&gt;toLowerCase&lt;/code&gt; method returns the value
          of the string converted to lowercase.
          &lt;code&gt;toLowerCase&lt;/code&gt; does not affect the value of the
          string itself.&lt;/p&gt;
        </remarks>
      </method>
      
	  <method name="toString">
        <description>Returns a string representing the specified object.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
        <return-description>Returns a string representing the specified object.</return-description>
        <exceptions>
          <exception type="TypeError">
            <description>TypeError is thrown if the specified object is not a String.</description>
          </exception>
        </exceptions>
        <references>
          <reference name="String.valueOf"/>
        </references>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="JavaScript 1.0"/>
          <specification name="JScript 1.0, ECMAScript v1 Overrides Object.toString"/>
        </availability>
        <example>
          &lt;h3&gt;Using &lt;code&gt;toString&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The following example displays the string value of a
          String object:&lt;/p&gt;&lt;pre&gt;x = new String("Hello world");
alert(x.toString())      // Displays "Hello world"&lt;/pre&gt;
        </example>
      </method>
      
	  <method name="toUpperCase">
		<references>
			<reference name="toLowerCase"/>
		</references>
		<return-types>
			<return-type type="String"/>
		</return-types>
		<availability>
			<specification name="JavaScript 1.0"/>
			<specification name="JScript 1.0"/>
			<specification name="ECMAScript v1"/>
		</availability>
		<example>&lt;h3&gt;Example: Using &lt;code&gt;toUpperCase&lt;/code&gt; &lt;/h3&gt;

&lt;p&gt;The following example displays the string "&lt;code&gt;ALPHABET&lt;/code&gt;":&lt;/p&gt;
&lt;pre&gt;var lowerText="alphabet"
document.write(lowerText.toUpperCase())&lt;/pre&gt;</example>
		<remarks>&lt;p&gt;The &lt;code&gt;toUpperCase&lt;/code&gt; method returns the value of the string converted to uppercase.  &lt;code&gt;toUpperCase&lt;/code&gt; does not affect the value of the string itself.
&lt;/p&gt;</remarks>
		<description>Returns the string value converted to all uppercase.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
		<return-description>Returns the string value converted to all uppercase.</return-description>
	</method>
	
	<method name="trim">
        <description>Returns a string with leading and trailing whitespace removed.</description>
		<browsers>
			<browser platform="IE" version="9.0+"/>
			<browser platform="Mozilla" version="3.5+"/>
			<browser platform="Opera" version="10.5+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="5.0+" />
		</browsers>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <availability>
          <specification name="ECMAScript v5.1"/>
        </availability>
        <remarks>The trim function is intentionally generic; it does not require that its this value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</remarks>
      </method>
	
    <method name="valueOf">
		<references>
			<reference name="toString"/>
			<reference name="Object.valueOf"/>
		</references>
		<return-types>
			<return-type type="Object"/>
		</return-types>
		<availability>
			<specification name="JavaScript 1.0"/>
			<specification name="JScript 1.0"/>
			<specification name="ECMAScript v1"/>
		</availability>
		<example>&lt;h3&gt;Example: Using &lt;code&gt;valueOf&lt;/code&gt; &lt;/h3&gt;

&lt;pre&gt;x = new String("Hello world");
alert(x.valueOf())          // Displays "Hello world"&lt;/pre&gt;</example>
		<remarks>&lt;p&gt;The &lt;code&gt;valueOf&lt;/code&gt; method of &lt;code&gt;String&lt;/code&gt; returns the primitive value of a String object as a string data type. This value is equivalent to String.toString.&lt;/p&gt;

&lt;p&gt;This method is usually called internally by JavaScript and not explicitly in code.&lt;/p&gt;</remarks>
		<description>Returns the primitive value of a String object.</description>
		<browsers>
			<browser platform="IE" version="3.0+"/>
			<browser platform="Mozilla" version="1.0+"/>
			<browser platform="Netscape" version="2.0+"/>
			<browser platform="Opera" version="7.0+" />
			<browser platform="Chrome" version="5.0+" />
			<browser platform="Safari" version="1.0+" />
		</browsers>
		<return-description>Returns the primitive value of a String object.</return-description>
    <availability>
      <specification name="JavaScript 1.0"/>
      <specification name="JScript 1.0"/>
      <specification name="ECMAScript v1"/>
    </availability>
   </method>
  </methods>
  </class>

<class type="SyntaxError" superclass="Error">
	<description>A SyntaxError is thrown if there is a syntax error in the JavaScript code.</description>
	<browsers>
		<browser platform="IE" version="5.0+"/>
		<browser platform="Mozilla" version="1.0+"/>
		<browser platform="Netscape" version="6.0+"/>
	</browsers>
		<constructors>
			<constructor>
				<description>Creates a new instance of SyntaxError.</description>
				<parameters>
					<parameter name="message" type="String" usage="optional">
						<description>Error message that provides information about the exception.</description>
					</parameter>
				</parameters>
				<return-types>
					<return-type type="SyntaxError"/>
				</return-types>
			</constructor>
		</constructors>
		
		<properties>
			<property name="message" type="String" access="read-write">
				<availability>
					<specification name="JavaScript 1.5"/>
					<specification name="JScript 5.5"/>
					<specification name="ECMAScript v3"/>
				</availability>
				<references>
					<reference name="Error.message"/>
				</references>
				<remarks>Contains either the error message passed to the constructor, or a default message.</remarks>
				<description>An error message associated with the SyntaxError.</description>
				<browsers>
					<browser platform="IE" version="5.0+"/>
					<browser platform="Mozilla" version="1.0+"/>
					<browser platform="Netscape" version="6.0+"/>
				</browsers>
			</property>
			
			<property name="name" type="String" access="read-write">
				<availability>
					<specification name="JavaScript 1.5"/>
					<specification name="JScript 5.5"/>
					<specification name="ECMAScript v3"/>
				</availability>
				<description>Specifies the type of exception.</description>
				<browsers>
					<browser platform="IE" version="5.0+"/>
					<browser platform="Mozilla" version="1.0+"/>
					<browser platform="Netscape" version="6.0+"/>
				</browsers>
			</property>
		</properties>
		<references>
			<reference name="Error"/>
			<reference name="Error.message"/>
			<reference name="Error.name"/>
		</references>
		<availability>
			<specification name="JavaScript 1.5"/>
			<specification name="JScript 5.5"/>
			<specification name="ECMAScript v3"/>
		</availability>
		<remarks>Can be thrown by the &lt;eval&gt; method, &lt;Function&gt; constructor, and the &lt;RegExp&gt; constructor.</remarks>
		<interfaces>
			<interface type=""/>
		</interfaces>
	</class>
	
<class type="TypeError" superclass="Error">
	<description>A TypeError is thrown when a value is a different type than what was expected.</description>
	<browsers>
		<browser platform="IE" version="5.0+"/>
		<browser platform="Mozilla" version="1.0+"/>
		<browser platform="Netscape" version="6.0+"/>
	</browsers>
	<constructors>
		<constructor>
			<description>Creates a new instance of TypeError.</description>
			<parameters>
				<parameter name="message" type="String" usage="optional">
					<description>Error message that provides information about the exception.</description>
				</parameter>
			</parameters>
			<return-types>
				<return-type type="TypeError"/>
			</return-types>
		</constructor>
	</constructors>
	
	<properties>
		
		<property name="message" type="String" access="read-write">
			<availability>
				<specification name="JavaScript 1.5"/>
				<specification name="JScript 5.5"/>
				<specification name="ECMAScript v3"/>
			</availability>
			<references>
				<reference name="Error.message"/>
			</references>
			<description>An error message associated with the TypeError.</description>
			<browsers>
				<browser platform="IE" version="5.0+"/>
				<browser platform="Mozilla" version="1.0+"/>
				<browser platform="Netscape" version="6.0+"/>
			</browsers>
		</property>
		
		<property name="name" type="String" access="read-write">
			<availability>
				<specification name="JavaScript 1.5"/>
				<specification name="JScript 5.5"/>
				<specification name="ECMAScript v3"/>
			</availability>
			<description>Specifies the type of exception.</description>
			<browsers>
				<browser platform="IE" version="5.0+"/>
				<browser platform="Mozilla" version="1.0+"/>
				<browser platform="Netscape" version="6.0+"/>
			</browsers>
		</property>
	</properties>
	<references>
		<reference name="Error"/>
		<reference name="Error.message"/>
		<reference name="Error.name"/>
	</references>
	<availability>
		<specification name="JavaScript 1.5"/>
		<specification name="JScript 5.5"/>
		<specification name="ECMAScript v3"/>
	</availability>
	<remarks>A TypeError is most commonly thrown when you try to access a value that is unexpectedly null or undefined. A TypeError can also be thrown if you use the &lt;new&gt; operator on a value that is not a constructor or if you pass too many arguments to a built-in function.</remarks>
	<interfaces>
		<interface type=""/>
	</interfaces>
</class>

<class type="URIError" superclass="Error">
	<description>A URIError is thrown when there is an exception with URI encoding or decoding.</description>
	<browsers>
		<browser platform="IE" version="5.0+"/>
		<browser platform="Mozilla" version="1.0+"/>
		<browser platform="Netscape" version="6.0+"/>
	</browsers>
	<constructors>
		<constructor>
			<description>Creates a new instance of URIError.</description>
			<parameters>
				<parameter name="message" type="String" usage="optional">
					<description>Error message that provides information about the exception.</description>
				</parameter>
			</parameters>
			<return-types>
				<return-type type="URIError"/>
			</return-types>
		</constructor>
	</constructors>
	
	<properties>
		<property name="message" type="String" access="read-write">
			<availability>
				<specification name="JavaScript 1.5"/>
				<specification name="JScript 5.5"/>
				<specification name="ECMAScript v3"/>
			</availability>
			<references>
				<reference name="Error.mesage"/>
			</references>
			<description>An error message associated with URIError.</description>
			<browsers>
				<browser platform="IE" version="5.0+"/>
				<browser platform="Mozilla" version="1.0+"/>
				<browser platform="Netscape" version="6.0+"/>
			</browsers>
		</property>
		
		<property name="name" type="String" access="read-write">
			<availability>
				<specification name="JavaScript 1.5"/>
				<specification name="JScript 5.5"/>
				<specification name="ECMAScript v3"/>
			</availability>
			<description>Specifies the type of exception.</description>
			<browsers>
				<browser platform="IE" version="5.0+"/>
				<browser platform="Mozilla" version="1.0+"/>
				<browser platform="Netscape" version="6.0+"/>
			</browsers>
		</property>
	</properties>
	<references>
		<reference name="Error"/>
		<reference name="Error.message"/>
		<reference name="Error.name"/>
	</references>
	<availability>
		<specification name="JavaScript 1.5"/>
		<specification name="JScript 5.5"/>
		<specification name="ECMAScript v3"/>
	</availability>
	<interfaces>
		<interface type=""/>
	</interfaces>
</class>

  <class type="JSON" superclass="Object">
	<description>The JSON object is a single object that contains two functions, parse and stringify, that are used to parse and construct JSON texts. The JSON Data Interchange Format is described in RFC 4627 &lt;a href="http://www.ietf.org/rfc/rfc4627.txt"&gt;http://www.ietf.org/rfc/rfc4627.txt&lt;/a&gt;. The JSON interchange format used in this specification is exactly that described by RFC 4627 with two exceptions:

The top level JSONText production of the ECMAScript JSON grammar may consist of any JSONValue rather than being restricted to being a JSONObject or a JSONArray as specified by RFC 4627.

Conforming implementations of JSON.parse and JSON.stringify must support the exact interchange format described in this specification without any deletions or extensions to the format. This differs from RFC 4627 which permits a JSON parser to accept non-JSON forms and extensions.</description>
	<browsers>
		<browser platform="IE" version="8.0+"/>
		<browser platform="Mozilla" version="4.0+"/>
		<browser platform="Opera" version="10.5+" />
		<browser platform="Chrome" version="5.0+" />
		<browser platform="Safari" version="4.0+" />
	</browsers>
	<methods>
		<method name="parse" scope="static">
			<parameters>
				<parameter name="text" type="String" usage="required">
					<description>A JSON-formatted String.</description>
				</parameter>
				<parameter name="reviver" type="Function(String,Object):Object" usage="optional">
					<description>The optional reviver parameter is a function that takes two parameters, (key and value). It can filter and transform the results. It is called with each of the key/value pairs produced by the parse, and its return value is used instead of the original value. If it returns what it received, the structure is not modified. If it returns undefined then the property is deleted from the result.</description>
				</parameter>
			</parameters>
			<return-types>
				<return-type type="Object"/>
			</return-types>
			<availability>
				<specification name="ECMAScript v5.1"/>
			</availability>
			<remarks>
				&lt;p&gt;The &lt;code&gt;parse&lt;/code&gt; function parses a JSON text (a JSON-formatted String) and produces an ECMAScript value. The JSON
      format is a restricted form of ECMAScript literal. JSON objects are realized as ECMAScript objects. JSON arrays are realized
      as ECMAScript arrays. JSON strings, numbers, booleans, and null are realized as ECMAScript Strings, Numbers, Booleans, and
      &lt;b&gt;null&lt;/b&gt;. JSON uses a more limited set of white space characters than &lt;span class="nt"&gt;WhiteSpace&lt;/span&gt; and allows
      Unicode code points U+2028 and U+2029 to directly appear in &lt;span class="nt"&gt;JSONString&lt;/span&gt; literals without using an
      escape sequence. The process of parsing is similar to &lt;a href="#sec-11.1.4"&gt;11.1.4&lt;/a&gt; and &lt;a href="#sec-11.1.5"&gt;11.1.5&lt;/a&gt;
      as constrained by the JSON grammar.&lt;/p&gt;</remarks>
			<description>The parse function parses a JSON text (a JSON-formatted String) and produces an ECMAScript value.</description>
			<browsers>
				<browser platform="IE" version="8.0+"/>
				<browser platform="Mozilla" version="4.0+"/>
				<browser platform="Opera" version="10.5+" />
				<browser platform="Chrome" version="5.0+" />
				<browser platform="Safari" version="4.0+" />
			</browsers>
			<return-description>Returns an ECMAScript value.</return-description>
		</method>
		<method name="stringify" scope="static">
			<parameters>
				<parameter name="value" type="Object" usage="required">
					<description>an ECMAScript value, which is usually an object or array, although it can also be a String, Boolean, Number or null.</description>
				</parameter>
				<parameter name="replacer" type="String[],Number[],Function:String" usage="optional">
					<description>The optional replacer parameter is either a function that alters the way objects and arrays are stringified, or an array of Strings and Numbers that acts as a white list for selecting the object properties that will be stringified.</description>
				</parameter>
				<parameter name="space" type="String,Number" usage="optional">
					<description>The optional space parameter is a String or Number that allows the result to have white space injected into it to improve human readability.</description>
				</parameter>
			</parameters>
			<return-types>
				<return-type type="Object"/>
			</return-types>
			<availability>
				<specification name="ECMAScript v5.1"/>
			</availability>
			<remarks>&lt;p&gt;The &lt;code&gt;stringify&lt;/code&gt; function returns a String in JSON format representing an ECMAScript value. It can take three
      parameters. The first parameter is required. The &lt;var&gt;value&lt;/var&gt; parameter is an ECMAScript value, which is usually an
      object or array, although it can also be a String, Boolean, Number or &lt;b&gt;null&lt;/b&gt;. The optional &lt;var&gt;replacer&lt;/var&gt;
      parameter is either a function that alters the way objects and arrays are stringified, or an array of Strings and Numbers
      that acts as a white list for selecting the object properties that will be stringified. The optional &lt;var&gt;space&lt;/var&gt;
      parameter is a String or Number that allows the result to have white space injected into it to improve human
      readability.&lt;/p&gt;</remarks>
			<description>The stringify function returns a String in JSON format representing an ECMAScript valuee.</description>
			<browsers>
				<browser platform="IE" version="8.0+"/>
				<browser platform="Mozilla" version="4.0+"/>
				<browser platform="Opera" version="10.5+" />
				<browser platform="Chrome" version="5.0+" />
				<browser platform="Safari" version="4.0+" />
			</browsers>
			<return-description>Returns a String in JSON format representing an ECMAScript value.</return-description>
		</method>
	</methods>
  </class>
</javascript>
