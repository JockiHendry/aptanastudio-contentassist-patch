/* The following code was generated by JFlex 1.4.3 on 08/12/12 17:54 */

// $codepro.audit.disable
/**
 * Aptana Studio
 * Copyright (c) 2005-2012 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the GNU Public License (GPL) v3 (with exceptions).
 * Please see the license.html included with this distribution for details.
 * Any modifications to this file must keep this entire header intact.
 */
package com.aptana.js.core.parsing;

import java.io.Reader;
import java.io.StringReader;

import java.util.ArrayList;
import java.util.List;

import beaver.Symbol;
import beaver.Scanner;

import org.eclipse.core.internal.utils.StringPool;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 08/12/12 17:54 from the specification file
 * <tt>C:/Users/JockiHendry/Documents/workspace-rcp/studio3/plugins/com.aptana.js.core/parsing/JS.flex</tt>
 */
public class JSFlexScanner extends Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int REGEX = 4;
  public static final int DIVISION = 2;
  public static final int HTML = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\30\1\10\1\1\1\0\1\10\1\1\16\30\4\0\1\10\1\62"+
    "\1\40\1\0\1\27\1\3\1\63\1\42\1\71\1\72\1\43\1\37"+
    "\1\73\1\65\1\22\1\23\1\32\11\35\1\74\1\70\1\2\1\21"+
    "\1\4\1\5\1\0\4\34\1\36\1\34\21\27\1\33\2\27\1\44"+
    "\1\41\1\45\1\66\1\27\1\0\1\52\1\51\1\12\1\57\1\20"+
    "\1\50\1\46\1\24\1\14\1\46\1\53\1\26\1\25\1\55\1\54"+
    "\1\15\1\46\1\13\1\11\1\16\1\56\1\61\1\60\1\47\1\17"+
    "\1\46\1\6\1\64\1\7\1\67\41\30\2\0\4\27\4\0\1\27"+
    "\2\0\1\30\7\0\1\27\4\0\1\27\5\0\27\27\1\0\37\27"+
    "\1\0\u01ca\27\4\0\14\27\16\0\5\27\7\0\1\27\1\0\1\27"+
    "\21\0\160\30\5\27\1\0\2\27\2\0\4\27\10\0\1\27\1\0"+
    "\3\27\1\0\1\27\1\0\24\27\1\0\123\27\1\0\213\27\1\0"+
    "\5\30\2\0\236\27\11\0\46\27\2\0\1\27\7\0\47\27\11\0"+
    "\55\30\1\0\1\30\1\0\2\30\1\0\2\30\1\0\1\30\10\0"+
    "\33\27\5\0\3\27\15\0\4\30\7\0\1\27\4\0\13\30\5\0"+
    "\53\27\25\30\12\31\4\0\2\27\1\30\143\27\1\0\1\27\10\30"+
    "\1\0\6\30\2\27\2\30\1\0\4\30\2\27\12\31\3\27\2\0"+
    "\1\27\17\0\1\30\1\27\1\30\36\27\33\30\2\0\131\27\13\30"+
    "\1\27\16\0\12\31\41\27\11\30\2\27\4\0\1\27\5\0\26\27"+
    "\4\30\1\27\11\30\1\27\3\30\1\27\5\30\22\0\31\27\3\30"+
    "\244\0\4\30\66\27\3\30\1\27\22\30\1\27\7\30\12\27\2\30"+
    "\2\0\12\31\1\0\7\27\1\0\7\27\1\0\3\30\1\0\10\27"+
    "\2\0\2\27\2\0\26\27\1\0\7\27\1\0\1\27\3\0\4\27"+
    "\2\0\1\30\1\27\7\30\2\0\2\30\2\0\3\30\1\27\10\0"+
    "\1\30\4\0\2\27\1\0\3\27\2\30\2\0\12\31\4\27\7\0"+
    "\1\27\5\0\3\30\1\0\6\27\4\0\2\27\2\0\26\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\27\1\0\2\27\2\0\1\30\1\0"+
    "\5\30\4\0\2\30\2\0\3\30\3\0\1\30\7\0\4\27\1\0"+
    "\1\27\7\0\12\31\2\30\3\27\1\30\13\0\3\30\1\0\11\27"+
    "\1\0\3\27\1\0\26\27\1\0\7\27\1\0\2\27\1\0\5\27"+
    "\2\0\1\30\1\27\10\30\1\0\3\30\1\0\3\30\2\0\1\27"+
    "\17\0\2\27\2\30\2\0\12\31\1\0\1\27\17\0\3\30\1\0"+
    "\10\27\2\0\2\27\2\0\26\27\1\0\7\27\1\0\2\27\1\0"+
    "\5\27\2\0\1\30\1\27\7\30\2\0\2\30\2\0\3\30\10\0"+
    "\2\30\4\0\2\27\1\0\3\27\2\30\2\0\12\31\1\0\1\27"+
    "\20\0\1\30\1\27\1\0\6\27\3\0\3\27\1\0\4\27\3\0"+
    "\2\27\1\0\1\27\1\0\2\27\3\0\2\27\3\0\3\27\3\0"+
    "\14\27\4\0\5\30\3\0\3\30\1\0\4\30\2\0\1\27\6\0"+
    "\1\30\16\0\12\31\11\0\1\27\7\0\3\30\1\0\10\27\1\0"+
    "\3\27\1\0\27\27\1\0\12\27\1\0\5\27\3\0\1\27\7\30"+
    "\1\0\3\30\1\0\4\30\7\0\2\30\1\0\2\27\6\0\2\27"+
    "\2\30\2\0\12\31\22\0\2\30\1\0\10\27\1\0\3\27\1\0"+
    "\27\27\1\0\12\27\1\0\5\27\2\0\1\30\1\27\7\30\1\0"+
    "\3\30\1\0\4\30\7\0\2\30\7\0\1\27\1\0\2\27\2\30"+
    "\2\0\12\31\1\0\2\27\17\0\2\30\1\0\10\27\1\0\3\27"+
    "\1\0\51\27\2\0\1\27\7\30\1\0\3\30\1\0\4\30\1\27"+
    "\10\0\1\30\10\0\2\27\2\30\2\0\12\31\12\0\6\27\2\0"+
    "\2\30\1\0\22\27\3\0\30\27\1\0\11\27\1\0\1\27\2\0"+
    "\7\27\3\0\1\30\4\0\6\30\1\0\1\30\1\0\10\30\22\0"+
    "\2\30\15\0\60\27\1\30\2\27\7\30\4\0\10\27\10\30\1\0"+
    "\12\31\47\0\2\27\1\0\1\27\2\0\2\27\1\0\1\27\2\0"+
    "\1\27\6\0\4\27\1\0\7\27\1\0\3\27\1\0\1\27\1\0"+
    "\1\27\2\0\2\27\1\0\4\27\1\30\2\27\6\30\1\0\2\30"+
    "\1\27\2\0\5\27\1\0\1\27\1\0\6\30\2\0\12\31\2\0"+
    "\2\27\42\0\1\27\27\0\2\30\6\0\12\31\13\0\1\30\1\0"+
    "\1\30\1\0\1\30\4\0\2\30\10\27\1\0\44\27\4\0\24\30"+
    "\1\0\2\30\5\27\13\30\1\0\44\30\11\0\1\30\71\0\53\27"+
    "\24\30\1\27\12\31\6\0\6\27\4\30\4\27\3\30\1\27\3\30"+
    "\2\27\7\30\3\27\4\30\15\27\14\30\1\27\1\30\12\31\4\30"+
    "\2\0\46\27\12\0\53\27\1\0\1\27\3\0\u0149\27\1\0\4\27"+
    "\2\0\7\27\1\0\1\27\1\0\4\27\2\0\51\27\1\0\4\27"+
    "\2\0\41\27\1\0\4\27\2\0\7\27\1\0\1\27\1\0\4\27"+
    "\2\0\17\27\1\0\71\27\1\0\4\27\2\0\103\27\2\0\3\30"+
    "\40\0\20\27\20\0\125\27\14\0\u026c\27\2\0\21\27\1\0\32\27"+
    "\5\0\113\27\3\0\3\27\17\0\15\27\1\0\4\27\3\30\13\0"+
    "\22\27\3\30\13\0\22\27\2\30\14\0\15\27\1\0\3\27\1\0"+
    "\2\30\14\0\64\27\40\30\3\0\1\27\3\0\2\27\1\30\2\0"+
    "\12\31\41\0\3\30\2\0\12\31\6\0\130\27\10\0\51\27\1\30"+
    "\1\27\5\0\106\27\12\0\35\27\3\0\14\30\4\0\14\30\12\0"+
    "\12\31\36\27\2\0\5\27\13\0\54\27\4\0\21\30\7\27\2\30"+
    "\6\0\12\31\46\0\27\27\5\30\4\0\65\27\12\30\1\0\35\30"+
    "\2\0\1\30\12\31\6\0\12\31\15\0\1\27\130\0\5\30\57\27"+
    "\21\30\7\27\4\0\12\31\21\0\11\30\14\0\3\30\36\27\12\30"+
    "\3\0\2\27\12\31\6\0\46\27\16\30\14\0\44\27\24\30\10\0"+
    "\12\31\3\0\3\27\12\31\44\27\122\0\3\30\1\0\25\30\4\27"+
    "\1\30\4\27\1\30\15\0\300\27\47\30\25\0\4\30\u0116\27\2\0"+
    "\6\27\2\0\46\27\2\0\6\27\2\0\10\27\1\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\37\27\2\0\65\27\1\0\7\27\1\0"+
    "\1\27\3\0\3\27\1\0\7\27\3\0\4\27\2\0\6\27\4\0"+
    "\15\27\5\0\3\27\1\0\7\27\16\0\5\30\32\0\5\30\20\0"+
    "\2\27\23\0\1\27\13\0\5\30\5\0\6\30\1\0\1\27\15\0"+
    "\1\27\20\0\15\27\3\0\32\27\26\0\15\30\4\0\1\30\3\0"+
    "\14\30\21\0\1\27\4\0\1\27\2\0\12\27\1\0\1\27\3\0"+
    "\5\27\6\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27\1\0"+
    "\13\27\2\0\4\27\5\0\5\27\4\0\1\27\21\0\51\27\u0a77\0"+
    "\57\27\1\0\57\27\1\0\205\27\6\0\4\27\3\30\16\0\46\27"+
    "\12\0\66\27\11\0\1\27\17\0\1\30\27\27\11\0\7\27\1\0"+
    "\7\27\1\0\7\27\1\0\7\27\1\0\7\27\1\0\7\27\1\0"+
    "\7\27\1\0\7\27\1\0\40\30\57\0\1\27\u01d5\0\3\27\31\0"+
    "\11\27\6\30\1\0\5\27\2\0\5\27\4\0\126\27\2\0\2\30"+
    "\2\0\3\27\1\0\132\27\1\0\4\27\5\0\51\27\3\0\136\27"+
    "\21\0\33\27\65\0\20\27\u0200\0\u19b6\27\112\0\u51cc\27\64\0\u048d\27"+
    "\103\0\56\27\2\0\u010d\27\3\0\20\27\12\31\2\27\24\0\57\27"+
    "\1\30\14\0\2\30\1\0\31\27\10\0\120\27\2\30\45\0\11\27"+
    "\2\0\147\27\2\0\4\27\1\0\2\27\16\0\12\27\120\0\10\27"+
    "\1\30\3\27\1\30\4\27\1\30\27\27\5\30\20\0\1\27\7\0"+
    "\64\27\14\0\2\30\62\27\21\30\13\0\12\31\6\0\22\30\6\27"+
    "\3\0\1\27\4\0\12\31\34\27\10\30\2\0\27\27\15\30\14\0"+
    "\35\27\3\0\4\30\57\27\16\30\16\0\1\27\12\31\46\0\51\27"+
    "\16\30\11\0\3\27\1\30\10\27\2\30\2\0\12\31\6\0\27\27"+
    "\3\0\1\27\1\30\4\0\60\27\1\30\1\27\3\30\2\27\2\30"+
    "\5\27\2\30\1\27\1\30\1\27\30\0\3\27\43\0\6\27\2\0"+
    "\6\27\2\0\6\27\11\0\7\27\1\0\7\27\221\0\43\27\10\30"+
    "\1\0\2\30\2\0\12\31\6\0\u2ba4\27\14\0\27\27\4\0\61\27"+
    "\u2104\0\u012e\27\2\0\76\27\2\0\152\27\46\0\7\27\14\0\5\27"+
    "\5\0\1\27\1\30\12\27\1\0\15\27\1\0\5\27\1\0\1\27"+
    "\1\0\2\27\1\0\2\27\1\0\154\27\41\0\u016b\27\22\0\100\27"+
    "\2\0\66\27\50\0\15\27\3\0\20\30\20\0\7\30\14\0\2\27"+
    "\30\0\3\27\31\0\1\27\6\0\5\27\1\0\207\27\2\0\1\30"+
    "\4\0\1\27\13\0\12\31\7\0\32\27\4\0\1\27\1\0\32\27"+
    "\13\0\131\27\3\0\6\27\2\0\6\27\2\0\6\27\2\0\3\27"+
    "\3\0\2\27\3\0\2\27\22\0\3\30\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\7\11\1\12\1\13\1\14\2\15\1\16\2\1"+
    "\1\17\1\20\1\21\6\11\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\2\1"+
    "\1\35\1\1\1\35\4\36\2\0\1\37\2\0\1\40"+
    "\2\0\1\41\1\42\1\43\1\0\4\11\1\44\1\45"+
    "\4\11\1\46\1\15\1\47\3\0\1\50\1\51\1\0"+
    "\1\52\1\1\1\0\1\1\1\53\10\11\1\54\4\11"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\0\1\65\3\0\1\66\4\0\1\67\1\70"+
    "\1\0\6\11\1\71\5\11\1\72\1\47\1\73\2\0"+
    "\1\15\1\0\1\15\2\0\2\11\1\74\2\11\1\75"+
    "\5\11\1\76\1\11\1\77\1\100\4\0\1\101\1\11"+
    "\1\102\5\11\1\103\2\11\1\104\1\105\2\0\1\106"+
    "\1\0\4\11\1\107\2\11\1\110\1\11\1\111\3\0"+
    "\1\11\1\112\4\11\1\113\1\106\1\114\1\11\1\115"+
    "\1\11\1\116\2\11\1\117\2\0\1\120\1\121\1\11"+
    "\1\122\1\11\1\123\2\11\1\124\1\11\2\0\2\11"+
    "\1\125\1\11\1\126\1\0\1\127\1\11\1\130\1\131"+
    "\1\11\1\132";

  private static int [] zzUnpackAction() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\364\0\u0225\0\364\0\u0262\0\u029f\0\u02dc\0\u0319"+
    "\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501"+
    "\0\u053e\0\u057b\0\u05b8\0\u05f5\0\364\0\364\0\u0632\0\u066f"+
    "\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857"+
    "\0\u0894\0\364\0\364\0\364\0\364\0\364\0\364\0\u08d1"+
    "\0\u0225\0\u090e\0\u094b\0\u0988\0\364\0\u09c5\0\u0225\0\u0a02"+
    "\0\u08d1\0\u0225\0\u0a3f\0\u0a7c\0\u0ab9\0\364\0\u0af6\0\u0b33"+
    "\0\364\0\u0b70\0\364\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1"+
    "\0\u0356\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c"+
    "\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\364\0\364\0\u0f7d\0\364"+
    "\0\u0fba\0\u0ff7\0\u1034\0\364\0\u1071\0\u10ae\0\u10eb\0\u1128"+
    "\0\u1165\0\u11a2\0\u11df\0\u121c\0\u0356\0\u1259\0\u1296\0\u12d3"+
    "\0\u1310\0\u134d\0\364\0\364\0\364\0\364\0\364\0\364"+
    "\0\364\0\364\0\u138a\0\u138a\0\u13c7\0\u1404\0\u1441\0\364"+
    "\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572\0\364\0\u15af\0\u15ec"+
    "\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u0356\0\u175a\0\u1797"+
    "\0\u17d4\0\u1811\0\u184e\0\364\0\u188b\0\u18c8\0\u1905\0\u1942"+
    "\0\u197f\0\u197f\0\u0f40\0\u0fba\0\u1034\0\u19bc\0\u19f9\0\u0356"+
    "\0\u1a36\0\u1a73\0\u0356\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4"+
    "\0\u0356\0\u1be1\0\364\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12"+
    "\0\364\0\u1d4f\0\u0356\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80"+
    "\0\u0356\0\u1ebd\0\u1efa\0\u0356\0\u0356\0\u1f37\0\u1f74\0\u1f74"+
    "\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u0356\0\u20e2\0\u211f"+
    "\0\u0356\0\u215c\0\u0356\0\u2199\0\u21d6\0\u2213\0\u2250\0\u0356"+
    "\0\u228d\0\u22ca\0\u2307\0\u2344\0\u0356\0\364\0\364\0\u2381"+
    "\0\u0356\0\u23be\0\u0356\0\u23fb\0\u2438\0\u0356\0\u2475\0\u24b2"+
    "\0\364\0\u0356\0\u24ef\0\u0356\0\u252c\0\u0356\0\u2569\0\u25a6"+
    "\0\u0356\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7\0\u0356\0\u2714"+
    "\0\u0356\0\u2751\0\u0356\0\u278e\0\u0356\0\364\0\u27cb\0\u0356";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\6\1\15\1\16\1\17\1\20\1\21\1\22\1\21"+
    "\1\23\1\24\1\25\1\26\4\21\1\5\1\27\1\30"+
    "\2\21\1\27\1\21\1\31\1\32\1\5\1\33\1\34"+
    "\1\35\1\36\2\21\1\37\1\40\3\21\1\41\1\21"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\5\1\6"+
    "\1\60\3\5\1\61\1\5\1\6\12\5\1\62\14\5"+
    "\1\63\1\5\1\63\33\5\1\6\1\60\3\5\1\61"+
    "\1\5\1\6\12\5\1\64\14\5\1\63\1\5\1\63"+
    "\32\5\1\65\1\6\1\66\3\65\1\67\1\65\1\6"+
    "\27\65\1\70\1\65\1\70\32\65\76\0\1\6\1\71"+
    "\3\0\1\72\1\0\1\6\66\0\1\73\1\74\1\0"+
    "\1\75\13\0\1\76\1\0\1\77\1\100\71\0\1\101"+
    "\57\0\1\102\14\0\1\103\56\0\1\104\102\0\10\21"+
    "\3\0\13\21\7\0\12\21\1\105\1\21\24\0\10\21"+
    "\3\0\13\21\7\0\4\21\1\106\1\21\1\107\5\21"+
    "\24\0\7\21\1\110\3\0\13\21\7\0\14\21\24\0"+
    "\10\21\3\0\13\21\7\0\2\21\1\111\4\21\1\112"+
    "\4\21\24\0\10\21\3\0\13\21\7\0\14\21\24\0"+
    "\2\21\1\113\3\21\1\114\1\21\3\0\1\115\12\21"+
    "\7\0\14\21\24\0\10\21\3\0\2\21\1\116\10\21"+
    "\7\0\14\21\34\0\1\117\104\0\2\120\2\0\1\120"+
    "\62\0\1\121\17\0\1\122\51\0\1\123\1\0\1\120"+
    "\6\0\2\27\2\0\1\27\1\123\56\0\1\123\1\0"+
    "\1\120\6\0\2\27\1\124\1\0\1\27\1\123\10\0"+
    "\1\124\46\0\1\125\15\0\1\126\35\0\1\127\1\0"+
    "\36\127\1\130\1\131\33\127\1\132\1\0\37\132\1\133"+
    "\1\130\32\132\21\0\1\134\64\0\3\21\1\135\4\21"+
    "\3\0\13\21\7\0\4\21\1\136\1\21\1\137\1\21"+
    "\1\140\3\21\24\0\2\21\1\141\5\21\3\0\13\21"+
    "\7\0\14\21\24\0\7\21\1\142\3\0\13\21\7\0"+
    "\10\21\1\143\3\21\24\0\7\21\1\144\3\0\13\21"+
    "\7\0\6\21\1\145\5\21\24\0\3\21\1\146\4\21"+
    "\3\0\1\147\12\21\7\0\14\21\24\0\10\21\3\0"+
    "\13\21\7\0\4\21\1\150\1\21\1\151\5\21\34\0"+
    "\1\152\74\0\1\153\41\0\1\154\32\0\1\155\42\0"+
    "\1\156\31\0\1\157\43\0\1\160\30\0\1\161\56\0"+
    "\1\74\1\0\1\75\110\0\1\162\114\0\1\5\33\0"+
    "\1\163\1\0\17\163\1\164\1\163\1\0\15\163\1\165"+
    "\2\163\1\166\30\163\3\0\1\74\1\0\1\75\3\0"+
    "\1\167\124\0\1\65\54\0\1\170\53\0\3\74\1\171"+
    "\71\74\5\75\1\172\67\75\11\0\1\173\101\0\1\174"+
    "\62\0\1\175\14\0\1\176\53\0\3\104\1\177\71\104"+
    "\11\0\3\21\1\200\4\21\3\0\13\21\7\0\14\21"+
    "\24\0\1\201\4\21\1\202\2\21\3\0\13\21\7\0"+
    "\14\21\24\0\10\21\3\0\13\21\7\0\7\21\1\203"+
    "\4\21\24\0\5\21\1\204\2\21\3\0\13\21\7\0"+
    "\14\21\24\0\1\205\7\21\3\0\13\21\7\0\14\21"+
    "\24\0\6\21\1\206\1\21\3\0\13\21\7\0\10\21"+
    "\1\207\3\21\24\0\4\21\1\210\3\21\3\0\13\21"+
    "\7\0\14\21\24\0\2\21\1\211\1\212\4\21\3\0"+
    "\13\21\7\0\14\21\24\0\1\213\7\21\3\0\13\21"+
    "\7\0\14\21\34\0\1\214\73\0\1\123\10\0\2\120"+
    "\2\0\1\120\1\123\36\0\1\215\1\0\21\215\1\216"+
    "\51\215\43\217\1\220\31\217\31\0\2\221\2\0\1\221"+
    "\1\0\1\222\25\0\1\222\21\0\1\223\5\0\1\223"+
    "\11\0\1\223\1\0\3\223\11\0\3\223\4\0\1\223"+
    "\15\0\1\127\1\0\36\127\1\130\1\224\130\127\1\132"+
    "\1\0\37\132\1\225\1\130\127\132\11\0\10\21\3\0"+
    "\13\21\7\0\7\21\1\226\4\21\24\0\10\21\3\0"+
    "\2\21\1\227\10\21\7\0\14\21\24\0\2\21\1\230"+
    "\5\21\3\0\13\21\7\0\14\21\24\0\10\21\3\0"+
    "\13\21\7\0\7\21\1\231\4\21\24\0\7\21\1\232"+
    "\3\0\13\21\7\0\14\21\24\0\10\21\3\0\13\21"+
    "\7\0\12\21\1\233\1\21\24\0\10\21\3\0\2\21"+
    "\1\234\10\21\7\0\14\21\24\0\10\21\3\0\2\21"+
    "\1\235\10\21\7\0\2\21\1\236\11\21\24\0\5\21"+
    "\1\237\2\21\3\0\13\21\7\0\14\21\24\0\3\21"+
    "\1\240\4\21\3\0\13\21\7\0\14\21\24\0\2\21"+
    "\1\241\5\21\3\0\13\21\7\0\14\21\24\0\3\21"+
    "\1\242\4\21\3\0\13\21\7\0\14\21\34\0\1\243"+
    "\53\0\1\163\1\0\21\163\1\244\15\163\1\165\2\163"+
    "\1\166\31\163\1\0\73\163\1\166\1\0\37\166\1\245"+
    "\3\166\1\163\27\166\12\0\1\246\62\0\3\74\1\171"+
    "\1\6\70\74\4\75\1\6\1\172\67\75\12\0\1\247"+
    "\107\0\1\250\70\0\1\251\53\0\3\104\1\177\3\104"+
    "\1\6\65\104\11\0\5\21\1\252\2\21\3\0\13\21"+
    "\7\0\14\21\24\0\7\21\1\253\3\0\13\21\7\0"+
    "\14\21\24\0\1\21\1\254\6\21\3\0\13\21\7\0"+
    "\14\21\24\0\1\255\4\21\1\256\2\21\3\0\13\21"+
    "\7\0\14\21\24\0\10\21\3\0\13\21\7\0\10\21"+
    "\1\257\3\21\24\0\5\21\1\260\2\21\3\0\13\21"+
    "\7\0\14\21\24\0\7\21\1\261\3\0\13\21\7\0"+
    "\14\21\24\0\7\21\1\262\3\0\13\21\7\0\14\21"+
    "\24\0\10\21\3\0\13\21\7\0\6\21\1\263\5\21"+
    "\24\0\1\264\7\21\3\0\13\21\7\0\14\21\24\0"+
    "\7\21\1\265\3\0\13\21\7\0\14\21\13\0\1\215"+
    "\1\0\73\215\1\216\1\0\73\216\43\217\1\266\31\217"+
    "\23\267\1\270\17\267\1\271\31\267\31\0\2\221\2\0"+
    "\1\221\50\0\10\21\3\0\13\21\7\0\4\21\1\272"+
    "\7\21\24\0\1\273\7\21\3\0\13\21\7\0\14\21"+
    "\24\0\1\21\1\274\6\21\3\0\13\21\7\0\14\21"+
    "\24\0\10\21\3\0\13\21\7\0\4\21\1\275\7\21"+
    "\24\0\10\21\3\0\2\21\1\276\10\21\7\0\14\21"+
    "\24\0\7\21\1\277\3\0\13\21\7\0\14\21\24\0"+
    "\10\21\3\0\13\21\7\0\4\21\1\300\7\21\24\0"+
    "\10\21\3\0\1\301\12\21\7\0\14\21\24\0\10\21"+
    "\3\0\2\21\1\302\10\21\7\0\14\21\24\0\10\21"+
    "\3\0\13\21\7\0\11\21\1\303\2\21\24\0\10\244"+
    "\3\0\3\244\17\0\14\244\13\0\1\166\1\0\73\166"+
    "\13\0\1\304\74\0\1\305\107\0\1\306\57\0\1\21"+
    "\1\307\6\21\3\0\13\21\7\0\14\21\24\0\10\21"+
    "\3\0\1\310\12\21\7\0\14\21\24\0\5\21\1\241"+
    "\2\21\3\0\13\21\7\0\14\21\24\0\3\21\1\311"+
    "\4\21\3\0\13\21\7\0\14\21\24\0\2\21\1\312"+
    "\5\21\3\0\13\21\7\0\14\21\24\0\10\21\3\0"+
    "\13\21\7\0\4\21\1\313\7\21\24\0\10\21\3\0"+
    "\13\21\7\0\6\21\1\314\5\21\24\0\10\21\3\0"+
    "\13\21\7\0\12\21\1\315\1\21\13\0\23\217\1\316"+
    "\17\217\1\266\31\217\43\267\1\271\54\267\1\317\17\267"+
    "\1\271\31\267\11\0\10\21\3\0\2\21\1\320\10\21"+
    "\7\0\14\21\24\0\7\21\1\321\3\0\13\21\7\0"+
    "\14\21\24\0\5\21\1\322\2\21\3\0\13\21\7\0"+
    "\14\21\24\0\10\21\3\0\13\21\7\0\5\21\1\323"+
    "\6\21\24\0\5\21\1\324\2\21\3\0\13\21\7\0"+
    "\14\21\24\0\10\21\3\0\13\21\7\0\10\21\1\325"+
    "\3\21\24\0\7\21\1\326\3\0\13\21\7\0\14\21"+
    "\27\0\1\327\74\0\1\330\64\0\1\331\101\0\10\21"+
    "\3\0\1\332\12\21\7\0\14\21\24\0\10\21\3\0"+
    "\13\21\7\0\7\21\1\333\4\21\24\0\10\21\3\0"+
    "\13\21\7\0\7\21\1\334\4\21\24\0\10\21\3\0"+
    "\13\21\7\0\7\21\1\335\4\21\24\0\10\21\3\0"+
    "\13\21\7\0\2\21\1\336\11\21\24\0\10\21\3\0"+
    "\2\21\1\337\10\21\7\0\14\21\24\0\3\21\1\340"+
    "\4\21\3\0\13\21\7\0\14\21\24\0\7\21\1\341"+
    "\3\0\13\21\7\0\14\21\24\0\10\21\3\0\2\21"+
    "\1\342\10\21\7\0\14\21\30\0\1\343\74\0\1\344"+
    "\70\0\10\21\3\0\13\21\7\0\10\21\1\345\3\21"+
    "\24\0\1\21\1\346\6\21\3\0\13\21\7\0\14\21"+
    "\24\0\6\21\1\347\1\21\3\0\13\21\7\0\14\21"+
    "\24\0\10\21\3\0\13\21\7\0\6\21\1\350\5\21"+
    "\24\0\5\21\1\351\2\21\3\0\13\21\7\0\14\21"+
    "\31\0\1\352\74\0\1\306\67\0\7\21\1\353\3\0"+
    "\13\21\7\0\14\21\24\0\7\21\1\354\3\0\13\21"+
    "\7\0\14\21\24\0\10\21\3\0\13\21\7\0\7\21"+
    "\1\355\4\21\13\0\4\352\1\356\70\352\11\0\10\21"+
    "\3\0\13\21\7\0\6\21\1\357\5\21\24\0\10\21"+
    "\3\0\13\21\7\0\2\21\1\360\11\21\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10248];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\4\1\1\11\1\1\1\11\20\1\2\11"+
    "\13\1\6\11\5\1\1\11\3\1\2\0\1\1\2\0"+
    "\1\11\2\0\1\11\1\1\1\11\1\0\15\1\3\0"+
    "\2\11\1\0\1\11\1\1\1\0\1\1\1\11\16\1"+
    "\10\11\1\0\1\1\3\0\1\11\4\0\1\1\1\11"+
    "\1\0\14\1\1\11\2\1\2\0\1\1\1\0\1\1"+
    "\2\0\15\1\1\11\1\1\4\0\1\11\14\1\2\0"+
    "\1\1\1\0\12\1\3\0\7\1\2\11\7\1\2\0"+
    "\1\11\11\1\2\0\5\1\1\0\3\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	// last token used for look behind. Also needed when implementing the ITokenScanner interface
	private Symbol _lastToken;
	
	private StringPool _stringPool;

	// flag indicating if we should collect comments or not
	private boolean _collectComments = true;

	// accumulator of consecutive vsdoc lines, later added to vsdocComments as a single entity
	private List<Symbol> _vsdocAccumulator = new ArrayList<Symbol>();

	// comment collections, by type
	private List<Symbol> _sdocComments = new ArrayList<Symbol>();
	private List<Symbol> _vsdocComments = new ArrayList<Symbol>();
	private List<Symbol> _singleLineComments = new ArrayList<Symbol>();
	private List<Symbol> _multiLineComments = new ArrayList<Symbol>();

	public JSFlexScanner()
	{
		this((Reader) null);
	}

	public Symbol getLastToken()
	{
		return _lastToken;
	}

	public List<Symbol> getSDocComments()
	{
		return _sdocComments;
	}

	public List<Symbol> getVSDocComments()
	{
		return _vsdocComments;
	}

	public List<Symbol> getSingleLineComments()
	{
		return _singleLineComments;
	}

	public List<Symbol> getMultiLineComments()
	{
		return _multiLineComments;
	}

	private Symbol newToken(JSTokenType type, Object value)
	{
		return newToken(type.getIndex(), value);
	}

	private Symbol newToken(JSTokenType type)
	{
		return newToken(type.getIndex(), type.getName());
	}
	
	private String pool(String value)
	{
		return _stringPool.add(value);
	}

	private Symbol newToken(short id, Object value)
	{
		return new Symbol(id, yychar, yychar + yylength() - 1, value);
	}

	public Symbol nextToken() throws java.io.IOException, Scanner.Exception
	{
		// clear accumulators
		_vsdocAccumulator.clear();

		try
		{
			// get next token
			_lastToken = yylex();
		} 
		catch (Scanner.Exception e)
		{
			// create default token type
			String text = yytext();
			int end = yychar + text.length() - 1;

			_lastToken = new Symbol(JSTokenType.EOF.getIndex(), yychar, end, text);
		}
		finally
		{
			// process any accumulated vsdoc lines
			if (!_vsdocAccumulator.isEmpty())
			{
				Symbol vsdoc = newToken(JSTokenType.VSDOC, new ArrayList<Symbol>(_vsdocAccumulator));

				_vsdocComments.add(vsdoc);
			}
		}

		return _lastToken;
	}

	private boolean isValidDivisionStart()
	{
		if (_lastToken != null)
		{
			switch (_lastToken.getId())
			{
				case Terminals.IDENTIFIER:
				case Terminals.NUMBER:
				case Terminals.REGEX:
				case Terminals.STRING:
				case Terminals.RPAREN:
				case Terminals.PLUS_PLUS:
				case Terminals.MINUS_MINUS:
				case Terminals.RBRACKET:
				case Terminals.RCURLY:
				case Terminals.FALSE:
				case Terminals.NULL:
				case Terminals.THIS:
				case Terminals.TRUE:
					return true;
			}
		}

		return false;
	}

	public void setCollectComments(boolean flag)
	{
		_collectComments = flag;
	}

	public void setSource(String source)
	{
		yyreset(new StringReader(source));

		_stringPool = new StringPool();

		// clear last token
		_lastToken = null;

		// reset comment collection lists
		_singleLineComments.clear();
		_multiLineComments.clear();
		_sdocComments.clear();
		_vsdocComments.clear();
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JSFlexScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JSFlexScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2234) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 12: 
          { yypushback(1);
						if (isValidDivisionStart())
						{
							yybegin(DIVISION);
						}
						else
						{
							yybegin(REGEX);
						}
          }
        case 91: break;
        case 39: 
          { if (_collectComments)
							{
								_singleLineComments.add(newToken(JSTokenType.SINGLELINE_COMMENT, yytext()));
							}
          }
        case 92: break;
        case 53: 
          { yybegin(YYINITIAL);
						return newToken(JSTokenType.FORWARD_SLASH_EQUAL);
          }
        case 93: break;
        case 48: 
          { return newToken(JSTokenType.PIPE_EQUAL);
          }
        case 94: break;
        case 60: 
          { return newToken(JSTokenType.FOR);
          }
        case 95: break;
        case 24: 
          { return newToken(JSTokenType.SEMICOLON);
          }
        case 96: break;
        case 61: 
          { return newToken(JSTokenType.NEW);
          }
        case 97: break;
        case 41: 
          { return newToken(JSTokenType.PLUS_PLUS);
          }
        case 98: break;
        case 55: 
          { return newToken(JSTokenType.GREATER_GREATER_GREATER);
          }
        case 99: break;
        case 82: 
          { return newToken(JSTokenType.RETURN);
          }
        case 100: break;
        case 77: 
          { return newToken(JSTokenType.FALSE);
          }
        case 101: break;
        case 16: 
          { return newToken(JSTokenType.LBRACKET);
          }
        case 102: break;
        case 83: 
          { return newToken(JSTokenType.TYPEOF);
          }
        case 103: break;
        case 88: 
          { return newToken(JSTokenType.FUNCTION);
          }
        case 104: break;
        case 37: 
          { return newToken(JSTokenType.IN);
          }
        case 105: break;
        case 43: 
          { return newToken(JSTokenType.STAR_EQUAL);
          }
        case 106: break;
        case 51: 
          { return newToken(JSTokenType.MINUS_MINUS);
          }
        case 107: break;
        case 13: 
          { return newToken(Terminals.NUMBER, pool(yytext()));
          }
        case 108: break;
        case 46: 
          { return newToken(JSTokenType.AMPERSAND_EQUAL);
          }
        case 109: break;
        case 78: 
          { return newToken(JSTokenType.BREAK);
          }
        case 110: break;
        case 57: 
          { return newToken(JSTokenType.TRY);
          }
        case 111: break;
        case 35: 
          { return newToken(JSTokenType.GREATER_EQUAL);
          }
        case 112: break;
        case 65: 
          { return newToken(JSTokenType.GREATER_GREATER_GREATER_EQUAL);
          }
        case 113: break;
        case 50: 
          { return newToken(JSTokenType.MINUS_EQUAL);
          }
        case 114: break;
        case 40: 
          { return newToken(JSTokenType.PLUS_EQUAL);
          }
        case 115: break;
        case 59: 
          { if (_collectComments)
							{
								_vsdocAccumulator.add(newToken(JSTokenType.VSDOC, yytext()));
							}
          }
        case 116: break;
        case 63: 
          { return newToken(JSTokenType.EXCLAMATION_EQUAL_EQUAL);
          }
        case 117: break;
        case 11: 
          { return newToken(JSTokenType.DOT);
          }
        case 118: break;
        case 66: 
          { return newToken(JSTokenType.CASE);
          }
        case 119: break;
        case 21: 
          { return newToken(JSTokenType.MINUS);
          }
        case 120: break;
        case 17: 
          { return newToken(JSTokenType.RBRACKET);
          }
        case 121: break;
        case 42: 
          { return newToken(Terminals.STRING, pool(yytext()));
          }
        case 122: break;
        case 10: 
          { return newToken(JSTokenType.EQUAL);
          }
        case 123: break;
        case 18: 
          { return newToken(JSTokenType.EXCLAMATION);
          }
        case 124: break;
        case 15: 
          { return newToken(JSTokenType.STAR);
          }
        case 125: break;
        case 36: 
          { return newToken(JSTokenType.IF);
          }
        case 126: break;
        case 28: 
          { return newToken(JSTokenType.COLON);
          }
        case 127: break;
        case 26: 
          { return newToken(JSTokenType.RPAREN);
          }
        case 128: break;
        case 73: 
          { return newToken(JSTokenType.VOID);
          }
        case 129: break;
        case 23: 
          { return newToken(JSTokenType.TILDE);
          }
        case 130: break;
        case 31: 
          { return newToken(JSTokenType.LESS_LESS);
          }
        case 131: break;
        case 58: 
          { return newToken(JSTokenType.EQUAL_EQUAL_EQUAL);
          }
        case 132: break;
        case 87: 
          { return newToken(JSTokenType.CONTINUE);
          }
        case 133: break;
        case 49: 
          { return newToken(JSTokenType.PIPE_PIPE);
          }
        case 134: break;
        case 30: 
          { /* ignore inside HTML */
          }
        case 135: break;
        case 3: 
          { return newToken(JSTokenType.LESS);
          }
        case 136: break;
        case 5: 
          { return newToken(JSTokenType.GREATER);
          }
        case 137: break;
        case 79: 
          { return newToken(JSTokenType.WHILE);
          }
        case 138: break;
        case 69: 
          { return newToken(JSTokenType.ELSE);
          }
        case 139: break;
        case 76: 
          { if (_collectComments)
							{
								_sdocComments.add(newToken(JSTokenType.SDOC, yytext()));
							}
          }
        case 140: break;
        case 74: 
          { return newToken(JSTokenType.CATCH);
          }
        case 141: break;
        case 34: 
          { return newToken(JSTokenType.GREATER_GREATER);
          }
        case 142: break;
        case 27: 
          { return newToken(JSTokenType.COMMA);
          }
        case 143: break;
        case 62: 
          { return newToken(JSTokenType.VAR);
          }
        case 144: break;
        case 32: 
          { return newToken(JSTokenType.LESS_EQUAL);
          }
        case 145: break;
        case 29: 
          { yybegin(YYINITIAL);
						return newToken(JSTokenType.FORWARD_SLASH);
          }
        case 146: break;
        case 81: 
          { return newToken(JSTokenType.SWITCH);
          }
        case 147: break;
        case 22: 
          { return newToken(JSTokenType.CARET);
          }
        case 148: break;
        case 25: 
          { return newToken(JSTokenType.LPAREN);
          }
        case 149: break;
        case 90: 
          { return newToken(JSTokenType.INSTANCEOF);
          }
        case 150: break;
        case 56: 
          { return newToken(JSTokenType.GREATER_GREATER_EQUAL);
          }
        case 151: break;
        case 89: 
          { yybegin(YYINITIAL);
          }
        case 152: break;
        case 8: 
          { return newToken(JSTokenType.RCURLY);
          }
        case 153: break;
        case 4: 
          { return newToken(JSTokenType.PERCENT);
          }
        case 154: break;
        case 84: 
          { return newToken(JSTokenType.DELETE);
          }
        case 155: break;
        case 33: 
          { return newToken(JSTokenType.PERCENT_EQUAL);
          }
        case 156: break;
        case 52: 
          { return newToken(JSTokenType.CARET_EQUAL);
          }
        case 157: break;
        case 38: 
          { return newToken(JSTokenType.EQUAL_EQUAL);
          }
        case 158: break;
        case 85: 
          { return newToken(JSTokenType.FINALLY);
          }
        case 159: break;
        case 9: 
          { return newToken(Terminals.IDENTIFIER, pool(yytext()));
          }
        case 160: break;
        case 20: 
          { return newToken(JSTokenType.PIPE);
          }
        case 161: break;
        case 45: 
          { return newToken(JSTokenType.EXCLAMATION_EQUAL);
          }
        case 162: break;
        case 54: 
          { return newToken(JSTokenType.LESS_LESS_EQUAL);
          }
        case 163: break;
        case 70: 
          { if (_collectComments)
							{
								_multiLineComments.add(newToken(JSTokenType.MULTILINE_COMMENT, yytext()));
							}
          }
        case 164: break;
        case 2: 
          { /* ignore */
          }
        case 165: break;
        case 67: 
          { return newToken(JSTokenType.TRUE);
          }
        case 166: break;
        case 80: 
          { yybegin(HTML);
          }
        case 167: break;
        case 64: 
          { yybegin(YYINITIAL);
						return newToken(Terminals.REGEX, pool(yytext()));
          }
        case 168: break;
        case 47: 
          { return newToken(JSTokenType.AMPERSAND_AMPERSAND);
          }
        case 169: break;
        case 86: 
          { return newToken(JSTokenType.DEFAULT);
          }
        case 170: break;
        case 75: 
          { return newToken(JSTokenType.THROW);
          }
        case 171: break;
        case 71: 
          { return newToken(JSTokenType.NULL);
          }
        case 172: break;
        case 72: 
          { return newToken(JSTokenType.WITH);
          }
        case 173: break;
        case 7: 
          { return newToken(JSTokenType.LCURLY);
          }
        case 174: break;
        case 14: 
          { return newToken(JSTokenType.PLUS);
          }
        case 175: break;
        case 1: 
          { // make sure we reset the lexer state for next (potential) scan
				yybegin(YYINITIAL);
				throw new Scanner.Exception("Unexpected character '" + yytext() + "' around offset " + yychar);
          }
        case 176: break;
        case 6: 
          { return newToken(JSTokenType.QUESTION);
          }
        case 177: break;
        case 19: 
          { return newToken(JSTokenType.AMPERSAND);
          }
        case 178: break;
        case 68: 
          { return newToken(JSTokenType.THIS);
          }
        case 179: break;
        case 44: 
          { return newToken(JSTokenType.DO);
          }
        case 180: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	return newToken(Terminals.EOF, "end-of-file");
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
