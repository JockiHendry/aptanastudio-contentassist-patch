package com.aptana.editor.css.parsing;

import com.aptana.parsing.ast.ParseError;
import com.aptana.parsing.util.ParseUtil;
import beaver.*;
import com.aptana.editor.css.parsing.ast.*;
import com.aptana.editor.css.ICSSConstants;
import com.aptana.parsing.IParser;
import com.aptana.parsing.ast.IParseNode;
import com.aptana.parsing.ast.IParseError;
import com.aptana.parsing.WorkingParseResult;
import java.util.ArrayList;
import com.aptana.parsing.ast.ParseRootNode;
import java.util.List;
import com.aptana.parsing.ast.IParseRootNode;
import com.aptana.parsing.IParseState;
import com.aptana.parsing.ParseResult;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "CSS.grammar".
 */
@SuppressWarnings({ "unchecked", "rawtypes" })
public class CSSParser extends Parser implements IParser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pLM6TuL4KKFM#NI18YY60IK4H4WgWiMJ0a8PG4M4GW9FRUiL2DDAdI4JKIce9230eY2aX" +
		"JEeAAg82WWjX5xBrWnt8zStVOl4rs#HRzevllpBrpvjpxfhtPsG2U4Yp2OZoELLYE5LY9PL" +
		"YArNWIJs09rc8TrcC3Dk8fRC9cl8GrU15FumGyYoru3bln39x72zY6bx4TEr0TEx4Bh#3LV" +
		"v2pHfISjuLopa49Hg4Vfc0M6gC0yr4JDw0Q7aKZL44SZa9Ln2C1YKZ2rSX29tZGdUL0f28J" +
		"jL07sN8JMg4Pqk57SxJ0cSX0IxQsHp5Rf#9k3C4jk5LZ9wC30iX3HyQUXad8nfqHOjjfRF9" +
		"XOi$53CRU6o6scB7bSOzXBkCQoAHGR0hoTSnfOMC#DkgOJrNrYM7grghsHb0RRPSmRTTeMl" +
		"cBVJt7rTVpK9jzJHMfC6$7OJVvAt4#JiBnE1frSJ6km7KuHjV1u2IKXl7tANiZyvIwyjoFU" +
		"inZMeensyNde3xvXRY4UQwgb7yWhgcKtwp6jTfQYhEv6Ztm05VZv0YhqKQr9RZUpaac9g8F" +
		"jRqZQ8DAa$LcpMgyR9mIHJb0smUhieWhaeqB8YZDUWoopnw0eLoFmLoFXpa3mrqpC03pE0E" +
		"3LJt2gaVAHAeVfFeX5Ci4z0#fRsVqP5Vz3gsxvxCpwpwr2sZFGXcQuYxQ8jeSvHyXFmpJCH" +
		"fDoDz3lYt6O2pRnc6yniu4Q7FHZMsWpL7h8yo#CWp8d8v2je3Mj00DYJDiYz6PEGBd2DGP$" +
		"oBwXh#GpANA598vfBeSbsdhJI6cqEw1NgoLeAVEJLzCO2qurluHl19wGLsqppGuF4My5Tw8" +
		"Qdn$ZkPfLuCxh2RVo5fy7uxZAP32iwGETz$nF27hyKsip$tOWBkj8VT68yOsvZlQXAV9aUT" +
		"CYfBJ2UKq#odUxYSVQvbShMpkinpkhZPSitPSXpoUE1ruiZZQWyws7$7yo#Vpg$4Thzo3UF" +
		"R0qNFXK7zDL6BOgDBPtZnAxyspeiTweyOwZ2sFErldg2xdmZroC#Qai34dHHspLzMTmzIfK" +
		"TL6wmlJUgDgmRuaXOqnYNsDLzuzRoaSHI9NfIxNitlOUffPCQZ3izxDfoXRbsMQAy$9EXV1" +
		"c5DTl4zvl#PFgfJVooTNp6$u92tJcCNiWqBsE27YIXfL#Mp7ywtDfBPBn9KpIbEsqAp6Yvp" +
		"LjFYqzAiodIiIMHc#7Zu#sw$huV1Rg$8C67Ktgsx0lqoU545r0vSwbVL4LpsvGjsikybcR0" +
		"fjIyvi5bKjcJrBUz6Ch9yvKxad0#IJoGVqRVJnR6kgiSdybZIn0MJHQqd6M3$1UCCGvbiY0" +
		"pvwdKmBRMjNYtaEvuYrAaI6pbS2UsbueqjG9eECLP5fhQq98IR3xe44rjBP6fmRBsl1iKRo" +
		"qkcfJg9yk0U0FQFre7Hg4lMC7mlugKTaMdy8iTtcgMwvkH5YckXJuUHPRRxb5zClijnioss" +
		"nTZ#vSRIzRFkiMFleUkvIbx#NEVfQVrBiEHm$uH1BM5bGeQsgjQb43M9PiEvfR$bsz3jRxX" +
		"pxx9xa2snxRQA7zViHmwtVcFeBRDoLDcuCKMQvtaIHQspy7dJAY1OL#jUM#CvgkjFVPFdDn" +
		"DOeuxs6U8tucDXdkGEHjPv1n7LiFqXyJVyGdtYO#UnAV4LdlQtlTBNzP6sbFVH$0J#DY5N$" +
		"C3QPI8j1zoun3A7zW1tbROvOxepASSukiqv1trFrtu$LsMtjzqSmnbqsPf$PDuVNUchPc0K" +
		"khhxbDbgxtzMV4wFqCy0udzKVwZFlfvviw$DzSYQwz6EjdLaXpnnYWlMdn3RUqBbsRGpQju" +
		"Y5LZywnloDhPrXxQBoDeyzPvttOidrNmC$Uu96$fJVvQ3y9h$AB$Ap$2G$oW$A7z3oU#8xO" +
		"gayBdVA7JRcM#8RzPubdf55yfZM7fM5BEVBN2cJ4J9SXibG6IAtoc0P90DbWFINMrItd5Wc" +
		"ysIyZ9EnCaP6o#toa3neipyY2sIIF2nBPB5bdYOsgxU9U4gzZLfkq7Azbck8rSG3CaVka$j" +
		"bkanbRGfH8fFbRjKKQtcNbdsbZ$IMNj8JzYFyrIRtI97SBFracimAyVSICsIsZ9BRPAIiik" +
		"oJn3fvGafbBRsLiaB#aA$bI$b2FfVFv5FvH3wMZ#H3#K3so$koJzwJT#KTULlUaZVb3NbTz" +
		"ifhiaTsowloYhmiksIdl2GxPBjianVb1NbUjifpiaNCUJwJlq8S0hoh1t#ZvCI0DhpRj5LK" +
		"uTtS88xVLER$FmvltVzjvBBVkUnpBlkSovjN7kjvhBUdRK$RWRQ0OocWjXNzLkJCNROZRKV" +
		"6598hPDrFQ#xH#RJvhBTMU2oyl0DwzPOOH9pU2GFa0cmFgE$mVXf4jlxUSNXpzX0ExueUmh" +
		"4uYeWBsHPwqtVqpf#kTt#ljOxru$ZRmr7uBBfPT8g0BYva7I6Qkz0r0fhz3UIjTKC=");

	private WorkingParseResult fWorking;

	// Collect the errors into a list of IParseErrors
	private class CSSEvents extends Events
	{
		public void scannerError(Scanner.Exception e)
		{
		}

		public void syntaxError(Symbol token)
		{
		    System.out.println("Error at: "+token.value);
			if (token == null || fWorking == null)
			{
				return;
			}
			fWorking.addError(new ParseError(ICSSConstants.CONTENT_TYPE_CSS, token, IParseError.Severity.ERROR));
		}

		public void unexpectedTokenRemoved(Symbol token)
		{
		}

		public void missingTokenInserted(Symbol token)
		{
		}

		public void misspelledTokenReplaced(Symbol token)
		{
		}

		public void errorPhraseRemoved(Symbol error)
		{
		}
	}

    public synchronized ParseResult parse(IParseState parseState) throws java.lang.Exception
    {
        WorkingParseResult working = new WorkingParseResult();
        parse(parseState, working);
        return working.getImmutableResult();
    }


	protected synchronized void parse(IParseState parseState, WorkingParseResult working) throws java.lang.Exception
	{
		fWorking = working;
        try
        {
    		// grab source
    		String source = parseState.getSource();
    
    		// create scanner and send source to it
    		CSSFlexScanner scanner = new CSSFlexScanner();
    		scanner.setSource(source);
    
    		// parse
    		ParseRootNode result = (ParseRootNode) parse(scanner);
    
    		// attach comments to parse root node
    		List<Symbol> comments = scanner.getComments();
    		List<CSSCommentNode> commentNodes = new ArrayList<CSSCommentNode>(comments.size());
    
    		for (Symbol comment : comments)
    		{
    			// @formatter:off
    			CSSCommentNode commentNode = new CSSCommentNode(
    				source.substring(comment.getStart(), comment.getEnd() + 1),
    				comment.getStart(),
    				comment.getEnd()
    			);
    			// @formatter:on
    
    			commentNodes.add(commentNode);
    		}
    
    		result.setCommentNodes(commentNodes.toArray(new IParseNode[commentNodes.size()]));
    
    		// update node offsets
    		int start = parseState.getStartingOffset();
    		int length = source.length();
    
    		// align root with zero-based offset
    		result.setLocation(0, length - 1);
    
    		if (start != 0)
    		{
    			// shift all offsets to the correct position
    			ParseUtil.addOffset(result, start);
    		}
    
    		// store results in the parse state
    		fWorking.setParseResult(result);
        }
        finally
        {
    		fWorking = null;
		}

	}

	public CSSParser() {
		super(PARSING_TABLES);


		report = new CSSEvents();
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 0: // Program = Statements.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final CSSNode[] p = _list_p == null ? new CSSNode[0] : (CSSNode[]) _list_p.toArray(new CSSNode[_list_p.size()]);
					
			return new CSSParseRootNode(p);
			}
			case 1: // Program = 
			{
					
			return new CSSParseRootNode();
			}
			case 2: // Statements = Statements Statement
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 3: // Statements = Statement
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 13: // CharSet = CHARSET STRING.s SEMICOLON
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final String s = (String) _symbol_s.value;
					
			return new CSSCharSetNode(s);
			}
			case 14: // Import = IMPORT ImportWord.s SEMICOLON
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final String s = (String) _symbol_s.value;
					
			return new CSSImportNode(s);
			}
			case 15: // Import = IMPORT ImportWord.s List.w SEMICOLON
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final String s = (String) _symbol_s.value;
					final Symbol _symbol_w = _symbols[offset + 3];
					final List<CSSTextNode> w = (List<CSSTextNode>) _symbol_w.value;
					
			return new CSSImportNode(s, w.toArray(new CSSTextNode[w.size()]));
			}
			case 16: // Media = MEDIA_KEYWORD MediaExprs.m LCURLY RCURLY
			{
					final Symbol _symbol_m = _symbols[offset + 2];
					final ArrayList _list_m = (ArrayList) _symbol_m.value;
					final beaver.Symbol[] m = _list_m == null ? new beaver.Symbol[0] : (beaver.Symbol[]) _list_m.toArray(new beaver.Symbol[_list_m.size()]);
					
			List<CSSTextNode> list = new ArrayList<CSSTextNode>();

			for (Symbol symbol : m)
			{
				CSSTextNode text = new CSSTextNode((String) symbol.value);

				text.setLocation(symbol.getStart(), symbol.getEnd());
				list.add(text);
			}

			return new CSSMediaNode(list.toArray(new CSSTextNode[list.size()]));
			}
			case 17: // Media = MEDIA_KEYWORD MediaExprs.m LCURLY Statements.s RCURLY
			{
					final Symbol _symbol_m = _symbols[offset + 2];
					final ArrayList _list_m = (ArrayList) _symbol_m.value;
					final beaver.Symbol[] m = _list_m == null ? new beaver.Symbol[0] : (beaver.Symbol[]) _list_m.toArray(new beaver.Symbol[_list_m.size()]);
					final Symbol _symbol_s = _symbols[offset + 4];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final CSSNode[] s = _list_s == null ? new CSSNode[0] : (CSSNode[]) _list_s.toArray(new CSSNode[_list_s.size()]);
					
			List<CSSTextNode> list = new ArrayList<CSSTextNode>();

			for (Symbol symbol : m)
			{
				CSSTextNode text = new CSSTextNode((String) symbol.value);

				text.setLocation(symbol.getStart(), symbol.getEnd());
				list.add(text);
			}

			return new CSSMediaNode(list.toArray(new CSSTextNode[list.size()]), s);
			}
			case 18: // MediaExprs = MediaExprs MediaExpr
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 19: // MediaExprs = MediaExpr
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 60: // Page = PAGE LCURLY RCURLY
			{
					
			return new CSSPageNode();
			}
			case 61: // Page = PAGE LCURLY Declarations.d RCURLY
			{
					final Symbol _symbol_d = _symbols[offset + 3];
					final List<CSSDeclarationNode> d = (List<CSSDeclarationNode>) _symbol_d.value;
					
			return new CSSPageNode(d);
			}
			case 62: // Page = PAGE COLON IDENTIFIER.s LCURLY RCURLY
			{
					final Symbol _symbol_s = _symbols[offset + 3];
					final String s = (String) _symbol_s.value;
					
			CSSPageSelectorNode pageSelector = new CSSPageSelectorNode(s);
			CSSPageNode result = new CSSPageNode();

			pageSelector.setLocation(_symbol_s.getStart(), _symbol_s.getEnd());
			result.setSelector(pageSelector);

			return result;
			}
			case 63: // Page = PAGE COLON IDENTIFIER.s LCURLY Declarations.d RCURLY
			{
					final Symbol _symbol_s = _symbols[offset + 3];
					final String s = (String) _symbol_s.value;
					final Symbol _symbol_d = _symbols[offset + 5];
					final List<CSSDeclarationNode> d = (List<CSSDeclarationNode>) _symbol_d.value;
					
			CSSPageSelectorNode pageSelector = new CSSPageSelectorNode(s);
			CSSPageNode result = new CSSPageNode(d);

			pageSelector.setLocation(_symbol_s.getStart(), _symbol_s.getEnd());
			result.setSelector(pageSelector);

			return result;
			}
			case 64: // FontFace = FONTFACE LCURLY RCURLY
			{
					
			return new CSSFontFaceNode();
			}
			case 65: // FontFace = FONTFACE LCURLY Declarations.d RCURLY
			{
					final Symbol _symbol_d = _symbols[offset + 3];
					final List<CSSDeclarationNode> d = (List<CSSDeclarationNode>) _symbol_d.value;
					
			return new CSSFontFaceNode(d);
			}
			case 66: // Namespace = NAMESPACE ImportWord.w SEMICOLON
			{
					final Symbol _symbol_w = _symbols[offset + 2];
					final String w = (String) _symbol_w.value;
					
			return new CSSNamespaceNode(w);
			}
			case 67: // Namespace = NAMESPACE IDENTIFIER.i ImportWord.w SEMICOLON
			{
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_w = _symbols[offset + 3];
					final String w = (String) _symbol_w.value;
					
			return new CSSNamespaceNode(i, w);
			}
			case 68: // AtRule = AT_RULE.a STRING.s SEMICOLON
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 2];
					final String s = (String) _symbol_s.value;
					
			return new CSSAtRuleNode(a, s);
			}
			case 69: // Rules = Rules.rs Rule.r
			{
					final Symbol _symbol_rs = _symbols[offset + 1];
					final CSSList rs = (CSSList) _symbol_rs.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final CSSRuleNode r = (CSSRuleNode) _symbol_r.value;
					
			rs.addChild(r);
			
			return rs;
			}
			case 70: // Rules = Rule.r
			{
					final Symbol _symbol_r = _symbols[offset + 1];
					final CSSRuleNode r = (CSSRuleNode) _symbol_r.value;
					
			CSSList list = new CSSList();
			
			list.addChild(r);
			
			return list;
			}
			case 71: // Rule = Selectors.s LCURLY RCURLY
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final List<CSSSelectorNode> s = (List<CSSSelectorNode>) _symbol_s.value;
					
			CSSRuleNode result = new CSSRuleNode(s);

			for (CSSSelectorNode selector : s)
			{
				selector.setParent(result);
			}

			return result;
			}
			case 72: // Rule = Selectors.s LCURLY Declarations.d RCURLY
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final List<CSSSelectorNode> s = (List<CSSSelectorNode>) _symbol_s.value;
					final Symbol _symbol_d = _symbols[offset + 3];
					final List<CSSDeclarationNode> d = (List<CSSDeclarationNode>) _symbol_d.value;
					
			CSSRuleNode result = new CSSRuleNode(s, d);

			for (CSSSelectorNode selector : s)
			{
				selector.setParent(result);
			}

			CSSSelectorNode firstSelector = s.get(0);

			for (CSSDeclarationNode declaration : d)
			{
				declaration.setParent(firstSelector);
			}

			return result;
			}
			case 74: // MozDocument = MOZ_DOCUMENT FunctionList.fs LCURLY RCURLY
			{
					final Symbol _symbol_fs = _symbols[offset + 2];
					final CSSList fs = (CSSList) _symbol_fs.value;
					
			CSSMozDocument doc = new CSSMozDocument();
			
			doc.addChild(fs);
			doc.addChild(new CSSList());
			
			return doc;
			}
			case 75: // MozDocument = MOZ_DOCUMENT FunctionList.fs LCURLY Rules.rs RCURLY
			{
					final Symbol _symbol_fs = _symbols[offset + 2];
					final CSSList fs = (CSSList) _symbol_fs.value;
					final Symbol _symbol_rs = _symbols[offset + 4];
					final CSSList rs = (CSSList) _symbol_rs.value;
					
			CSSMozDocument doc = new CSSMozDocument();
			
			doc.addChild(fs);
			doc.addChild(rs);
			
			return doc;
			}
			case 76: // FunctionList = FunctionList.fs COMMA Function.f
			{
					final Symbol _symbol_fs = _symbols[offset + 1];
					final CSSList fs = (CSSList) _symbol_fs.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final CSSExpressionNode f = (CSSExpressionNode) _symbol_f.value;
					
			fs.addChild(f);
			
			return fs;
			}
			case 77: // FunctionList = Function.f
			{
					final Symbol _symbol_f = _symbols[offset + 1];
					final CSSExpressionNode f = (CSSExpressionNode) _symbol_f.value;
					
			CSSList list = new CSSList();
			
			list.addChild(f);
			
			return list;
			}
			case 78: // Function = Identifier.i LPAREN RPAREN
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					
			return new CSSFunctionNode(i, null);
			}
			case 79: // Function = Identifier.i LPAREN Expression.e RPAREN
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
					
			return new CSSFunctionNode(i, e);
			}
			case 80: // List = List COMMA IDENTIFIER.i
			{
					final Symbol _symbol_i = _symbols[offset + 3];
					final String i = (String) _symbol_i.value;
					
		List<CSSTextNode> list = (List<CSSTextNode>) _symbols[offset + 1].value;
		CSSTextNode text = new CSSTextNode(i);

		text.setLocation(_symbol_i.getStart(), _symbol_i.getEnd());
		list.add(text);

		return _symbols[offset + 1];
			}
			case 81: // List = IDENTIFIER.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					
		List<CSSTextNode> list = new ArrayList<CSSTextNode>();
		CSSTextNode text = new CSSTextNode(i);

		text.setLocation(_symbol_i.getStart(), _symbol_i.getEnd());
		list.add(text);

		return new Symbol(list);
			}
			case 82: // Declarations = Declaration.d
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final CSSDeclarationNode d = (CSSDeclarationNode) _symbol_d.value;
					
			List<CSSDeclarationNode> list = new ArrayList<CSSDeclarationNode>();

			list.add(d);

			return new Symbol(list);
			}
			case 83: // Declarations = Declaration.d SEMICOLON.s
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final CSSDeclarationNode d = (CSSDeclarationNode) _symbol_d.value;
					final Symbol s = _symbols[offset + 2];
					
			List<CSSDeclarationNode> list = new ArrayList<CSSDeclarationNode>();

			d.setHasSemicolon(s);
			list.add(d);

			return new Symbol(list);
			}
			case 84: // Declarations = Declarations.ds Declaration.d
			{
					final Symbol _symbol_ds = _symbols[offset + 1];
					final List<CSSDeclarationNode> ds = (List<CSSDeclarationNode>) _symbol_ds.value;
					final Symbol _symbol_d = _symbols[offset + 2];
					final CSSDeclarationNode d = (CSSDeclarationNode) _symbol_d.value;
					
			ds.add(d);

			return _symbols[offset + 1];
			}
			case 85: // Declarations = Declarations.ds Declaration.d SEMICOLON.s
			{
					final Symbol _symbol_ds = _symbols[offset + 1];
					final List<CSSDeclarationNode> ds = (List<CSSDeclarationNode>) _symbol_ds.value;
					final Symbol _symbol_d = _symbols[offset + 2];
					final CSSDeclarationNode d = (CSSDeclarationNode) _symbol_d.value;
					final Symbol s = _symbols[offset + 3];
					
			d.setHasSemicolon(s);
			ds.add(d);

			return _symbols[offset + 1];
			}
			case 86: // Declaration = Identifier.i COLON Expression.e
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
					
			return new CSSDeclarationNode(i, e);
			}
			case 87: // Declaration = Identifier.i COLON Expression.e IMPORTANT.s
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
					final Symbol s = _symbols[offset + 4];
					
			return new CSSDeclarationNode(i, e, s);
			}
			case 88: // Declaration = STAR.a Identifier.i COLON Expression.e
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
					
			return new CSSDeclarationNode(a + i, e);
			}
			case 89: // Declaration = STAR.a Identifier.i COLON Expression.e IMPORTANT.s
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
					final Symbol s = _symbols[offset + 5];
					
			return new CSSDeclarationNode(a + i, e, s);
			}
			case 90: // Declaration = error
			{
					
			return new CSSErrorDeclarationNode();
			}
			case 91: // Expression = Expression.e Separator.s Term.t
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 2];
					final String s = (String) _symbol_s.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final CSSExpressionNode t = (CSSExpressionNode) _symbol_t.value;
					
			return new CSSTermListNode(e, t, s);
			}
			case 92: // Expression = Expression.e Term.t
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
					final Symbol _symbol_t = _symbols[offset + 2];
					final CSSExpressionNode t = (CSSExpressionNode) _symbol_t.value;
					
			return new CSSTermListNode(e, t);
			}
			case 94: // Expression = error
			{
					
			return new CSSErrorExpressionNode();
			}
			case 95: // Term = Primitive.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final String p = (String) _symbol_p.value;
					
			return new CSSTermNode(p);
			}
			case 97: // Selectors = Selectors.ss Combinator.c Selector.s
			{
					final Symbol _symbol_ss = _symbols[offset + 1];
					final List<CSSSelectorNode> ss = (List<CSSSelectorNode>) _symbol_ss.value;
					final Symbol _symbol_c = _symbols[offset + 2];
					final String c = (String) _symbol_c.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final CSSSelectorNode s = (CSSSelectorNode) _symbol_s.value;
					
			CSSSelectorNode lastSelector = ss.get(ss.size() - 1);
			lastSelector.setCombinator(c);

			ss.add(s);

			return _symbols[offset + 1];
			}
			case 98: // Selectors = Selector.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final CSSSelectorNode s = (CSSSelectorNode) _symbol_s.value;
					
			List<CSSSelectorNode> list = new ArrayList<CSSSelectorNode>();

			list.add(s);

			return new Symbol(list);
			}
			case 99: // Selector = Selector.s SimpleSelector.ss
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final CSSSelectorNode s = (CSSSelectorNode) _symbol_s.value;
					final Symbol _symbol_ss = _symbols[offset + 2];
					final CSSSimpleSelectorNode ss = (CSSSimpleSelectorNode) _symbol_ss.value;
					
			s.addChild(ss);

			return s;
			}
			case 100: // Selector = SimpleSelector.ss
			{
					final Symbol _symbol_ss = _symbols[offset + 1];
					final CSSSimpleSelectorNode ss = (CSSSimpleSelectorNode) _symbol_ss.value;
					
			CSSSelectorNode selector = new CSSSelectorNode();

			selector.addChild(ss);

			return selector;
			}
			case 101: // SimpleSelector = TypeOrUniversalSelector.t AttributeSelectors.a
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final CSSAttributeSelectorNode[] a = _list_a == null ? new CSSAttributeSelectorNode[0] : (CSSAttributeSelectorNode[]) _list_a.toArray(new CSSAttributeSelectorNode[_list_a.size()]);
					
			return new CSSSimpleSelectorNode(t, a);
			}
			case 102: // SimpleSelector = TypeOrUniversalSelector.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final String t = (String) _symbol_t.value;
					
			return new CSSSimpleSelectorNode(t);
			}
			case 103: // SimpleSelector = AttributeSelectors.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final CSSAttributeSelectorNode[] a = _list_a == null ? new CSSAttributeSelectorNode[0] : (CSSAttributeSelectorNode[]) _list_a.toArray(new CSSAttributeSelectorNode[_list_a.size()]);
					
			return new CSSSimpleSelectorNode(a);
			}
			case 104: // SimpleSelector = TypeOrUniversalSelector.t COLON.c1 NOT.n LPAREN AttributeSelector.s RPAREN
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_c1 = _symbols[offset + 2];
					final String c1 = (String) _symbol_c1.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final CSSAttributeSelectorNode s = (CSSAttributeSelectorNode) _symbol_s.value;
					
            return new CSSSimpleSelectorNode(t + c1 + n + "(" + s + ")");
			}
			case 105: // SimpleSelector = COLON.c1 NOT.n LPAREN AttributeSelector.s RPAREN
			{
					final Symbol _symbol_c1 = _symbols[offset + 1];
					final String c1 = (String) _symbol_c1.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final CSSAttributeSelectorNode s = (CSSAttributeSelectorNode) _symbol_s.value;
					
            return new CSSSimpleSelectorNode(c1 + n + "(" + s + ")");
			}
			case 106: // SimpleSelector = TypeOrUniversalSelector.t COLON.c1 NOT.n LPAREN TypeOrUniversalSelector.s RPAREN
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_c1 = _symbols[offset + 2];
					final String c1 = (String) _symbol_c1.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final String s = (String) _symbol_s.value;
					
            return new CSSSimpleSelectorNode(t + c1 + n + "(" + s + ")");
			}
			case 107: // SimpleSelector = COLON.c1 NOT.n LPAREN TypeOrUniversalSelector.s RPAREN
			{
					final Symbol _symbol_c1 = _symbols[offset + 1];
					final String c1 = (String) _symbol_c1.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final String s = (String) _symbol_s.value;
					
            return new CSSSimpleSelectorNode(c1 + n + "(" + s + ")");
			}
			case 108: // AttributeSelectors = AttributeSelectors AttributeSelector
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 109: // AttributeSelectors = AttributeSelector
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 110: // AttributeSelector = CLASS.c
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final String c = (String) _symbol_c.value;
					
			return new CSSAttributeSelectorNode(c);
			}
			case 111: // AttributeSelector = COLON.c Identifier.i
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final String c = (String) _symbol_c.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					
			return new CSSAttributeSelectorNode(c + i);
			}
			case 112: // AttributeSelector = COLON.c1 COLON.c2 Identifier.i
			{
					final Symbol _symbol_c1 = _symbols[offset + 1];
					final String c1 = (String) _symbol_c1.value;
					final Symbol _symbol_c2 = _symbols[offset + 2];
					final String c2 = (String) _symbol_c2.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final String i = (String) _symbol_i.value;
					
			return new CSSAttributeSelectorNode(c1 + c2 + i);
			}
			case 113: // AttributeSelector = COLON Function.f
			{
					final Symbol _symbol_f = _symbols[offset + 2];
					final CSSExpressionNode f = (CSSExpressionNode) _symbol_f.value;
					
			return new CSSAttributeSelectorNode(f);
			}
			case 114: // AttributeSelector = HASH.h
			{
					final Symbol _symbol_h = _symbols[offset + 1];
					final String h = (String) _symbol_h.value;
					
			return new CSSAttributeSelectorNode(h);
			}
			case 115: // AttributeSelector = LBRACKET.l Identifier.i RBRACKET.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final String r = (String) _symbol_r.value;
					
			return new CSSAttributeSelectorNode(l + i + r);
			}
			case 116: // AttributeSelector = LBRACKET.l Identifier.i AttributeValueOperator.o IdentiferOrString.s RBRACKET.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_o = _symbols[offset + 3];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final String s = (String) _symbol_s.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final String r = (String) _symbol_r.value;
					
			return new CSSAttributeSelectorNode(l + i + " " + o + " " + s + r);
			}
			case 4: // Statement = CharSet
			case 5: // Statement = Import
			case 6: // Statement = Media
			case 7: // Statement = Page
			case 8: // Statement = FontFace
			case 9: // Statement = Namespace
			case 10: // Statement = AtRule
			case 11: // Statement = Rule
			case 12: // Statement = MozDocument
			case 20: // MediaExpr = IDENTIFIER
			case 21: // MediaExpr = PROPERTY
			case 22: // MediaExpr = COLOR
			case 23: // MediaExpr = COLON
			case 24: // MediaExpr = RCURLY
			case 25: // MediaExpr = STRING
			case 26: // MediaExpr = LBRACKET
			case 27: // MediaExpr = CLASS
			case 28: // MediaExpr = HASH
			case 29: // MediaExpr = SEMICOLON
			case 30: // MediaExpr = URL
			case 31: // MediaExpr = STAR
			case 32: // MediaExpr = SELECTOR
			case 33: // MediaExpr = COMMA
			case 34: // MediaExpr = NUMBER
			case 35: // MediaExpr = PERCENTAGE
			case 36: // MediaExpr = LENGTH
			case 37: // MediaExpr = EMS
			case 38: // MediaExpr = EXS
			case 39: // MediaExpr = ANGLE
			case 40: // MediaExpr = TIME
			case 41: // MediaExpr = FREQUENCY
			case 42: // MediaExpr = PAGE
			case 43: // MediaExpr = AT_RULE
			case 44: // MediaExpr = CHARSET
			case 45: // MediaExpr = MEDIA_KEYWORD
			case 46: // MediaExpr = FONTFACE
			case 47: // MediaExpr = NAMESPACE
			case 48: // MediaExpr = IMPORT
			case 49: // MediaExpr = RBRACKET
			case 50: // MediaExpr = LPAREN
			case 51: // MediaExpr = PLUS
			case 52: // MediaExpr = SLASH
			case 53: // MediaExpr = MINUS
			case 54: // MediaExpr = RPAREN
			case 55: // MediaExpr = IMPORTANT
			case 56: // MediaExpr = GREATER
			case 57: // MediaExpr = EQUAL
			case 58: // MediaExpr = INCLUDES
			case 59: // MediaExpr = DASHMATCH
			case 73: // Rule = error
			case 93: // Expression = Term
			case 96: // Term = Function
			case 117: // ImportWord = STRING
			case 118: // ImportWord = URL
			case 119: // Identifier = IDENTIFIER
			case 120: // Identifier = PROPERTY
			case 121: // IdentiferOrString = IDENTIFIER
			case 122: // IdentiferOrString = STRING
			case 123: // Separator = SLASH
			case 124: // Separator = COMMA
			case 125: // Separator = PLUS
			case 126: // Separator = MINUS
			case 127: // Separator = EQUAL
			case 128: // Combinator = COMMA
			case 129: // Combinator = PLUS
			case 130: // Combinator = GREATER
			case 131: // Primitive = NUMBER
			case 132: // Primitive = PERCENTAGE
			case 133: // Primitive = LENGTH
			case 134: // Primitive = EMS
			case 135: // Primitive = EXS
			case 136: // Primitive = ANGLE
			case 137: // Primitive = TIME
			case 138: // Primitive = FREQUENCY
			case 139: // Primitive = STRING
			case 140: // Primitive = IDENTIFIER
			case 141: // Primitive = URL
			case 142: // Primitive = COLOR
			case 143: // TypeOrUniversalSelector = IDENTIFIER
			case 144: // TypeOrUniversalSelector = STAR
			case 145: // TypeOrUniversalSelector = SELECTOR
			case 146: // AttributeValueOperator = EQUAL
			case 147: // AttributeValueOperator = INCLUDES
			case 148: // AttributeValueOperator = DASHMATCH
			case 149: // AttributeValueOperator = BEGINS_WITH
			case 150: // AttributeValueOperator = ENDS_WITH
			{
				return _symbols[offset + 1];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
