// java -jar beaver.jar -T -w coffee.grammar
%package "com.aptana.editor.coffee.parsing";

%class "CoffeeParser";

%import "java.util.ArrayList";
%import "java.util.List";
%import "com.aptana.editor.coffee.ICoffeeConstants";
%import "com.aptana.editor.coffee.parsing.ast.*";
%import "com.aptana.editor.coffee.parsing.lexer.*";
%import "com.aptana.parsing.IParseState";
%import "com.aptana.parsing.IParser";
%import "com.aptana.parsing.ast.IParseError";
%import "com.aptana.parsing.ast.IParseNode";
%import "com.aptana.parsing.ast.IParseRootNode";
%import "com.aptana.parsing.ast.ParseError";
%import "com.aptana.parsing.ast.ParseRootNode";
%import "com.aptana.parsing.WorkingParseResult";
%import "com.aptana.parsing.ParseResult";

%terminals AT_SIGIL, BOOL, BOUND_FUNC_ARROW, BY, CALL_END, CALL_START, CATCH, CLASS, COLON;
%terminals COLON_SLASH, COMMA, COMPARE, COMPOUND_ASSIGN, DOT, DOT_DOT;
%terminals DOUBLE_COLON, ELLIPSIS, ELSE, EQUAL, EXTENDS, FINALLY, FOR, FORIN;
%terminals FOROF, FUNC_ARROW, FUNC_EXIST, HERECOMMENT, IDENTIFIER, IF, INDENT, INDEX_END;
%terminals INDEX_PROTO, INDEX_SOAK, INDEX_START, JS, LBRACKET, LCURLY;
%terminals LEADING_WHEN, LOGIC, LOOP, LPAREN, MATH, MINUS, MINUS_MINUS, NUMBER;
%terminals OUTDENT, OWN, PARAM_END, PARAM_START, PLUS, PLUS_PLUS, POST_IF;
%terminals QUESTION, QUESTION_DOT, RBRACKET, RCURLY, REGEX, RELATION, RETURN;
%terminals RPAREN, SHIFT, STATEMENT, STRING, SUPER, SWITCH, TERMINATOR, THIS;
%terminals THROW, TRY, UNARY, UNTIL, WHEN, WHILE;

%typeof AT_SIGIL, BOOL, BOUND_FUNC_ARROW, BY, CALL_END, CALL_START, CATCH, CLASS, COLON = "String";
%typeof COLON_SLASH, COMMA, COMPARE, COMPOUND_ASSIGN, DOT, DOT_DOT = "String";
%typeof DOUBLE_COLON, ELLIPSIS, ELSE, EQUAL, EXTENDS, FINALLY, FOR, FORIN = "String";
%typeof FOROF, FUNC_ARROW, FUNC_EXIST, HERECOMMENT, IDENTIFIER, IF, INDEX_END = "String";
%typeof INDEX_PROTO, INDEX_SOAK, INDEX_START, JS, LBRACKET, LCURLY = "String";
%typeof LEADING_WHEN, LOGIC, LOOP, LPAREN, MATH, MINUS, MINUS_MINUS, NUMBER = "String";
%typeof OWN, PARAM_END, PARAM_START, PLUS, PLUS_PLUS, POST_IF = "String";
%typeof QUESTION, QUESTION_DOT, RBRACKET, RCURLY, REGEX, RELATION, RETURN = "String";
%typeof RPAREN, SHIFT, STATEMENT, STRING, SUPER, SWITCH, TERMINATOR, THIS = "String";
%typeof THROW, TRY, UNARY, UNTIL, WHEN, WHILE = "String";
%typeof INDENT, OUTDENT = "Integer";
%typeof FuncGlyph, RangeDots = "String";
%typeof Line, Expression, Statement, ObjAssignable, Assignable, AssignObj, ParamVar, Accessor, Arg, ForValue = "CoffeeNode";
%typeof WhileSource = "CoffeeWhileNode";
%typeof Literal, Identifier = "CoffeeLiteralNode";
%typeof IndexValue, Index = "CoffeeIndexNode";
%typeof Param = "CoffeeParamNode";
%typeof Value, SimpleAssignable, ThisProperty = "CoffeeValueNode";
%typeof Invocation = "CoffeeCallNode";
%typeof Array = "CoffeeArrNode";
%typeof Object = "CoffeeObjNode";
%typeof Range, Slice = "CoffeeRangeNode";
%typeof Parenthetical = "CoffeeParensNode";
%typeof AssignList, ArgList, Arguments = "List<CoffeeNode>";
%typeof SimpleArgs = "List<CoffeeNode>";
%typeof OptFuncExist = "Boolean";
%typeof ForStart, ForVariables = "CoffeeForVariablesNode";
%typeof ForSource, ForBody = "CoffeeForSourceNode";
%typeof Try = "CoffeeTryNode";
%typeof Catch = "CoffeeCatchNode";
%typeof When = "CoffeeWhenNode";
%typeof Whens = "List<CoffeeWhenNode>";
%typeof If, IfBlock = "CoffeeIfNode";
%typeof Body, Block = "CoffeeBlockNode";

// Operator precedence, high to low
%left DOT, QUESTION_DOT, DOUBLE_COLON;
%left CALL_START, CALL_END;
%nonassoc PLUS_PLUS, MINUS_MINUS;
%left QUESTION;
%right UNARY;
%left MATH;
%left PLUS, MINUS;
%left SHIFT;
%left RELATION;
%left COMPARE;
%left LOGIC;
%nonassoc INDENT, OUTDENT;
%right EQUAL, COLON, COMPOUND_ASSIGN, RETURN, THROW, EXTENDS;
%right FORIN, FOROF, BY, WHEN;
%right IF, ELSE, FOR, DO, WHILE, UNTIL, LOOP, SUPER, CLASS;
%right POST_IF;

%implements "IParser";

%embed {:
	private WorkingParseResult fWorking;

	// suppress the error printouts
	private class CoffeeEvents extends Events
	{
		public void scannerError(Scanner.Exception e)
		{
		}

		public void syntaxError(Symbol token)
		{
			if (token == null || fWorking == null)
			{
				return;
			}
			fWorking.addError(new ParseError(ICoffeeConstants.CONTENT_TYPE_COFFEE, token, IParseError.Severity.ERROR));
		}

		public void unexpectedTokenRemoved(Symbol token)
		{
		}

		public void missingTokenInserted(Symbol token)
		{
		}

		public void misspelledTokenReplaced(Symbol token)
		{
		}

		public void errorPhraseRemoved(Symbol error)
		{
		}
	}

    public synchronized ParseResult parse(IParseState parseState) throws java.lang.Exception
    {
        WorkingParseResult working = new WorkingParseResult();
        parse(parseState, working);
        return working.getImmutableResult();
    }


	protected synchronized void parse(IParseState parseState, WorkingParseResult working) throws java.lang.Exception
	{
		fWorking = working;

		try
		{
    		// make sure we have some source
    		String source = parseState.getSource();

    		// create scanner and send source to it
    		CoffeeScanner scanner = new CoffeeScanner();
    		scanner.setSource(source);

			// parse
			ParseRootNode result = (ParseRootNode) parse(scanner);
			int start = parseState.getStartingOffset();
			int end = start + parseState.getSource().length() - 1;
			result.setLocation(start, end);

			// store results in the parse state
			working.setParseResult(result);

			// attach comments to parse root node
			result.setCommentNodes(scanner.getComments().toArray(new IParseNode[scanner.getComments().size()]));
		}
		finally
		{
			fWorking = null;
		}
	}
:};

%init {:
		report = new CoffeeEvents();
:};

%goal Root;

Root
	=	{:
			return new CoffeeParseRootNode();
		:}
	|	Body.b
		{:
			return new CoffeeParseRootNode(b);
		:}
	|	Block.b TERMINATOR
		{:
			return new CoffeeParseRootNode(b);
		:}
	;

Body
	=	Line.l
		{:
			return new CoffeeBlockNode(l);
		:}
	|	Body.b TERMINATOR Line.l
		{:
			b.addChild(l);
        	return b;
      	:}
	|	Body.b TERMINATOR
	;

Line
	=	Expression
	|	Statement
	;

Statement
	=	Return
	|	Throw
	|	Comment
	|	STATEMENT.s
		{:
        	return new CoffeeLiteralNode(s);
     	:}
    ;

Expression
	=	Value
	|	Invocation
	|	Code
	|	Operation
	|	Assign
	|	If
	|	Try
	|	While
	|	For
	|	Switch
	|	Class
	;

Block
	=	INDENT OUTDENT
		{:
        	return new CoffeeBlockNode();
      	:}
	|	INDENT Body.b OUTDENT
		{:
        	return b;
      	:}
    ;

Identifier
	=	IDENTIFIER.i
		{:
        	return new CoffeeLiteralNode(i);
      	:}
    ;

AlphaNumeric
	=	NUMBER.n
		{:
        	return new CoffeeLiteralNode(n);
      	:}
	|	STRING.s
		{:
        	return new CoffeeLiteralNode(s);
      	:}
    ;

Literal
	=	AlphaNumeric
	|	JS.j
		{:
        	return new CoffeeLiteralNode(j);
      	:}
	|	REGEX.r
		{:
        	return new CoffeeLiteralNode(r);
      	:}
	|	BOOL.b
		{:
	        CoffeeLiteralNode val = new CoffeeLiteralNode(b);
	        if (b == "undefined")
			{
	          val.isUndefined = true;
	        }
	        return val;
      	:}
    ;

Assign
	=	Assignable.a EQUAL Expression.e
		{:
        	return new CoffeeAssignNode(a, e);
      	:}
	|	Assignable.a EQUAL INDENT Expression.e OUTDENT
		{:
        	return new CoffeeAssignNode(a, e);
      	:}
    ;

AssignObj
	=	ObjAssignable.o
		{:
        	return new CoffeeValueNode(o);
      	:}
	|	ObjAssignable.o COLON Expression.e
		{:
        	return new CoffeeAssignNode(new CoffeeValueNode(o), e, "object");
      	:}
	|	ObjAssignable.o COLON_SLASH INDENT Expression.e OUTDENT
		{:
        	return new CoffeeAssignNode(new CoffeeValueNode(o), e, "object");
      	:}
	|	Comment
	;
   
ObjAssignable
	=	Identifier
	|	AlphaNumeric
	|	ThisProperty
	;

Return
	=	RETURN Expression.e
		{:
        	return new CoffeeReturnNode(e);
      	:}
	|	RETURN
		{:
        	return new CoffeeReturnNode();
      	:}
    ;

Comment
	=	HERECOMMENT.h
		{:
        	return new CoffeeCommentNode(h);
      	:}
    ;

Code
	=	PARAM_START ParamList.p PARAM_END FuncGlyph.f Block.b
		{:
        	return new CoffeeCodeNode(p, b, f);
      	:}
	|	FuncGlyph.f Block.b
		{:
        	return new CoffeeCodeNode(b, f);
      	:}
    ;
    
FuncGlyph
	=	FUNC_ARROW
		{:
        	return new Symbol("func");
      	:}
	|	BOUND_FUNC_ARROW
		{:
        	return new Symbol("boundfunc");
      	:}
    ;

OptComma
	=	// Nothing
	|	COMMA
	;

ParamList
	// =	{:
        	// return new CoffeeParametersNode();
      	// :}
	// |	Param.p
		// {:
        	// return new CoffeeParametersNode(p);
      	// :}
	// |	ParamList.l COMMA Param.p
		// {:
			// l.addChild(p);
        	// return l;
      	// :}
    // ;
    =	Param.p
    |	ParamList.l COMMA Param.p
    ;
    

Param
	=	ParamVar.v
		{:
        	return new CoffeeParamNode(v);
      	:}
	|	ParamVar.v ELLIPSIS
		{:
        	return new CoffeeParamNode(v, null, true);
      	:}
	|	ParamVar.v EQUAL Expression.e
		{:
        	return new CoffeeParamNode(v, e);
      	:}
    ;
    
ParamVar
	=	Identifier
	|	ThisProperty
	|	Array
	|	Object
	;

Splat
	=	Expression.e ELLIPSIS
		{:
        	return new CoffeeSplatNode(e);
      	:}
    ;

SimpleAssignable
	=	Identifier.i
		{:
        	return new CoffeeValueNode(i);
      	:}
	|	Value.v Accessor.a
		{:
        	return v.push(a);
      	:}
	|	Invocation.i Accessor.a
		{:
        	return new CoffeeValueNode(i, a);
      	:}
	|	ThisProperty
	;
    
Assignable
	=	SimpleAssignable
	|	Array.a
		{:
        	return new CoffeeValueNode(a);
      	:}
	|	Object.o
		{:
        	return new CoffeeValueNode(o);
      	:}
    ;

Value
	=	Assignable
	|	Literal.l
		{:
        	return new CoffeeValueNode(l);
      	:}
	|	Parenthetical.p
		{:
        	return new CoffeeValueNode(p);
      	:}
	|	Range.r
		{:
        	return new CoffeeValueNode(r);
      	:}
	|	This
    ;

Accessor
	=	DOT Identifier.i
		{:
        	return new CoffeeAccessNode(i);
      	:}
	|	QUESTION_DOT Identifier.i
		{:
        	return new CoffeeAccessNode(i, "soak");
      	:}
	|	DOUBLE_COLON Identifier.i
		{:
        	return new CoffeeAccessNode(i, "proto");
      	:}
	|	DOUBLE_COLON
		{:
        	return new CoffeeAccessNode(new CoffeeLiteralNode("prototype"));
      	:}
	|	Index
	;

Index
	=	INDEX_START IndexValue.v INDEX_END
		{:
        	return v;
      	:}
	|	INDEX_SOAK  Index.i
		{:
			i.soak = true;
			return i;
      	:}
	|	INDEX_PROTO Index.i
		{:
			i.proto = true;
			return i;
      	:}
    ;

IndexValue
	=	Expression.e
		{:
        	return new CoffeeIndexNode(e);
      	:}
	|	Slice.s
		{:
        	return new CoffeeSliceNode(s);
      	:}
    ;

Object
	=	LCURLY AssignList.l OptComma.c RCURLY
		{:
        	return new CoffeeObjNode(c, l);
      	:}
    ;

AssignList
	=	{:
        	return new Symbol(new ArrayList<CoffeeNode>());
      	:}
	|	AssignObj.a
		{:
			ArrayList<CoffeeNode> lst = new ArrayList<CoffeeNode>();
       		lst.add(a);
       		return new Symbol(lst);
      	:}
	|	AssignList.l COMMA AssignObj.a
		{:
       		l.add(a);
       	    return new Symbol(l);
      	:}
	|	AssignList.l OptComma TERMINATOR AssignObj.a
		{:
			l.add(a);
       	    return new Symbol(l);
      	:}
	|	AssignList.l OptComma INDENT AssignList.a OptComma OUTDENT
		{:
			l.addAll(a);
       	    return new Symbol(l);
      	:}
    ;

Class
	=	CLASS
		{:
        	return new CoffeeClassNode();
      	:}
	|	CLASS Block.b
		{:
        	return new CoffeeClassNode(null, null, b);
      	:}
	|	CLASS EXTENDS Value.v
		{:
        	return new CoffeeClassNode(null, v);
      	:}
	|	CLASS EXTENDS Value.v Block.b
		{:
        	return new CoffeeClassNode(null, v, b);
      	:}
	|	CLASS SimpleAssignable.s
		{:
        	return new CoffeeClassNode(s);
      	:}
	|	CLASS SimpleAssignable.s Block.b
		{:
        	return new CoffeeClassNode(s, null, b);
      	:}
	|	CLASS SimpleAssignable.s EXTENDS Value.v
		{:
        	return new CoffeeClassNode(s, v);
      	:}
	|	CLASS SimpleAssignable.s EXTENDS Value.v Block.b
		{:
        	return new CoffeeClassNode(s, v, b);
      	:}
    ;

Invocation
	=	Value.v OptFuncExist.o Arguments.a
		{:
        	return new CoffeeCallNode(v, a, o);
      	:}
	|	Invocation.i OptFuncExist.o Arguments.a
		{:
        	return new CoffeeCallNode(i, a, o);
      	:}
	|	SUPER
		{:
			List<CoffeeNode> args = new ArrayList<CoffeeNode>();
			args.add(new CoffeeSplatNode(new CoffeeLiteralNode("arguments")));
        	return new CoffeeCallNode("super", args);
      	:}
	|	SUPER Arguments.a
		{:
        	return new CoffeeCallNode("super", a);
      	:}
    ;

OptFuncExist
	=	{:
        	return new Symbol(false);
      	:}
	|	FUNC_EXIST
		{:
        	return new Symbol(true);
      	:}
    ;

Arguments
	=	CALL_START CALL_END
		{:
        	return new Symbol(new ArrayList<CoffeeNode>());
      	:}
	|	CALL_START ArgList.l OptComma CALL_END
		{:
        	return new Symbol(l);
      	:}
    ;

This
	=	THIS
		{:
        	return new CoffeeValueNode(new CoffeeLiteralNode("this"));
      	:}
	|	AT_SIGIL
		{:
        	return new CoffeeValueNode(new CoffeeLiteralNode("this"));
      	:}
    ;

ThisProperty
	=	AT_SIGIL Identifier.i
		{:
        	return new CoffeeValueNode(new CoffeeLiteralNode("this"), new CoffeeAccessNode(i), "this");
      	:}
	;

Array
	=	LBRACKET RBRACKET
		{:
        	return new CoffeeArrNode(new ArrayList<CoffeeNode>());
      	:}
	|	LBRACKET ArgList.l OptComma RBRACKET
		{:
        	return new CoffeeArrNode(l);
      	:}
    ;

RangeDots
	=	DOT_DOT
		{:
        	return new Symbol("inclusive");
      	:}
	|	ELLIPSIS
		{:
        	return new Symbol("exclusive");
      	:}
    ;

Range
	=	LBRACKET Expression.e RangeDots.r Expression.x RBRACKET
		{:
        	return new CoffeeRangeNode(e, x, r);
      	:}
    ;

Slice
	=	Expression.e RangeDots.r Expression.x
		{:
        	return new CoffeeRangeNode(e, x, r);
      	:}
	|	Expression.e RangeDots.r
		{:
        	return new CoffeeRangeNode(e, null, r);
      	:}
	|	RangeDots.r Expression.e
		{:
        	return new CoffeeRangeNode(null, e, r);
      	:}
    ;

ArgList
	=	Arg.a
		{:
        	ArrayList<CoffeeNode> lst = new ArrayList<CoffeeNode>();
       		lst.add(a);
       		return new Symbol(lst);
      	:}
	|	ArgList.l COMMA Arg.a
		{:
			l.add(a);
        	return new Symbol(l);
      	:}
	|	ArgList.l OptComma TERMINATOR Arg.a
		{:
			l.add(a);
        	return new Symbol(l);
      	:}
	|	INDENT ArgList.l OptComma OUTDENT
		{:
        	return new Symbol(l);
      	:}
	|	ArgList.l OptComma INDENT ArgList.a OptComma OUTDENT
		{:
			l.addAll(a);
        	return new Symbol(l);
      	:}
    ;

Arg
	=	Expression
	|	Splat
	;

SimpleArgs
	=	Expression.e
		{:
        	ArrayList<CoffeeNode> lst = new ArrayList<CoffeeNode>();
       		lst.add(e);
       		return new Symbol(lst);
      	:}
	|	SimpleArgs.s COMMA Expression.e
		{:
			s.add(e);
        	return new Symbol(s);
      	:}
    ;

Try
	=	TRY Block.b
		{:
        	return new CoffeeTryNode(b);
      	:}
	|	TRY Block.b Catch.c
		{:
        	return new CoffeeTryNode(b, c.getIdentifier(), c.getBlock());
      	:}
	|	TRY Block.b FINALLY Block.l
		{:
        	return new CoffeeTryNode(b, null, null, l);
      	:}
	|	TRY Block.b Catch.c FINALLY Block.l
		{:
        	return new CoffeeTryNode(b, c.getIdentifier(), c.getBlock(), l);
      	:}
    ;

Catch
	=	CATCH Identifier.i Block.b
		{:
        	return new CoffeeCatchNode(i, b);
      	:}
    ;

Throw
	=	THROW Expression.e
		{:
        	return new CoffeeThrowNode(e);
      	:}
    ;

Parenthetical
	=	LPAREN Body.b RPAREN
		{:
        	return new CoffeeParensNode(b);
      	:}
	|	LPAREN INDENT Body.b OUTDENT RPAREN
		{:
        	return new CoffeeParensNode(b);
      	:}
    ;

WhileSource
	=	WHILE Expression.e
		{:
        	return new CoffeeWhileNode(e);
      	:}
	|	WHILE Expression.e WHEN Expression.x
		{:
        	return new CoffeeWhileNode(e, x);
      	:}
	|	UNTIL Expression.e
		{:
        	return new CoffeeWhileNode(e, true);
      	:}
	|	UNTIL Expression.e WHEN Expression.x
		{:
        	return new CoffeeWhileNode(e, x, true);
      	:}
    ;

While
	=	WhileSource.w Block.b
		{:
        	return w.addBody(b);
      	:}
	|	Statement.s WhileSource.w
		{:
        	return w.addBody(new CoffeeBlockNode(s));
      	:}
	|	Expression.e WhileSource.w
		{:
        	return w.addBody(new CoffeeBlockNode(e));
      	:}
	|	Loop.l
		{:
        	return l;
      	:}
    ;

Loop
	=	LOOP Block.b
		{:
        	return new CoffeeWhileNode(new CoffeeLiteralNode("true")).addBody(b);
      	:}
	|	LOOP Expression.e
		{:
        	return new CoffeeWhileNode(new CoffeeLiteralNode("true")).addBody(new CoffeeBlockNode(e));
      	:}
    ;

For
	=	Statement.s ForBody.f
		{:
        	return new CoffeeForNode(s, f);
      	:}
	|	Expression.e ForBody.f
		{:
        	return new CoffeeForNode(e, f);
      	:}
	|	ForBody.f Block.b
		{:
        	return new CoffeeForNode(b, f);
      	:}
    ;

ForBody
	=	FOR Range.r
		{:
        	return new CoffeeForSourceNode(new CoffeeValueNode(r));
      	:}
	|	ForStart.f ForSource.s
		{:
        	s.own = f.own;
        	s.name = f.getChild(0);
        	s.index = f.getChild(1);
        	return s;
      	:}
    ;

ForStart
	=	FOR ForVariables.f
		{:
        	return f;
      	:}
	|	FOR OWN ForVariables.f
		{:
        	f.own = true;
        	return f;
      	:}
    ;

ForValue
	=	Identifier
	|	Array.a
		{:
        	return new CoffeeValueNode(a);
      	:}
	|	Object.o
		{:
        	return new CoffeeValueNode(o);
      	:}
    ;

ForVariables
	=	ForValue.f
		{:
        	return new CoffeeForVariablesNode(f);
      	:}
	|	ForValue.f COMMA ForValue.v
		{:
        	return new CoffeeForVariablesNode(f, v);
      	:}
    ;

ForSource
	=	FORIN Expression.e
		{:
        	return new CoffeeForSourceNode(e);
      	:}
	|	FOROF Expression.e
		{:
        	return new CoffeeForSourceNode(e, true);
      	:}
	|	FORIN Expression.e WHEN Expression.x
		{:
			return new CoffeeForSourceNode(e, x);
      	:}
	|	FOROF Expression.e WHEN Expression.x
		{:
			return new CoffeeForSourceNode(e, x, true);
      	:}
	|	FORIN Expression.e BY Expression.x
		{:
			return new CoffeeForSourceNode(e, null, x);
      	:}
	|	FORIN Expression.e WHEN Expression.x BY Expression.p
		{:
			return new CoffeeForSourceNode(e, x, p);
      	:}
	|	FORIN Expression.e BY Expression.x WHEN Expression.p
		{:
			return new CoffeeForSourceNode(e, p, x);
      	:}
    ;

Switch
	=	SWITCH Expression.e INDENT Whens.w OUTDENT
		{:
        	return new CoffeeSwitchNode(e, w);
      	:}
	|	SWITCH Expression.e INDENT Whens.w ELSE Block.b OUTDENT
		{:
        	return new CoffeeSwitchNode(e, w, b);
      	:}
	|	SWITCH INDENT Whens.w OUTDENT
		{:
        	return new CoffeeSwitchNode(null, w);
      	:}
	|	SWITCH INDENT Whens.w ELSE Block.b OUTDENT
		{:
        	return new CoffeeSwitchNode(null, w, b);
      	:}
    ;

Whens
	=	When.w
		{:
			ArrayList<CoffeeWhenNode> lst = new ArrayList<CoffeeWhenNode>();
       		lst.add(w);
       		return new Symbol(lst);
      	:}
	|	Whens.s When.w
		{:
			s.add(w);
        	return new Symbol(s);
      	:}
    ;

When
	=	LEADING_WHEN SimpleArgs.a Block.b
		{:
        	return new CoffeeWhenNode(a, b);
      	:}
	|	LEADING_WHEN SimpleArgs.a Block.b TERMINATOR
		{:
        	return new CoffeeWhenNode(a, b);
      	:}
    ;

IfBlock
	=	IF.i Expression.e Block.b
		{:
        	return new CoffeeIfNode(e, b, i);
      	:}
	|	IfBlock.i ELSE IF.f Expression.e Block.b
		{:
        	return i.addElse(new CoffeeIfNode(e, b, f));
      	:}
    ;

If
	=	IfBlock
	|	IfBlock.i ELSE Block.b
		{:
        	return i.addElse(b);
      	:}
	|	Statement.s POST_IF.p Expression.e
		{:
        	return new CoffeeIfNode(e, new CoffeeBlockNode(s), p, true);
      	:}
	|	Expression.e POST_IF.p Expression.x
		{:
        	return new CoffeeIfNode(x, new CoffeeBlockNode(e), p, true);
      	:}
    ;

Operation
	=	UNARY.u Expression.e
		{:
        	return CoffeeOpNode.create(u, e, null);
      	:}
	|	MINUS Expression.e
		{:
        	return new CoffeeOpNode("-", e);
      	:}
	 // {
        // prec: "UNARY"
      // }), 
	|	PLUS Expression.e
		{:
        	return new CoffeeOpNode("+", e);
      	:}
		// { No idea what these "prec" are, maybe it does some check for preceding token?
        // prec: "UNARY"
      // }
	|	MINUS_MINUS SimpleAssignable.s
		{:
        	return new CoffeeOpNode("--", s);
      	:}
	|	PLUS_PLUS SimpleAssignable.s
		{:
        	return new CoffeeOpNode("++", s);
      	:}
	|	SimpleAssignable.a MINUS_MINUS
		{:
			return new CoffeeOpNode("--", a, null, true);
      	:}
	|	SimpleAssignable.a PLUS_PLUS
		{:
        	return new CoffeeOpNode("++", a, null, true);
      	:}
	|	Expression.e QUESTION
		{:
        	return new CoffeeExistenceNode(e);
      	:}
	|	Expression.e PLUS Expression.x
		{:
        	return new CoffeeOpNode("+", e, x);
      	:}
	|	Expression.e MINUS Expression.x
		{:
        	return new CoffeeOpNode("-", e, x);
      	:}
	|	Expression.e MATH.m Expression.x
		{:
        	return new CoffeeOpNode(m, e, x);
      	:}
	|	Expression.e SHIFT.s Expression.x
		{:
        	return new CoffeeOpNode(s, e, x);
      	:}
	|	Expression.e COMPARE.c Expression.x
		{:
        	return new CoffeeOpNode(c, e, x);
      	:}
	|	Expression.e LOGIC.l Expression.x
		{:
        	return new CoffeeOpNode(l, e, x);
      	:}
	|	Expression.e RELATION.r Expression.x
		{:
        	if (r.charAt(0) == '!')
			{
          		return new CoffeeOpNode(r.substring(1), e, x).invert();
        	}
			else
			{
          		return CoffeeOpNode.create(r, e, x);
        	}
      	:}
	|	SimpleAssignable.a COMPOUND_ASSIGN.c Expression.e
		{:
        	return new CoffeeAssignNode(a, e, c);
      	:}
	|	SimpleAssignable.a COMPOUND_ASSIGN.c INDENT Expression.e OUTDENT
		{:
        	return new CoffeeAssignNode(a, e, c);
      	:}
	|	SimpleAssignable.a EXTENDS Expression.e
		{:
        	return new CoffeeExtendsNode(a, e);
      	:}
    ;
