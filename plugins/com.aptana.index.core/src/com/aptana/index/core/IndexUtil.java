/**
 * Aptana Studio
 * Copyright (c) 2005-2011 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the GNU Public License (GPL) v3 (with exceptions).
 * Please see the license.html included with this distribution for details.
 * Any modifications to this file must keep this entire header intact.
 */
package com.aptana.index.core;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.aptana.jetty.util.epl.ajax.JSON.Convertible;

import com.aptana.core.logging.IdeLog;

/**
 * IndexUtil
 */
public class IndexUtil
{
	/**
	 * This method tries to cast the specified object to an array. If that is successful, then a new list will be
	 * generated. Each array element that is a Map will be passed into the fromJSON on the new instance of T.
	 * 
	 * @param <T>
	 * @param object
	 * @param list
	 * @param itemClass
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	public static <T extends Convertible> List<T> createList(Object object, Class<T> itemClass)
	{
		List<T> result = null;

		if (itemClass != null && object != null && object.getClass().isArray())
		{
			Object[] objects = (Object[]) object;

			if (objects.length > 0)
			{
				result = new ArrayList<T>();

				// Wrap loop because if newInstance fails once, it will fail for all iterations
				try
				{
					for (Object value : (Object[]) object)
					{
						if (value instanceof Map)
						{
							T v = itemClass.newInstance();

							v.fromJSON((Map) value);

							result.add(v);
						}
					}
				}
				catch (InstantiationException e)
				{
					IdeLog.logError(IndexPlugin.getDefault(), e);
				}
				catch (IllegalAccessException e)
				{
					IdeLog.logError(IndexPlugin.getDefault(), e);
				}
			}
		}

		return result;
	}

	/**
	 * This method tries to cast the specified object to an array. If that is successful, then a new list will be
	 * generated by calling toString on each array element as it is added to the resulting list
	 * 
	 * @param object
	 * @param list
	 * @return
	 */
	public static List<String> createList(Object object)
	{
		List<String> result = null;

		if (object != null && object.getClass().isArray())
		{
			Object[] objects = (Object[]) object;

			if (objects.length > 0)
			{
				result = new ArrayList<String>();

				for (Object value : (Object[]) object)
				{
					result.add(value.toString());
				}
			}
		}

		return result;
	}

	private IndexUtil()
	{
	}
}
